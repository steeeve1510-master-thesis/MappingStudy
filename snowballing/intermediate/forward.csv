Title,Abstract,Authors,Published,Published_In
A combined approach to optimize the test suite size in regression testing,"Testing is an important software engineering activity which is widely used by testers to reveal faults and improve the quality of the software by omitting or removing the detected faults. After required subsequent modifications in the software, there is a need to re-validate","['S Singh', 'R Shree']",2016,CSI Transactions on ICT
A comparative study of manual and automated testing for industrial control software,"Automated test generation has been suggested as a way of creating tests at a lower cost. Nonetheless, it is not very well studied how such tests compare to manually written ones in terms of cost and effectiveness. This is particularly true for industrial control software, where","['E Enoiu', 'D Sundmark', 'A Čaušević']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
A comparative study of manual and automated testing in industrial embedded software,"Automated test generation has been suggested as a way of creating tests at a lower cost. Nonetheless, it is not very well studied how such tests compare to manually written ones in terms of cost and effectiveness. This is particularly true for industrial control software, where","['EP Enoiu', 'D Sundmark', 'A Causevic']",2016,
A comparative study of whole issues and challenges in mutation testing,Mutation testing is a powerful and expensive method in software testing context. It is used as a test criterion to assess the quality of test suites or generate test suites which are able to kill mutants created by seeding artificial defects in the original program code. These test suites,"['NN Bokaei', 'MR Keyvanpour']",2019,2019 5th Conference on Knowledge Based Engineering and Innovation (KBEI)
A comprehensive framework for testing database-centric software applications,"The database is a critical component of many modern software applications. Recent reports indicate that the vast majority of database use occurs from within an application program. Indeed, database-centric applications have been implemented to create digital libraries",['GM Kapfhammer'],2007,
A comprehensive study of pseudo-tested methods,"Pseudo-tested methods are defined as follows: they are covered by the test suite, yet no test case fails when the method body is removed, ie, when all the effects of this method are suppressed. This intriguing concept was coined in 2016, by Niedermayr and colleagues","['OL Vera-Pérez', 'B Danglot', 'M Monperrus']",2019,Empirical Software Engineering
A context-sensitive coverage criterion for test suite reduction,"Modern software is increasingly developed using multi-language implementations, large supporting libraries and frameworks, callbacks, virtual function calls, reflection, multithreading, and object-and aspect-oriented programming. The predominant example of",['SD McMaster'],2008,
A controlled experiment in testing of safety-critical embedded software,"In engineering of safety critical systems, regulatory standards often put requirements on both traceable specification-based testing, and structural coverage on program units. Automated test generation techniques can be used to generate inputs to cover the structural aspects of","['EP Enoiu', 'A Cauevic', 'D Sundmark']",2016,"2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
A correlation study between automated program repair and test-suite metrics,"Automated program repair is increasingly gaining traction, due to its potential to reduce debugging cost greatly. The feasibility of automated program repair has been shown in a number of works, and the research focus is gradually shifting toward the quality of generated","['J Yi', 'SH Tan', 'S Mechtaev', 'M Böhme']",2018,Proceedings of the 40th International Conference on Software Engineering
A dataflow testing approach for aspect-oriented programs,"Dataflow testing of programs ensures the execution of data dependencies between locations in the code (1) where variables are assigned values, and (2) where these definitions are used. Such data dependencies are called Def-Use Associations (DUAs). In","['F Wedyan', 'S Ghosh']",2010,2010 IEEE 12th International Symposium on High Assurance Systems Engineering
A delta-debugging approach to assessing the resilience of actor programs through run-time test perturbations,"Among distributed applications, the actor model is increasingly prevalent. This programming model organises applications into fully-isolated processes that communicate through asynchronous messaging. Supported by frameworks such as Akka and Orleans, it is","['J De Bleser', 'D Di Nucci', 'C De Roover']",2020,Proceedings of the IEEE/ACM 1st International Conference on Automation of Software Test
A flexible and non-intrusive approach for computing complex structural coverage metrics,Software analysis tools and techniques often leverage structural code coverage information to reason about the dynamic behavior of software. Existing techniques instrument the code with the required structural obligations and then monitor the execution of the compiled code,"['MW Whalen', 'S Person', 'N Rungta']",2015,2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
A framework to advise tests using tests,"Tests generated by different approaches can form a rich body of information about the system under test (SUT), which can then be used to amplify the power of test suites. Diversity in test representations, however, creates an obstacle to extracting and using this information","['Y Wang', 'S Person', 'S Elbaum', 'MB Dwyer']",2014,Companion Proceedings of the 36th International Conference on Software Engineering
A joinpoint coverage measurement tool for evaluating the effectiveness of test inputs for aspectj programs,"Testing aspect-oriented programs is challenging in part because of the interactions between the aspects and the base classes with which the aspects are woven. Coverage metrics, such as joinpoint coverage, address faults resulting from the changes in base class control flow","['F Wedyan', 'S Ghosh']",2008,2008 19th International Symposium on Software Reliability Engineering (ISSRE)
A large-scale empirical comparison of static and dynamic test case prioritization techniques,"The large body of existing research in Test Case Prioritization (TCP) techniques, can be broadly classified into two categories: dynamic techniques (that rely on run-time execution information) and static techniques (that operate directly on source and test code). Absent","['Q Luo', 'K Moran', 'D Poshyvanyk']",2016,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering
A large-scale evaluation of automated unit test generation using evosuite,"Research on software testing produces many innovative automated techniques, but because software testing is by necessity incomplete and approximate, any new technique faces the challenge of an empirical assessment. In the past, we have demonstrated scientific","['G Fraser', 'A Arcuri']",2014,ACM Transactions on Software Engineering and Methodology
A large-scale study of test coverage evolution,"Statement coverage is commonly used as a measure of test suite quality. Coverage is often used as a part of a code review process: if a patch decreases overall coverage, or is itself not covered, then the patch is scrutinized more closely. Traditional studies of how coverage","['M Hilton', 'J Bell', 'D Marinov']",2018,Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering
A machine learning approach for classification of equivalent mutants,"Mutation testing is a fault‐based technique to test the quality of test suites by inducing artificial syntactic faults or mutants in a source program. However, some mutants have the same semantics as original program and cannot be detected by any test suite input known","['MR Naeem', 'T Lin', 'H Naeem']",2020,Journal of Software: Evolution and Process
A method for finding missing unit tests,"Because tests are important to the development process, developers need to know when a test suite is missing tests. Missing tests—tests that should be included in a test suite but are not—reduce the utility that developers can derive from a test suite. Currently, developers find","['D Gaston', 'J Clause']",2020,2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)
A model to estimate first-order mutation coverage from higher-order mutation coverage,"The test suite is essential for fault detection during software development. First-order mutation coverage is an accurate metric to quantify the quality of the test suite. However, it is computationally expensive. Hence, the adoption of this metric is limited. In this study, we","['A Parsai', 'A Murgia', 'S Demeyer']",2016,"2016 IEEE International Conference on Software Quality, Reliability and Security (QRS)"
A model‐driven framework to enhance the consistency of logical integrity constraints: Introducing integrity regression testing,"Although the importance of models continuously grows in software development, common development approaches are less able to integrate the automatic management of model integrity into the development process. These critically important constraints may ensure the",['M Nooraei Abadeh'],2019,Software: Practice and Experience
A multi-objective optimization approach for selection of second order mutant generation strategies,"The use of Higher-Order Mutants (HOMs) presents some advantages concerning the traditional use of First-Order Mutants (FOMs). HOMs can better simulate real and subtle faults, reduce the number of generated mutants and test cases, and so on","['JAP Lima', 'SR Vergilio']",2017,Proceedings of the 2nd Brazilian Symposium on Systematic and Automated Software Testing - SAST
A mutation analysis framework for simulink models,"Mutation analysis is a fault-based method used for introducing small changes into a program, producing mutants based on mutation operators, classes of commonly occurring faults. Mutation analysis has been used in the last couple of decades for evaluating how",['H Runge'],2018,
A new dimension of test quality: assessing and generating higher quality unit test cases,"Unit tests form the first defensive line against the introduction of bugs in software systems. Therefore, their quality is of a paramount importance to produce robust and reliable software. To assess test quality, many organizations relies on metrics like code and mutation",['G Grano'],2019,Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis
A new perspective on the competent programmer hypothesis through the reproduction of bugs with repeated mutations,"The competent programmer hypothesis states that most programmers are competent enough to create correct or almost correct source code. Because this implies that bugs should usually manifest through small variations of the correct code, the competent","['E Stein', 'S Herbold', 'F Trautsch', 'J Grabowski']",2021,
A new similarity-based greedy approach for generating effective test suite,"Software regression testing is one of the most critical phases of software development life cycle, used by developers with the intent of detecting new faults to validate modified software prior to delivery to the customer. To validate updated features, new test cases are","['S Singh', 'R Shree']",2018,International Journal of Intelligent Engineering and Systems
A new structural coverage criterion for dynamic detection of program invariants,Dynamic detection of program invariants is emerging as an important research area with many challenging problems. Generating suitable test cases that support accurate detection of program invariants is crucial to the dynamic approach of program invariant detection. In,"['N Gupta', 'ZV Heidepriem']",2003,"18th IEEE International Conference on Automated Software Engineering, 2003. Proceedings."
A novel approach for mutant diversity-based fault localization: DAM-FL,"Locating faults after detecting is one of the important steps in software debugging. For fault localization, many approaches are there. Mutant based approaches are also available for fault localization and they have performed better compared to statement based approaches","['N Gupta', 'A Sharma', 'MK Pachariya']",2019,International Journal of Computers and Applications
A novel technique for testing an aspect oriented software system using genetic and fuzzy clustering algorithm,"Testing of software is a worthwhile aspect of software development life cycle. Effective and efficient test cases must be designed to test the software which will reduce the testing cost, time and effort. Nowadays, testing an aspect-oriented program is becoming a challenge for","['S Dalal', 'S Hooda']",2017,2017 International Conference on Computer and Applications (ICCA)
A novel test case generation method based on program structure diagram,"At present, embedded software has the problems of test lag, non-visual and low efficiency, depending on the test design of testers. It cannot guarantee the quality of the test cases and cannot guarantee the quality of the test. In this paper, a software program structure diagram","['X Wu', 'M Qu', 'Y Tao', 'G Wang']",2019,International Journal of Grid and Utility Computing
A novel use of equivalent mutants for static anomaly detection in software artifacts,"Context: In mutation analysis, a mutant of a software artifact, either a program or a model, is said equivalent if it leaves the artifact meaning unchanged. Equivalent mutants are usually seen as an inconvenience and they reduce the applicability of mutation analysis. Objective","['P Arcaini', 'A Gargantini', 'E Riccobene']",2017,Information and Software Technology
A path-aware approach to mutant reduction in mutation testing,"Context: Mutation testing, which systematically generates a set of mutants by seeding various faults into the base program under test, is a popular technique for evaluating the effectiveness of a testing method. However, it normally requires the execution of a large","['C Sun', 'F Xue', 'H Liu', 'X Zhang']",2017,Information and Software Technology
A pointcut-based coverage analysis approach for aspect-oriented programs,"Aspect-oriented programming (AOP) is a promising technology that supports separation of crosscutting concerns (ie, functionality that tends to be tangled with, and scattered through the rest of the system). In AOP, a method-like construct named advice is applied to join","['OAL Lemos', 'PC Masiero']",2011,Information Sciences
A preliminary report on gamifying a software testing course with the code defenders testing game,"It is challenging to teach software testing in a way that is engaging for students, and to ensure that they practice effective testing sufficiently. Code Defenders is an educational game that is intended to address this problem: Students compete over code under test by","['G Fraser', 'A Gambi', 'JM Rojas']",2018,Proceedings of the 3rd European Conference of Software Engineering Education
A program slicing-based method for effective detection of coincidentally correct test cases,"Despite the proven applicability of the spectrum-based fault localization (SBFL) methods, their effectiveness may be degraded due to the presence of coincidental correctness, which occurs when faults fail to propagate, ie, their execution does not result in failures. This article","['F Feyzi', 'S Parsa']",2018,Computing
A proposal for revisiting coverage testing metrics,"Test coverage information can be very useful for guiding testers in enhancing their test suites to exercise possible uncovered entities and in deciding when to stop testing. Since the concept of test criterion was born, several contributions have been made by both",['B Miranda'],2014,Proceedings of the 29th ACM/IEEE international conference on Automated software engineering
A quality estimation of mutation clustering in c# programs,Mutation testing tasks are expensive in time and resources. Different cost reduction methods were developed to cope with this problem. In this chapter experimental evaluation of mutation clustering is presented. The approach was applied for object-oriented and,['A Derezińska'],2013,"New Results in Dependability and Computer Systems, Advances in Intelligent Systems and Computing"
A regression tests selection technique for aspect-oriented programs,"As the Aspect-Oriented Software Development gains popularity, there is growing interest as developing for existing object-oriented software aspects to address the crosscutting problems of those systems. Existing object-oriented regression test selection",['G Xu'],2006,Proceedings of the 2nd workshop on Testing aspect-oriented programs  - WTAOP '06
A replicated study on random test case generation and manual unit testing: How many bugs do professional developers find?,"This paper describes the replication of an empirical study comparing tool-supported test case generation and manual development of unit tests. As variation to the original study, which was based on test results from students performing manual unit testing for 60 minutes","['R Ramler', 'K Wolfmaier']",2013,2013 IEEE 37th Annual Computer Software and Applications Conference
A requirement-based systematic test-case generation method for safety-critical embedded systems,"Safety-critical systems have to be tested exhaustively to ensure that there is no erroneous behavior, because failures may have serious impact. In relevant standards requirements for the testing process are defined, for instance, the required coverage metrics (like MC/DC) or""",['S Kandl'],2010,
A scalable approach to user-session based testing of web applications through concept analysis,"The continuous use of the Web for daily operations by businesses, consumers, and government has created a great demand for reliable Web applications. One promising approach to testing the functionality of Web applications leverages user-session data","['S Sampath', 'V Mihaylov', 'A Souter']",2004,"Proceedings. 19th International Conference on Automated Software Engineering, 2004."
A search-based approach to generate mc/dc test data for ocl constraints,"Automated generation of test data is an important and challenging activity in Model-based Testing. This typically requires solving of constraints, written in Object Constraint Language (OCL), specified on models in order to obtain solutions that can be used as test data. Test","['H Sartaj', 'MZ Iqbal', 'AAA Jilani', 'MU Khan']",2019,"Search-Based Software Engineering, Lecture Notes in Computer Science"
A snowballing literature study on test amplification,"The adoption of agile approaches has put an increased emphasis on testing, resulting in extensive test suites. These suites include a large number of tests, in which developers embed knowledge about meaningful input data and expected properties as oracles. This","['B Danglot', 'O Vera-Perez', 'Z Yu', 'A Zaidman']",2019,Journal of Systems and Software
A splitting strategy for testing concurrent programs,"Reachability testing is an important approach to testing concurrent programs. It generates and exercises every partially ordered synchronization sequence automatically and on-the-fly without constructing a static model and saving any test history. However, test sequences","['X Qi', 'H Zhou']",2019,"2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)"
A study of bugs in test code and a test model for analyzing tests,Description Testing has become a wide-spread practice among practitioners. Test cases are written to verify that production code functions as expected and are modified alongside the production code. Over time the quality of the test code can degrade. The test code might,['A Vahabzadeh Sefiddarbon'],2016,
A study of equivalent and stubborn mutation operators using human analysis of equivalence,"Though mutation testing has been widely studied for more than thirty years, the prevalence and properties of equivalent mutants remain largely unknown. We report on the causes and prevalence of equivalent mutants and their relationship to stubborn mutants (those that","['X Yao', 'M Harman', 'Y Jia']",2014,Proceedings of the 36th International Conference on Software Engineering
A survey on data-flow testing,Data-flow testing (DFT) is a family of testing strategies designed to verify the interactions between each program variable's definition and its uses. Such a test objective of interest is referred to as a def-use pair. DFT selects test data with respect to various test adequacy,"['T Su', 'K Wu', 'W Miao', 'G Pu', 'J He', 'Y Chen']",2017,
A survey on regression test-case prioritization,"Regression testing is crucial for ensuring the quality of modern software systems, but can be extremely costly in practice. Test-case prioritization has been proposed to improve the effectiveness of regression testing by scheduling the execution order of test cases to detect","['Y Lou', 'J Chen', 'L Zhang', 'D Hao']",2019,
A survey on software testing education in brazil,"Software testing is one of the most important quality assurance activities. However, it is considered a challenge while teaching in undergraduate programs. One of the implied challenges is how to include this topic in computing undergraduate programs and in which","['LN Paschoal', 'SRS de Souza']",2018,Proceedings of the 17th Brazilian Symposium on Software Quality
A survey on unit testing practices and problems,"Unit testing is a common practice where developers write test cases together with regular code. Automation frameworks such as JUnit for Java have popularised this approach, allowing frequent and automatic execution of unit test suites. Despite the appraisals of unit","['E Daka', 'G Fraser']",2014,2014 IEEE 25th International Symposium on Software Reliability Engineering
A systematic literature review of how mutation testing supports quality assurance processes,"Mutation testing has been very actively investigated by researchers since the 1970s, and remarkable advances have been achieved in its concepts, theory, technology, and empirical evidence. While the most influential realisations have been summarised by existing","['Q Zhu', 'A Panichella', 'A Zaidman']",2018,"Software Testing, Verification and Reliability"
A systematic literature review of how mutation testing supports test activities,"Mutation testing has been very actively investigated by researchers since the 1970s and remarkable advances have been achieved in its concepts, theory, technology and empirical evidence. While the latest realisations have been summarised by existing literature review","['Q Zhu', 'A Panichella', 'A Zaidman']",2016,
A systematic literature review of techniques and metrics to reduce the cost of mutation testing,"Historically, researchers have proposed and applied many techniques to reduce the cost of mutation testing. It has become difficult to find all techniques and to understand the cost-benefit tradeoffs among them, which is critical to transitioning this technology to practice","['AV Pizzoleto', 'FC Ferrari', 'J Offutt', 'L Fernandes']",2019,
A systematic literature review of test case prioritization using genetic algorithms,Regression testing is the essential process of software maintenance and evolution phase of the software development life cycle for assuring the quality and reliability of updated software. Test case prioritization is the technique of regression testing to reduce the time and,"['A Bajaj', 'OP Sangwan']",2019,IEEE Access
A systematic literature review on modified condition and decision coverage,"One of the requirements of Modified Condition and Decision Coverage (MCDC) is that test cases should be selected to demonstrate that a condition can independently affect the outcome of a decision. However, it is known that test cases cannot be selected to satisfy this""","['TK Paul', 'MF Lau']",2014,Proceedings of the 29th Annual ACM Symposium on Applied Computing
A systematic mapping study on higher order mutation testing,"Context: Higher Order Mutants (HOMs) present some advantages concerning the First-Order Mutants (FOMs). HOMs can better simulate real and subtle faults, reduce the number of generated mutants and test cases, and so on. Objective: In order to characterize","['JA do Prado Lima', 'SR Vergilio']",2019,
A systematic review of agent-based test case generation for regression testing,There is an urgent need to create awareness about the potential benefits of using agents in software test case generation and to identify the need to develop agent-based regression testing techniques and approaches. It may help in reducing time and cost required for,"['PK Arora', 'R Bhatia']",2018,Arabian Journal for Science and Engineering
A systematic review of cost reduction techniques for mutation testing: preliminary results,"This paper reports on results from a systematic review that characterizes the state-of-the-art on cost reduction for mutation testing. It analyzes the evolution of research on this topic and its underlying goals and techniques, and identifies metrics used to measure cost reduction","['FC Ferrari', 'AV Pizzoleto', 'J Offutt']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
"A systematic review on test suite reduction: Approaches, experiment's quality evaluation, and guidelines","Regression testing aims at testing a system under test (SUT) in the presence of changes. As a SUT changes, the number of test cases increases to handle the modifications, and ultimately, it becomes practically impossible to execute all of them within limited testing","['SUR Khan', 'SP Lee', 'N Javaid', 'W Abdul']",2018,IEEE Access
A technique to test apis specified in natural language.,"Developers of widely used Application Programming Interfaces (APIs) implement and test APIs based on a document, which is commonly specified using natural language. How-ever, there is limited knowledge on whether API developers are able to systematically reveal i)",['FB Pontes'],2020,
A test suite reduction approach based on pairwise interaction of requirements,"Test suite reduction is one of the effective techniques to reduce the cost of regression testing. In particular, it tries to identify and remove redundant test cases according to a specific test coverage criterion. However, the excessive reduction in test cases may also","['X Chen', 'L Zhang', 'Q Gu', 'H Zhao', 'Z Wang']",2011,Proceedings of the 2011 ACM Symposium on Applied Computing - SAC '11
A test-driven approach to developing pointcut descriptors in aspectj,"Aspect-oriented programming (AOP) languages introduce new constructs that can lead to new types of faults, which must be targeted by testing techniques. In particular, AOP languages such as AspectJ use a pointcut descriptor (PCD) that provides a convenient way","['R Delamare', 'B Baudry', 'S Ghosh']",2009,2009 International Conference on Software Testing Verification and Validation
A test-suite diagnosability metric for spectrum-based fault localization approaches,"Current metrics for assessing the adequacy of a test-suite plainly focus on the number of components (be it lines, branches, paths) covered by the suite, but do not explicitly check how the tests actually exercise these components and whether they provide enough","['A Perez', 'R Abreu', 'A van Deursen']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)
A theoretical and empirical study of diversity-aware mutation adequacy criterion,"Diversity has been widely studied in software testing as a guidance towards effective sampling of test inputs in the vast space of possible program behaviors. However, diversity has received relatively little attention in mutation testing. The traditional mutation adequacy","['D Shin', 'S Yoo', 'DH Bae']",2017,IEEE Transactions on Software Engineering
A theoretical framework for understanding mutation-based testing methods,"In the field of mutation analysis, mutation is the systematic generation of mutated programs (ie, mutants) from an original program. The concept of mutation has been widely applied to various testing problems, including test set selection, fault localization, and program repair","['D Shin', 'DH Bae']",2016,"2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
A theory of predicate-complete test coverage and generation,"Consider a program with m statements and n predicates, where the predicates are derived from the conditional statements and assertions in a program. An observable state is an evaluation of the n predicates under some state at a program statement. The goal of",['T Ball'],2004,"Formal Methods for Components and Objects, Lecture Notes in Computer Science"
A unified test case prioritization approach,Test case prioritization techniques attempt to reorder test cases in a manner that increases the rate at which faults are detected during regression testing. Coverage-based test case prioritization techniques typically use one of two overall strategies: a total strategy or an,"['D Hao', 'L Zhang', 'L Zhang', 'G Rothermel']",2014,
A “strength of decision tree equivalence”-taxonomy and its impact on test suite reduction,"Being able to reduce test suites without having to execute them for assessing the effects on their fault detection capabilities is quite appealing. In this direction, we proposed recently to characterize test suites via inferred decision trees and use these for comparisons in a","['H Felbinger', 'I Pill', 'F Wotawa']",2017,"Testing Software and Systems, Lecture Notes in Computer Science"
AMOGA: A static-dynamic model generation strategy for mobile apps testing,"In the past few years, mobile devices have been increasingly replacing traditional computers, as their capabilities, such as CPU computation, memory, RAM size, and many more, are being enhanced almost to the level of conventional computers. These capabilities","['IA Salihu', 'R Ibrahim', 'BS Ahmed', 'KZ Zamli']",2019,IEEE Access
AOP-based testability improvement for component-based software,"High evolvability is the remarkable character of component-based software (CBS), and brings great pressure to the testing activity. Recently, aspect-oriented programming has been proposed as an effective technique for modulating separate concerns, and facilitating",['C Mao'],2007,31st Annual International Computer Software and Applications Conference - Vol. 2 - (COMPSAC 2007)
APTE: Automated pointcut testing for AspectJ programs,"Aspect-Oriented Programming (AOP) has been proposed as a methodology that provides new modularization of software systems by allowing encapsulation of cross-cutting concerns. AspectJ, an aspect-oriented programming language, provides two major","['P Anbalagan', 'T Xie']",2006,
AURORA: automatic robustness coverage analysis tool,"Code coverage is usually used as a measurement of testing quality and as adequacy criterion. Unfortunately, code coverage is very sensitive to modifications of the code structure, and, therefore, we can achieve the same degree of coverage with different testing","['A Gargantini', 'M Guarnieri']",2013,"2013 IEEE Sixth International Conference on Software Testing, Verification and Validation"
Abstract test case generation for behavioural testing of software product lines,"In Model Based Testing (MBT), test cases are generated automatically from a partial representation of expected behaviour of the System Under Test (SUT)(ie, the model). For most industrial systems, it is impossible to generate all the possible test cases from the","['X Devroey', 'G Perrouin', 'PY Schobbens']",2014,"Proceedings of the 18th International Software Product Line Conference on Companion Volume for Workshops, Demonstrations and Tools - SPLC '14"
Access control policy coverage assessment through monitoring,Testing access control policies relies on their execution on a security engine and the evaluation of the correct responses. Coverage measures can be adopted to know which parts of the policy are most exercised. This paper proposes an access control infrastructure,"['A Calabrò', 'F Lonetti', 'E Marchetti']",2017,"Lecture Notes in Computer Science, Computer Safety, Reliability, and Security"
"Achievements, open problems and challenges for search based software testing","Search Based Software Testing (SBST) formulates testing as an optimisation problem, which can be attacked using computational search techniques from the field of Search Based Software Engineering (SBSE). We present an analysis of the SBST research agenda","['M Harman', 'Y Jia', 'Y Zhang']",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)"
Achieving scalable mutation-based generation of whole test suites,"Without complete formal specification, automatically generated software tests need to be manually checked in order to detect faults. This makes it desirable to produce the strongest possible test set while keeping the number of tests as small as possible. As commonly","['G Fraser', 'A Arcuri']",2015,Empirical Software Engineering
Adapting automated test generation to GUI testing of industry applications,"Context Automated test generation promises to improve the effectiveness of software testing and to reduce the involved manual effort. While automated test generation has been successfully applied for code-level API testing, it has not found widespread adoption in","['R Ramler', 'G Buchgeher', 'C Klammer']",2018,Information and Software Technology
Adapting unit tests by generating combinatorial test data,Conventional unit tests are still mainly handcrafted. Generalizing conventional unit tests to parameterized unit tests supports automatic test data generation. Methods that were introduced to instantiate parameterized unit tests with concrete values as test data are based,"['H Felbinger', 'F Wotawa', 'M Nica']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Adaptive coverage and operational profile-based testing for reliability improvement,"We introduce covrel, an adaptive software testing approach based on the combined use of operational profile and coverage spectrum, with the ultimate goal of improving the delivered reliability of the program under test. Operational profile-based testing is a black-box","['A Bertolino', 'B Miranda', 'R Pietrantuono']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)
Adaptive random testing based on flexible partitioning,"Adaptive random testing (ART) achieves better failure-detection effectiveness than random testing due to its even spreading of test cases. ART by random partitioning (RP-ART) is a lightweight method, but its advantage over random testing is relatively low. Although iterative","['C Mao', 'X Zhan', 'J Chen', 'J Chen', 'R Huang']",2020,
"Adaptive test case allocation, selection and generation using coverage spectrum and operational profile","We present an adaptive software testing strategy for test case allocation, selection and generation, based on the combined use of operational profile and coverage spectrum, aimed at achieving high delivered reliability of the program under test. Operational profile","['A Bertolino', 'B Miranda', 'R Pietrantuono']",2019,IEEE Transactions on Software Engineering
Adaptive test-case prioritization guided by output inspection,"Test-case prioritization is to schedule the execution order of test cases so as to maximize some objective (eg, revealing faults early). The existing test-case prioritization approaches separate the process of test-case prioritization and the process of test-case execution by","['D Hao', 'X Zhao', 'L Zhang']",2013,2013 IEEE 37th Annual Computer Software and Applications Conference
Adequate system-level testing of distributed systems,"Software testing is about risk management. Typically, engineers use test adequacy criteria to balance the cost and efficacy of the testing activity. Test adequacy criteria are rules that provide an objective stopping condition on test input creation by defining a finite set of test",['MJ Rutherford'],2006,
Advances in combinatorial testing,"Since their introduction into software testing in the mid-1980s, combinatorial methods for test design gathered popularity as a testing best practice and as a prominent software testing research area. This chapter reviews recent advances in combinatorial testing, with special",['R Tzoref-Brill'],2019,Advances in Computers
Advances in noise‐based testing of concurrent software,"Testing of concurrent software written in programming languages like Java and C/C++ is a highly challenging task owing to the many possible interactions among threads. A simple, cheap, and effective approach that addresses this challenge is testing with noise injection","['J Fiedor', 'V Hrubá', 'B Křena', 'Z Letko']",2015,"Software Testing, Verification and Reliability"
Advances in testing javascript-based web applications,"JavaScript is a flexible and expressive prototype-based scripting language that is used by developers to create interactive web applications. The language is interpreted, dynamic, weakly typed, and has first-class functions. It also interacts extensively with other web",['A Mesbah'],2015,Advances in Computers
Advances in the characterization of cognitive support for unit testing: The bug-hunting game and the visualization arsenal,"In the previous edition of ISSRE we used a straightforward hunting metaphor to call the attention of the research community to the importance of considering human aspects in software testing-in particular, to research challenges that affect practitioners in the industry","['MP Prado', 'AMR Vincenzi']",2016,2016 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
Advancing energy testing of mobile applications,"The rising popularity of mobile apps deployed on battery-constrained devices has motivated the need for effective energy-aware testing techniques. However, currently there is a lack of test generation tools for exercising the energy properties of apps. Automated test generation","['R Jabbarvand', 'S Malek']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C)
Alleviating patch overfitting with automatic test generation: a study of feasibility and effectiveness for the Nopol repair system,"Among the many different kinds of program repair techniques, one widely studied family of techniques is called test suite based repair. However, test suites are in essence input-output specifications and are thus typically inadequate for completely specifying the expected","['Z Yu', 'M Martinez', 'B Danglot', 'T Durieux']",2019,Empirical Software Engineering
An analysis of Mutation testing and Code coverage during progress of projects,"In order to deliver high quality software projects, a developing team probably needs a well-developed test suite. There are several methods that aim to evaluate test suites in some way, such as Code coverage and Mutation testing. Code coverage describes the degree of",['O Alfsson'],2017,
An analysis of the effectiveness of different coverage criteria for testing relational database schema integrity constraints,"Despite industry advice to the contrary, there has been little work that has sought to test that a relational database's schema has correctly specified integrity constraints. These critically important constraints ensure the coherence of data in a database, defending it from","['P McMinn', 'CJ Wright', 'GM Kapfhammer']",2015,
An approach and tool for measurement of state variable based data-flow test coverage for aspect-oriented programs,"Context Data-flow testing approaches have been used for procedural and object-oriented programs, and shown to be effective in detecting faults. However, few such approaches have been evaluated for aspect-oriented programs. In such programs, data-flow interactions","['F Wedyan', 'S Ghosh', 'LR Vijayasarathy']",2015,Information and Software Technology
An approach for clustering test data,"The existing test techniques and criteria are considered complementary because they can reveal different kinds of faults and test specific aspects of the program. The functional criteria, such as Category Partition, are difficult to be automated, and are usually manually","['AR Lenz', 'A Pozo', 'SR Vergilio']",2011,2011 12th Latin American Test Workshop (LATW)
An approach for testing pointcut descriptors in aspectj,Aspect‐oriented programming (AOP) promises better software quality through enhanced modularity. Crosscutting concerns are encapsulated in separate units called aspects and are introduced at specific points in the base program at compile time or runtime. However,"['R Delamare', 'B Baudry', 'S Ghosh']",2011,
An approach for the generation of higher order mutants using genetic algorithms,"Mutation testing is a structural testing technique in which the effectiveness of a test suite is measured by the suite ability to detect seeded faults. One fault is seeded into a copy of the program, called mutant, leading to a large number of mutants with a high cost of compiling","['A Abuljadayel', 'F Wedyan']",2018,International Journal of Intelligent Systems and Applications
An assessment of operational coverage as both an adequacy and a selection criterion for operational profile based testing,"While the relation between code coverage measures and fault detection is actively studied, only few works have investigated the correlation between measures of coverage and of reliability. In this work, we introduce a novel approach to measuring code coverage, called","['B Miranda', 'A Bertolino']",2018,Software Quality Journal
An automated approach to estimating code coverage measures via execution logs,"Software testing is a widely used technique to ensure the quality of software systems. Code coverage measures are commonly used to evaluate and improve the existing test suites. Based on our industrial and open source studies, existing state-of-the-art code coverage","['B Chen', 'J Song', 'P Xu', 'X Hu', 'ZM Jiang']",2018,Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering
An automated framework for continuous development and testing of access control systems,"Automated testing in DevOps represents a key factor for providing fast release of new software features assuring quality delivery. In this paper, we introduce DOXAT, an automated framework for continuous development and testing of access control","['S Daoudagh', 'F Lonetti']",2020,Journal of Software: Evolution and Process
An automated system for interactively learning software testing,"Testing is an important, time-consuming, and often difficult part of the software development process. It is therefore critical to introduce testing early in the computer science curriculum, and to provide students with frequent opportunities for practice and feedback. This paper","['R Smith', 'T Tang', 'J Warren', 'S Rixner']",2017,Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education
An efficient regression testing approach for PHP Web applications using test selection and reusable constraints,Web applications undergo frequent changes. These changes can be due to the addition of new features or the modification of existing features to support customer requests or to patch faults in the system. Given that Web applications have a large surface area subject to attack,"['R Eda', 'H Do']",2019,Software Quality Journal
An empirical analysis of blind tests,"Modern software engineers automate as many tests as possible. Test automation allows tests to be run hundreds or thousands of times: hourly, daily, and sometimes continuously. This saves time and money, ensures reproducibility, and ultimately leads to software that is","['K Baral', 'J Offutt']",2020,"2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)"
An empirical comparison of automated generation and classification techniques for object-oriented unit testing,Testing involves two major activities: generating test inputs and determining whether they reveal faults. Automated test generation techniques include random generation and symbolic execution. Automated test classification techniques include ones based on,"[""M d'Amorim"", 'C Pacheco', 'T Xie']",2006,21st IEEE/ACM International Conference on Automated Software Engineering (ASE'06)
An empirical comparison of fixed-strength and mixed-strength for interaction coverage based prioritization,"Test case prioritization (TCP) plays an important role in identifying, characterizing, diagnosing, and correcting faults quickly. The TCP has been widely used to order test cases of different types, including model inputs (also called abstract test cases). Model inputs are","['R Huang', 'Q Zhang', 'TY Chen', 'J Hamlyn-Harris']",2018,
An empirical comparison of mutant selection approaches,"Mutation analysis is a well-known method for measuring the quality of test suites. However, it is computationally intensive compared to other measures, which makes it hard to use in practice. Choosing a smaller subset of mutations to run is a simple approach that can","['R Gopinath', 'A Alipour', 'I Ahmed', 'C Jensen', 'A Groce']",2015,
An empirical comparison of mutant selection assessment metrics,"Mutation testing is expensive due to the large number of mutants, a problem typically tackled using selective techniques, thereby raising the fundamental question of how to evaluate the selection process. Existing mutant selection approaches rely on one of two types of metrics","['JM Zhang', 'L Zhang', 'D Hao', 'L Zhang']",2019,"2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
An empirical comparison of test suite reduction techniques for user-session-based testing of web applications,"Automated cost-effective test strategies are needed to provide reliable, secure, and usable Web applications. As a software maintainer updates an application, test cases must accurately reflect usage to expose faults that users are most likely to encounter. User","['S Sprenkle', 'S Sampath', 'E Gibson']",2005,21st IEEE International Conference on Software Maintenance (ICSM'05)
An empirical evaluation of the first and second order mutation testing strategies,Various mutation approximation techniques have been proposed in the literature in order to reduce the expenses of mutation. This paper presents results from an empirical study conducted for first and second order mutation testing strategies. Its scope is to evaluate the,"['M Papadakis', 'N Malevris']",2010,"2010 Third International Conference on Software Testing, Verification, and Validation Workshops"
An empirical study of test suites in practice against test suites generated by dynamic symbolic execution,"Software testing performs a vital function in the software development lifecycle of quality assurance. Due to the time-intensive and often prohibitive costs of software testing, research efforts attempt to identify and improve approaches to automated test-case generation",['P Tanofsky'],2014,
An empirical study on mutation testing of WS-BPEL programs,"Nowadays, applications are increasingly deployed as Web services in the globally distributed cloud computing environment. Multiple services are normally composed to fulfill complex functionalities. Business Process Execution Language for Web Services (WS","['C Sun', 'L Pan', 'Q Wang', 'H Liu', 'X Zhang']",2017,The Computer Journal
"An empirical study on mutation, statement and branch coverage fault revelation that avoids the unreliable clean program assumption","Many studies suggest using coverage concepts, such as branch coverage, as the starting point of testing, while others as the most prominent test quality indicator. Yet the relationship between coverage and fault-revelation remains unknown, yielding uncertainty and","['TT Chekam', 'M Papadakis', 'Y Le Traon']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)
An empirical study on the adequacy of testing in open source projects,"During software maintenance, testing is a crucial activity to ensure the quality of code as it evolves over time. With the increasing size and complexity of software, adequate software testing has become increasingly important. Code coverage is an important metric to gauge","['PS Kochhar', 'F Thung', 'D Lo']",2014,2014 21st Asia-Pacific Software Engineering Conference
An empirical study on the application of mutation testing for a safety-critical industrial software system,"Background: Testing is an essential activity in safety-critical software development, following high standards in terms of code coverage. Mutation testing allows assessing the effectiveness of testing and helps to further improve test cases. However, mutation testing is","['R Ramler', 'T Wetzlmaier', 'C Klammer']",2017,Proceedings of the Symposium on Applied Computing
An empirical study on the effects of code visibility on program testability,"Software testability represents the degree of ease with which a software artifact supports testing. When it is easy to detect defects in a program through testing, the program has high testability; otherwise, the testability of the program is low. As an abstract property of","['L Ma', 'C Zhang', 'B Yu', 'H Sato']",2017,Software Quality Journal
An empirical study on the scalability of selective mutation testing,"Software testing plays an important role in ensuring software quality by running a program with test suites. Mutation testing is designed to evaluate whether a test suite is adequate in detecting faults. Due to the expensive cost of mutation testing, selective mutation testing was","['J Zhang', 'M Zhu', 'D Hao', 'L Zhang']",2014,2014 IEEE 25th International Symposium on Software Reliability Engineering
An empirical study on the use of defect prediction for test case prioritization,"Test case prioritization has been extensively re-searched as a means for reducing the time taken to discover regressions in software. While many different strategies have been developed and evaluated, prior experiments have shown them to not be effective at","['D Paterson', 'J Campos', 'R Abreu']",2019,"2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)"
An ensemble‐based predictive mutation testing approach that considers impact of unreached mutants,"Predictive mutation testing (PMT) is a technique to predict whether a mutant is killed, using machine learning approaches. Researchers have proposed various methods for PMT over the years. However, the impact of unreached mutants on PMT is not fully addressed. A",['A Aghamohammadi'],2021,"Software Testing, Verification and Reliability"
An evaluation of Monte Carlo-based hyper-heuristic for interaction testing of industrial embedded software applications,"Hyper-heuristic is a new methodology for the adaptive hybridization of meta-heuristic algorithms to derive a general algorithm for solving optimization problems. This work focuses on the selection type of hyper-heuristic, called the exponential Monte Carlo with","['BS Ahmed', 'E Enoiu', 'W Afzal', 'KZ Zamli']",2020,Soft Computing
An evaluation of internal program metrics as predictors of mutation operator score,"Context: Mutation testing is effective in producing high quality test sets. On the downside, it is expensive due to factors like the large number of mutants and the need for manual analysis tasks. Over time, researchers devised several ways of reducing its costs and achieved","['LD Dallilo', 'AV Pizzoleto', 'FC Ferrari']",2019,Proceedings of the IV Brazilian Symposium on Systematic and Automated Software Testing  - SAST 2019
An experience report on applying software testing academic results in industry: we need usable automated test generation,"What is the impact of software engineering research on current practices in industry? In this paper, I report on my direct experience as a PhD/post-doc working in software engineering research projects, and then spending the following five years as an engineer in two different",['A Arcuri'],2018,
An experimental assessment of module documentation-based testing,"Context Testing a module that has memory using the black-box approach has been found to be expensive and relatively ineffective. Instead, testing without knowledge of the specifications (white-box approach) may not be effective in showing whether a program has","['S Baharom', 'Z Shukur']",2011,Information and Software Technology
"An extensible, regular-expression-based tool for multi-language mutant generation","Mutation testing is widely used in research (even if not in practice). Mutation testing tools usually target only one programming language and rely on parsing a program to generate mutants, or operate not at the source level but on compiled bytecode. Unfortunately","['A Groce', 'J Holmes', 'D Marinov', 'A Shi']",2018,Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings
An extensive study on cross-project predictive mutation testing,"Mutation testing is a powerful technique for evaluating the quality of test suite which plays a key role in ensuring software quality. The concept of mutation testing has also been widely used in other software engineering studies, eg, test generation, fault localization, and","['D Mao', 'L Chen', 'L Zhang']",2019,"2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)"
An improved crow search algorithm for test data generation using search-based mutation testing,Automation of test data generation is of prime importance in software testing because of the high cost and time incurred in manual testing. This paper proposes an Improved Crow Search Algorithm (ICSA) to automate the generation of test suites using the concept of,"['N Jatana', 'B Suri']",2020,Neural Processing Letters
An improved history-based test prioritization technique technique using code coverage,"Prioritization of test cases provides a way to run test cases with the highest priority earliest. Numerous empirical studies have shown that prioritization can improve a test suite's rate of fault detection. Software testers prioritize test cases, to reduce the cost of regression testing","['A Gupta', 'N Mishra', 'A Tripathi', 'M Vardhan']",2015,"Lecture Notes in Electrical Engineering, Advanced Computer and Communication Engineering Technology"
"An industrial application of mutation testing: Lessons, challenges, and research directions","Mutation analysis evaluates a testing or debugging technique by measuring how well it detects mutants, which are systematically seeded, artificial faults. Mutation analysis is inherently expensive due to the large number of mutants it generates and due to the fact that","['G Petrovic', 'M Ivankovic', 'B Kurtz']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
An industrial evaluation of unit test generation: Finding real faults in a financial application,"Automated unit test generation has been extensively studied in the literature in recent years. Previous studies on open source systems have shown that test generation tools are quite effective at detecting faults, but how effective and applicable are they in an industrial","['MM Almasi', 'H Hemmati', 'G Fraser']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP)
An integrated approach to software testing and learning,Software testing–the most commonly used approach for findings bugs–and machine learning–the most popular approach for extracting information from data–are two classic yet disparate approaches that serve largely different purposes and employ fairly unique,['M Zhang'],2019,
An integration test coverage metric for Java programs,"A large number of test coverage metrics have been proposed in the context of unit and system testing of object-oriented programs. However, structural coverage metrics for integration testing have scarcely been reported. On the other hand, interface bugs are","['D Mukherjee', 'R Mall']",2019,International Journal of System Assurance Engineering and Management
An intuitive approach to determine test adequacy in safety-critical software,"Safety-critical software must adhere to stringent quality standards and is expected to be thoroughly tested. However, exhaustive testing of software is usually impractical. The two main challenges faced by a software testing team are generation of effective test cases and","['PA Babu', 'CS Kumar', 'N Murali']",2012,ACM SIGSOFT Software Engineering Notes
An investigation of classification-based algorithms for modified condition/decision coverage criteria,"During software development, white-box testing is used to examine the internal design of the program. One of the most important aspects of white-box testing is the code coverage. Among various test coverage measurements, the Modified Condition/Decision Coverage","['JR Chang', 'CY Huang', 'PH Li']",2012,2012 IEEE Sixth International Conference on Software Security and Reliability Companion
An investigation of compression techniques to speed up mutation testing,"Mutation testing is widely considered as a high-end test coverage criterion due to the vast number of mutants it generates. Although many efforts have been made to reduce the computational cost of mutation testing, in practice, the scalability issue remains. In this","['Q Zhu', 'A Panichella', 'A Zaidman']",2018,"2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)"
An iterative metamorphic testing technique for web services and case studies,"Metamorphic testing (MT) is an innovative approach to alleviating the oracle problem in software testing, which uses metamorphic relations of the program under test, instead of the test oracles, to verify its outputs. To alleviate the oracle problem of testing web services, we","['C Sun', 'A Fu', 'Y Liu', 'Q Wen', 'Z Wang']",2020,International Journal of Web and Grid Services
An objective comparison of the cost effectiveness of three testing methods,"Branch testing is a well established method for exercising software. JJ-path testing, whilst employed by some practitioners, is less popular, and the testing of JJ-pairs finds few adherents. In this paper an objective, practical study of the cost-effectiveness of these three","['DF Yates', 'N Malevris']",2007,Information and Software Technology
An optimal mutation execution strategy for cost reduction of mutation-based fault localization,"Identifying faulty program entities has been recognized as one of the most expensive, tedious and time-consuming processes in software debugging activity. Fault localization techniques are designed to assist developers in locating faults by giving a ranking of the","['Y Liu', 'Z Li', 'R Zhao', 'P Gong']",2018,Information Sciences
"An “objects first, tests second” approach for software engineering education","Since unit testing is a skill required of professional software developers, lecturers have to develop this skill in their software engineering students. Therefore, we introduce the approach of “objects first, tests second”, which incorporates unit testing into introductory","['V Thurner', 'A Böttcher']",2015,
Analysing and comparing the effectiveness of mutation testing tools: A manual study,"Mutation testing is considered as one of the most powerful testing methods. It operates by asking testers to design tests that reveal a set of mutants, which are purpose-made injected defects. Evidently, the strength of the method strongly depends on the used mutants","['M Kintis', 'M Papadakis', 'A Papadopoulos']",2016,2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation (SCAM)
Analysing the combination of cost reduction techniques in Android mutation testing,"When applied to mobile software, mutation testing is particularly costly due to the deployment of the app under test onto the device: if one deployment is made for each generated mutant, the execution time becomes unapproachable. This paper analyses how",['M Polo‐Usaola'],2021,"Software Testing, Verification and Reliability"
Analysis and validation of test case redundancy in testing suites of Java libraries,"When studying the test suites from some Java libraries, it is possible to observe a certain redundancy in the execution paths that some of the test cases take, whose reason is not known. In order to understand this issue, we establish two hypotheses: one that this",['M Wolfart'],2021,
Analysis of test coverage metrics in a business critical setup,Test coverage is an important parameter of analyzing how well the product is being tested in any domain within the IT industry. Unit testing is one of the important processes that have gained even more popularity with the rise in Test driven development (TDD) culture. This,['S Mishra'],2017,
Analysis of test suite reduction with enhanced tie-breaking techniques,"Test suite minimization techniques try to remove redundant test cases of a test suite. However, reducing the size of a test suite might reduce its ability to reveal faults. In this paper, we present a novel approach for test suite reduction that uses an additional testing","['JW Lin', 'CY Huang']",2009,
Analyzing automatic test generation tools for refactoring validation,"Refactoring edits are very common during agile development. Due to their inherent complexity, refactorings are know to be error prone. In this sense, refactoring edits require validation to check whether no behavior change was introduced. A valid way for validating","['IPSC Silva', 'ELG Alves']",2017,2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
Analyzing the validity of selective mutation with dominator mutants,Various forms of selective mutation testing have long been accepted as valid approximations to full mutation testing. This paper presents counterevidence to traditional selective mutation. The recent development of dominator mutants and minimal mutation,"['B Kurtz', 'P Ammann', 'J Offutt', 'ME Delamaro']",2016,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering
Angels and monsters: An empirical investigation of potential test effectiveness and efficiency improvement from strongly subsuming higher order mutation,"We study the simultaneous test effectiveness and efficiency improvement achievable by Strongly Subsuming Higher Order Mutants (SSHOMs), constructed from 15,792 first order mutants in four Java programs. Using SSHOMs in place of the first order mutants they","['M Harman', 'Y Jia', 'P Reales Mateo', 'M Polo']",2014,
Ante up: A framework to strengthen student-based testing of assignments,We introduce the Ante framework to automate the evaluation of student tests in such a way that students will see them as an integral part of the software development process. Our unique approach is to evaluate student testing before students are allowed to submit,['MK Bradshaw'],2015,
Applying automated test case generation in industry: a retrospective,"Automated test case generation promises to reduce the high effort of manually developing and maintaining test cases, to improve the effectiveness of testing, and to speed-up testing cycles. Research on generating test cases has advanced over the past decades and today a","['R Ramler', 'C Klammer']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Applying automated testing in an existing client-server game: A pursuit for fault localization in Quake 3,"This paper addresses the question formulation “Is it possible to implement automated testing in an existing client-server game in order to pinpoint faults and achieve credibility to tests?” The gaming industry's goal, in most cases, is to release games that appeal to both their","['H Kljajic', 'O Karlsson']",2015,
Applying concept analysis to user-session-based testing of web applications,"The continuous use of the Web for daily operations by businesses, consumers, and the government has created a great demand for reliable Web applications. One promising approach to testing the functionality of Web applications leverages the user-session data","['S Sampath', 'S Sprenkle', 'E Gibson']",2007,IEEE Transactions on Software Engineering
Applying mutation analysis on kernel test suites: An experience report,"Mutation analysis is an established technique for measuring the completeness and quality of a test suite. Despite four decades of research on this technique, its use in large systems is still rare, in part due to computational requirements and high numbers of false positives. We","['I Ahmed', 'C Jensen', 'A Groce']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Applying mutation testing for assessing test suites quality at model level,Models are commonly used in software testing to select test suites. Application of mutation testing at a model level can contribute to reliable and early assessment of the quality of the test suites. It can also support selection of test suites achieving high fault detection rates. The,['J Strug'],2016,Proceedings of the 2016 Federated Conference on Computer Science and Information Systems
Applying selective mutation strategies to the AsmetaL language,"state machines (ASMs) have been introduced as a computation model that is more powerful and more universal than standard computation models. The early validation of ASM models would help reduce the cost and risk of having defects propagate, through","['O Alkrarha', 'J Hassine']",2017,IET Software
Approximate transformations as mutation operators,"Mutation testing is a well-established approach for evaluating test-suite quality by modifying code using syntax-changing (and potentially semantics-changing) transformations, called mutation operators. This paper proposes approximate transformations as new mutation","['F Hariri', 'A Shi', 'O Legunsen', 'M Gligoric']",2018,"2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)"
Arbitcheck: A highly automated property-based testing tool for java,"Lightweight property-based testing tools are becoming popular these days. With property-based testing, developers can test properties of the system under test against large varieties of randomly generated inputs without writing test cases. Despite the advantages of property","['K Yatoh', 'K Sakamoto', 'F Ishikawa']",2014,"2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops"
Are concurrency coverage metrics effective for testing: a comprehensive empirical investigation,"Testing multithreaded programs is inherently challenging, as programs can exhibit numerous thread interactions. To help engineers test these programs cost‐effectively, researchers have proposed concurrency coverage metrics. These metrics are intended to be","['S Hong', 'M Staats', 'J Ahn', 'M Kim']",2015,"Software Testing, Verification and Reliability"
Are mutants a valid substitute for real faults in software testing?,"A good test suite is one that detects real faults. Because the set of faults in a program is usually unknowable, this definition is not useful to practitioners who are creating test suites, nor to researchers who are creating and evaluating tools that generate test","['R Just', 'D Jalali', 'L Inozemtseva', 'MD Ernst']",2014,Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering
"Are mutants really natural? a study on how"" naturalness"" helps mutant selection","Background: Code is repetitive and predictable in a way that is similar to the natural language. This means that code is"" natural"" and this"" naturalness"" can be captured by natural language modelling techniques. Such models promise to capture the program","['M Jimenez', 'TT Checkam', 'M Cordy']",2018,
Are mutation scores correlated with real fault detection? a large scale empirical study on the relationship between mutants and real faults,"Empirical validation of software testing studies is increasingly relying on mutants. This practice is motivated by the strong correlation between mutant scores and real fault detection that is reported in the literature. In contrast, our study shows that correlations are","['M Papadakis', 'D Shin', 'S Yoo']",2018,
Are my unit tests in the right package?,"The software development industry has adopted written and de facto standards for creating effective and maintainable unit tests. Unfortunately, like any other source code artifact, they are often written without conforming to these guidelines, or they may evolve into such a","['G Balogh', 'T Gergely', 'Á Beszédes']",2016,2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation (SCAM)
Are unit and integration test definitions still valid for modern Java projects? An empirical study on open-source projects,"Context Unit and integration testing are popular testing techniques. However, while the software development context evolved over time, the definitions remained unchanged. There is no empirical evidence, if these commonly used definitions still fit to modern software","['F Trautsch', 'S Herbold', 'J Grabowski']",2020,Journal of Systems and Software
Are we there yet? How redundant and equivalent mutants affect determination of test completeness,Mutation score has long been used in research as a metric to measure the effectiveness of testing strategies. This paper presents evidence that mutation score lacks the desired accuracy to determine the completeness of a test suite due to noise introduced by the,"['B Kurtz', 'P Ammann', 'J Offutt']",2016,"2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Are we there yet? determining the adequacy of formalized requirements and test suites,"Structural coverage metrics have traditionally categorized code as either covered or uncovered. Recent work presents a stronger notion of coverage, checked coverage, which counts only statements whose execution contributes to an outcome checked by an oracle","['A Murugesan', 'MW Whalen', 'N Rungta']",2015,"Lecture Notes in Computer Science, NASA Formal Methods"
Aspect-oriented program testing: An annotated bibliography,,"['AAA Ghani', 'RM Parizi']",2013,Journal of Software
Assertions are strongly correlated with test suite effectiveness,"Code coverage is a popular test adequacy criterion in practice. Code coverage, however, remains controversial as there is a lack of coherent empirical evidence for its relation with test suite effectiveness. More recently, test suite size has been shown to be highly correlated","['Y Zhang', 'A Mesbah']",2015,Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering
Assessing and improving the mutation testing practice of PIT,"Mutation testing is used extensively to support the experimentation of software engineering studies. Its application to real-world projects is possible thanks to modern tools that automate the whole mutation analysis process. However, popular mutation testing tools use","['T Laurent', 'A Ventresque', 'M Papadakis']",2016,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Assessing and improving the mutation testing practice of pit,"Mutation testing is extensively used in software testing studies. However, popular mutation testing tools use a restrictive set of mutants which does not conform to the community standards and mutation testing literature. This can be problematic since the effectiveness of","['T Laurent', 'M Papadakis', 'M Kintis']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Assessing android test data generation tools via mutation testing,"A growing number of test data generation techniques and tools for Android applications (apps) has been proposed in the last years. As a consequence, a demand for evaluations comparing such tools has emerged. However, we find few studies only","['HN da Silva', 'PR Farah', 'WDF Mendonça']",2019,Proceedings of the IV Brazilian Symposium on Systematic and Automated Software Testing  - SAST 2019
Assessing exception handling testing practices in open-source libraries,"Modern programming languages (eg, Java and C#) provide features to separate error-handling code from regular code, seeking to enhance software comprehensibility and maintainability. Nevertheless, the way exception handling (EH) code is structured in such","['LP Lima', 'LS Rocha', 'CIM Bezerra', 'M Paixao']",2021,Empirical Software Engineering
Assessing incremental testing practices and their impact on project outcomes,"Software testing is an important aspect of the development process, one that has proven to be a challenge to formally introduce into the typical undergraduate CS curriculum. Unfortunately, existing assessment of testing in student software projects tends to focus on","['AM Kazerouni', 'CA Shaffer', 'SH Edwards']",2019,Proceedings of the 50th ACM Technical Symposium on Computer Science Education
Assessing test artifact quality—A tertiary study,"Context: Modern software development increasingly relies on software testing for an ever more frequent delivery of high quality software. This puts high demands on the quality of the central artifacts in software testing, test suites and test cases. Objective: We aim to develop a","['HKV Tran', 'M Unterkalmsteiner', 'J Börstler']",2021,Information and Software Technology
Assessing test case prioritization on real faults and mutants,"Test Case Prioritization (TCP) is an important component of regression testing, allowing for earlier detection of faults or helping to reduce testing time and cost. While several TCP approaches exist in the research literature, a growing number of studies have evaluated","['Q Luo', 'K Moran', 'D Poshyvanyk']",2018,2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)
Assessing test quality,"When developing tests, one is interested in creating tests of good quality that thoroughly test the program. This work shows how to assess test quality through mutation testing with impact metrics, and through checked coverage. Although there a different aspects that",['D Schuler'],2011,
Assessing the applicability of a combinatorial testing tool within an industrial environment,This paper describes a case study executed to evaluate a combinatorial test design approach within the industrial setting of IBM Research. An existing combinatorial test suite was compared against a prioritized combinatorial test suite that was generated with the,"['PM Kruse', 'O Shehory', 'D Citron']",2014,
"Assessing the test suite of a large system based on code coverage, efficiency and uniqueness",Regression test suites of evolving software systems play a key role in maintaining software quality throughout continuous changes. They need to be effective (in terms of detecting faults and helping their localization) and efficient (optimally sized and without redundancy),"['L Vidács', 'F Horváth', 'D Tengeri']",2016,"2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)"
Assessment of C++ object‐oriented mutation operators: A selective mutation approach,"Mutation testing is an effective but costly testing technique. Several studies have observed that some mutants can be redundant and therefore removed without affecting its effectiveness. Similarly, some mutants may be more effective than others in guiding the","['P Delgado‐Pérez', 'S Segura']",2017,"Software Testing, Verification and Reliability"
Assessment of class mutation operators for C++ with the MuCPP mutation system,"Context: Mutation testing has been mainly analyzed regarding traditional mutation operators involving structured programming constructs common in mainstream languages, but mutations at the class level have not been assessed to the same extent. This fact is","['P Delgado-Pérez', 'I Medina-Bulo']",2017,
Assurances in software testing: A roadmap,"As researchers, we already understand how to make testing more effective and efficient at finding bugs. However, as fuzzing (ie, automated testing) becomes more widely adopted in practice, practitioners are asking: Which assurances does a fuzzing campaign provide that",['M Böhme'],2019,2019 IEEE/ACM 41st International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)
Auto test generator: a framework to generate test cases from requirements in natural language,"Testing is essential in the software engineering development process. However, it is also one of the most costly tasks. Thus, test automation has become the goal of many researches. Since design, implementation, and execution phases depend substantially on the system",['TML PINA'],2019,
Automata language equivalence vs. simulations for model-based mutant equivalence: An empirical evaluation,"Mutation analysis is a popular test assessment method. It relies on the mutation score, which indicates how many mutants are revealed by a test suite. Yet, there are mutants whose behaviour is equivalent to the original system, wasting analysis resources and preventing","['X Devroey', 'G Perrouin', 'M Papadakis']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Automated Test Case Implantation to Test Untested Configurations: A Cost-Effective Search-Based Approach,"Context: Modern large-scale software systems are highly configurable, and thus require a large number of test cases to be implemented and revised for testing a variety of system configurations. This makes testing highly configurable systems very expensive and time","['D Pradhan', 'S Wang', 'T Yue', 'S Ali', 'M Liaaen']",NA,
"Automated assessment of programming assignments: visual feedback, assignment mobility, and assessment of students' testing skills",The main objective of this thesis is to improve the automated assessment of programming assignments from the perspective of assessment tool developers. We have developed visual feedback on functionality of students' programs and explored methods to control the level of,['P Ihantola'],2011,
Automated assessment of students' testing skills for improving correctness of their code,"Although software testing is included as a regular part of many programming courses, current assessment techniques used in automated grading tools for evaluating student-written software tests are imperfect. Code coverage measures are typically used in practice",['Z Shams'],2013,"Proceedings of the 2013 companion publication for conference on Systems, programming, & applications: software for humanity - SPLASH '13"
Automated code-based test selection for software product line regression testing,Regression testing for software product lines (SPLs) is challenging and can be expensive because it must ensure that all the products of a product family are correct whenever changes are made. SPL regression testing can be made efficient through a test case,"['P Jung', 'S Kang', 'J Lee']",2019,2018 25th Asia-Pacific Software Engineering Conference (APSEC)
Automated coverage-based testing of XACML policies,"While the standard language XACML is very expressive for specifying fine-grained access control policies, defects can get into XACML policies for various reasons, such as misunderstanding of access control requirements, omissions, and coding errors. These","['D Xu', 'R Shrestha', 'N Shen']",2018,Proceedings of the 23nd ACM on Symposium on Access Control Models and Technologies
Automated generation of pointcut mutants for testing pointcuts in AspectJ programs,"Aspect-oriented programming (AOP) provides new modularization of software systems by encapsulating cross-cutting concerns. AspectJ, an AOP language, uses abstractions such as pointcuts, advice, and aspects to achieve AOPpsilas primary functionality. Faults in pointcuts","['P Anbalagan', 'T Xie']",2008,2008 19th International Symposium on Software Reliability Engineering (ISSRE)
Automated isolation for white-box test generation,"Context: White-box test generation is a technique used for automatically selecting test inputs using only the code under test. However, such techniques encounter challenges when applying them to complex programs. One of the challenges is handling invocations to","['D Honfi', 'Z Micskei']",2020,Information and Software Technology
"Automated oracle creation support, or: How I learned to stop worrying about fault propagation and love mutation testing","In testing, the test oracle is the artifact that determines whether an application under test executes correctly. The choice of test oracle can significantly impact the effectiveness of the testing process. However, despite the prevalence of tools that support the selection of test","['M Staats', 'G Gay', 'MPE Heimdahl']",2012,2012 34th International Conference on Software Engineering (ICSE)
Automated regression unit test generation for program merges,"Merging other branches into the current working branch is common in collaborative software development. However, developers still heavily rely on the textual merge tools to handle the complicated merge tasks. The latent semantic merge conflicts may fail to be detected and","['T Ji', 'L Chen', 'X Mao', 'X Yi', 'J Jiang']",2020,
Automated search for good coverage criteria: moving from code coverage to fault coverage through search-based software engineering,"We propose to use Search-Based Software Engineering to automatically evolve coverage criteria that are well correlated with fault revelation, through the use of existing fault databases. We explain how problems of bloat and overfitting can be ameliorated in our","['P McMinn', 'M Harman', 'G Fraser']",2016,
Automated steering of model-based test oracles to admit real program behaviors,"The test oracle-a judge of the correctness of the system under test (SUT)-is a major component of the testing process. Specifying test oracles is challenging for some domains, such as real-time embedded systems, where small changes in timing or sensory input may","['G Gay', 'S Rayadurgam']",2016,IEEE Transactions on Software Engineering
Automated strong mutation testing of XACML policies,"While the existing methods for testing XACML policies have varying levels of effectiveness, none of them can reveal the majority of policy faults. The undisclosed faults may lead to unauthorized access and denial of service. This paper presents an approach to strong","['D Xu', 'R Shrestha', 'N Shen']",2020,
Automated techniques for improving the quality of existing test suites,Testing is playing a crucial and fundamental role in modern software development. Although software tests are conceptually simple—they are composed of two primary parts: inputs that are used to execute the program under test and an oracle that is used to verify that the,['C Huo'],2017,
Automated test case generation to validate non-functional software requirements,"A software system is bounded by a set of requirements. Functional requirements describe what the system must do, in terms of inputs, behavior, and outputs. We define non-functional requirements to be how well these functional requirements are satisfied, in terms of qualities",['P Zhang'],2013,
Automated test data generation for aspect-oriented programs,"Despite the upsurge of interest in the Aspect-Oriented Programming (AOP) paradigm, there remain few results on test data generation techniques for AOP. Furthermore, there is no work on search-based optimization for test data generation, an approach that has been shown to","['M Harman', 'F Islam', 'T Xie', 'S Wappler']",2009,Proceedings of the 8th ACM international conference on Aspect-oriented software development - AOSD '09
Automated test data generation for mutation testing using AspectJ programs,Aspect oriented programming is a new paradigm of software development. It introduces new types of faults. Mutation testing is a technique which can tackle these faults systematically. The effectiveness of testing depends on the coverage of testing locations to find faults and,"['M Singh', 'PK Gupta', 'S Mishra']",2011,2011 International Conference on Image Information Processing
Automated test generation for multi-state systems,This paper describes a genetic algorithm based on mutation testing to generate test cases for classes with multiple states. The fitness function is based on the coverability and the killability of the individuals. The paper includes a small empirical section that shows,"['P Reales Mateo', 'M Polo Usaola']",2013,Proceedings of the 15th annual conference companion on Genetic and evolutionary computation
Automated test generation technique for aspectual features in AspectJ,Context Aspect-oriented programming (AOP) has been promoted as a means for handling the modularization of software systems by raising the abstraction level and reducing the scattering and tangling of crosscutting concerns. Studies from literature have shown the,"['RM Parizi', 'AAA Ghani', 'SP Lee']",2015,Information and Software Technology
"Automated test oracles: State of the art, taxonomies, and trends","Test oracle methods have changed significantly over time, which has resulted in clear shifts in the research literature. Over the years, the testing techniques, strategies, and criteria utilized by researchers went through technical developments due to the improvement of","['RAP Oliveira', 'U Kanewala', 'PA Nardi']",2014,
Automated test reuse for highly configurable software,Dealing with highly configurable systems is generally very complex. Researchers and practitioners have conceived hundreds of different analysis techniques to deal with different aspects of configurable systems. One large focal point is the testing of configurable software,"['S Fischer', 'GK Michelon', 'R Ramler', 'L Linsbauer']",2020,Empirical Software Engineering
Automated testing of web applications using combinatorial strategies,"Recently, testing techniques based on dynamic exploration, which try to automatically exercise every possible user interface element, have been extensively used to facilitate fully testing web applications. Most of such testing tools are however not effective in reaching","['XF Qi', 'ZY Wang', 'JQ Mao', 'P Wang']",2017,Journal of Computer Science and Technology
Automated transplantation and differential testing for clones,"Code clones are common in software. When applying similar edits to clones, developers often find it difficult to examine the runtime behavior of clones. The problem is exacerbated when some clones are tested, while their counterparts are not. To reuse tests for similar but","['T Zhang', 'M Kim']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)
Automated unit test generation during software development: A controlled experiment and think-aloud observations,"Automated unit test generation tools can produce tests that are superior to manually written ones in terms of code coverage, but are these tests helpful to developers while they are writing code? A developer would first need to know when and how to apply such a tool, and","['JM Rojas', 'G Fraser', 'A Arcuri']",2015,Proceedings of the 2015 International Symposium on Software Testing and Analysis
Automatic detection and removal of ineffective mutants for the mutation analysis of relational database schemas,"Data is one of an organization's most valuable and strategic assets. Testing the relational database schema, which protects the integrity of this data, is of paramount importance. Mutation analysis is a means of estimating the fault-finding “strength” of a test suite. As with","['P McMinn', 'CJ Wright', 'CJ McCurdy']",2017,IEEE Transactions on Software Engineering
Automatic generation of load tests,"Load tests aim to validate whether system performance is acceptable under peak conditions. Existing test generation techniques induce load by increasing the size or rate of the input. Ignoring the particular input values, however, may lead to test suites that grossly","['P Zhang', 'S Elbaum', 'MB Dwyer']",2011,2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)
Automatic generation of test case based on GATS algorithm,"A kind of software test data automated generation method based on genetic algorithm and tabu search algorithm is proposed. Having both local search capabilities of tabu search algorithm and global search capability of genetic algorithm, this tabu genetic algorithm","['X Shen', 'Q Wang', 'P Wang']",2009,2009 IEEE International Conference on Granular Computing
Automatic identification of common and special object-oriented unit tests,"Common and special test inputs can be created to exercise some common and special behavior of the class under test, respectively. Although manually created tests are valuable, programmers often overlook some special test inputs. If programmers write down",['T Xie'],2004,"Companion to the 19th annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications  - OOPSLA '04"
Automatic mutation test case generation via dynamic symbolic execution,"The automatic test case generation is the principal issue of the software testing activity. Dynamic symbolic execution appears to be a promising approach to this matter as it has been shown to be quite powerful in producing the sought tests. Despite its power, it has only","['M Papadakis', 'N Malevris']",2010,2010 IEEE 21st International Symposium on Software Reliability Engineering
Automatic programming assessment and test data generation a review on its approaches,Automatic programming assessment has recently become an important method in assisting lecturers and instructors of programming courses to automatically mark and grade students' programming exercises as well as to provide useful feedbacks on students' programming,"['R Romli', 'S Sulaiman', 'KZ Zamli']",2010,2010 International Symposium on Information Technology
Automatic self-validation for code coverage profilers,"Code coverage as the primitive dynamic program behavior information, is widely adopted to facilitate a rich spectrum of software engineering tasks, such as testing, fuzzing, debugging, fault detection, reverse engineering, and program understanding. Thanks to the widespread","['Y Yang', 'Y Jiang', 'Z Zuo', 'Y Wang', 'H Sun']",2019,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Automatic software diversity in the light of test suites,"A few works address the challenge of automating software diversification, and they all share one core idea: using automated test suites to drive diversification. However, there is is lack of solid understanding of how test suites, programs and transformations interact one with","['B Baudry', 'S Allier', 'M Rodriguez-Cancio']",2015,
Automatic test case evolution,"Software systems evolve incrementally both during and after development, and many test cases become obsolete while software evolves. Updating test suites in the context of software evolution is a complex and time consuming activity. This article focuses on the","['M Mirzaaghaei', 'F Pastore']",2014,"Software Testing, Verification and Reliability"
Automatic test generation for industrial control software,"Since the early days of software testing, automatic test generation has been suggested as a way of allowing tests to be created at a lower cost. However, industrially useful and applicable tools for automatic test generation are still scarce. As a consequence, the",['E Enoiu'],2016,
Automatic test improvement with DSpot: a study with ten mature open-source projects,"In the literature, there is a rather clear segregation between manually written tests by developers and automatically generated ones. In this paper, we explore a third solution: to automatically improve existing test cases written by developers. We present the concept","['B Danglot', 'OL Vera-Pérez', 'B Baudry']",2019,Empirical Software Engineering
Automatic test suite evolution,"Software testing is one of the most common approaches to verify software systems. Despite of many automated techniques proposed in the literature, test cases are often generated manually. When a software system evolves during development and maintenance to",['M Mirzaaghaei'],2012,Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering - SIGSOFT/FSE '11
Automatic testing and improvement of machine translation,"This paper presents TransRepair, a fully automatic approach for testing and repairing the consistency of machine translation systems. TransRepair combines mutation with metamorphic testing to detect inconsistency bugs (without access to human oracles). It then","['Z Sun', 'JM Zhang', 'M Harman', 'M Papadakis']",2020,
Automatic testing of design faults in mapreduce applications,"New processing models are being adopted in Big Data engineering to overcome the limitations of traditional technology. Among them, MapReduce stands out by allowing for the processing of large volumes of data over a distributed infrastructure that can change during","['J Morán', 'A Bertolino', 'C de la Riva']",2018,IEEE Transactions on Reliability
Automatic unit test amplification for DevOps,"Over the last decade, strong unit testing has become an essential component of any serious software project, whether in industry or academia. The agile development movement has contributed to this cultural change with the global dissemination of test-driven development",['B Danglot'],2019,
Automatically assessing the quality of student-written tests,"Software testing is frequently being added to programming courses at many schools, but current assessment techniques for evaluating student-written software tests are imperfect. Code coverage measures are typically used in practice, but that approach does not assess",['Z Shams'],2013,Proceedings of the ninth annual international ACM conference on International computing education research
Automatically generating complex test cases from simple ones,"While source code expresses and implements design considerations for software system, test cases capture and represent the domain knowledge of software developer, her assumptions on the implicit and explicit interaction protocols in the system, and the expected",['K Rubinov'],2013,
Automatically generating test templates from test names (n),"Existing specification-based testing techniques require specifications that either do not exist or are too difficult to create. As a result, they often fall short of their goal of helping developers test expected behaviors. In this paper we present a novel, natural language","['B Zhang', 'E Hill', 'J Clause']",2015,2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Automatically identifying special and common unit tests based on inferred statistical algebraic abstractions,"Common and special test inputs can be created to exercise some common and special behavior of the class under test, respectively. Although manually created tests are valuable, programmers often overlook some special or even common test inputs. We have developed","['T Xie', 'D Notkin']",2004,
Automatically identifying special and common unit tests for object-oriented programs,"Developers often create common tests and special tests, which exercise common behaviors and special behaviors of the class under test, respectively. Although manually created tests are valuable, developers often overlook some special or even common tests. We have","['T Xie', 'D Notkin']",2005,16th IEEE International Symposium on Software Reliability Engineering (ISSRE'05)
Automatically repairing programs using both tests and bug reports,"The success of automated program repair (APR) depends significantly on its ability to localize the defects it is repairing. For fault localization (FL), APR tools typically use either spectrum-based (SBFL) techniques that use test executions or information-retrieval-based","['M Motwani', 'Y Brun']",2020,
Automating program verification and repair using invariant analysis and test input generation,"Software bugs are a persistent feature of daily life---crashing web browsers, allowing cyberattacks, and distorting the results of scientific computations. One approach to improving software uses program invariants---mathematical descriptions of program behaviors---to",['TVH Nguyen'],2014,
Automating test oracles generation,"Software systems play a more and more important role in our everyday life. Many relevant human activities nowadays involve the execution of a piece of software. Software has to be reliable to deliver the expected behavior, and assessing the quality of software is of primary",['A Goffi'],2018,
Automation of android applications functional testing using machine learning activities classification,"Following the ever-growing demand for mobile applications, researchers are constantly developing new test automation solutions for mobile developers. However, researchers have yet to produce an automated functional testing approach, resulting in many developers","['A Rosenfeld', 'O Kardashov', 'O Zang']",2018,Proceedings of the 5th International Conference on Mobile Software Engineering and Systems
Avaliação da ferramenta de testes Selenium no desenvolvimento guiado por teste de uma aplicação web,"O teste de software é um processo importante no desenvolvimento de software. Em algumas situações, a automação desse processo pode representar benefícios importantes para o controle de qualidade do software. Nesse contexto, existem diversas ferramentas de",['RP Santori'],2019,
Avoiding useless mutants,"Mutation testing is a program-transformation technique that injects artificial bugs to check whether the existing test suite can detect them. However, the costs of using mutation testing are usually high, hindering its use in industry. Useless mutants (equivalent and duplicated)","['L Fernandes', 'M Ribeiro', 'L Carvalho', 'R Gheyi']",2017,ACM SIGPLAN Notices
Balancing trade-offs in test-suite reduction,Regression testing is an important activity but can get expensive for large test suites. Test-suite reduction speeds up regression testing by identifying and removing redundant tests based on a given set of requirements. Traditional research on test-suite reduction is rather,"['A Shi', 'A Gyori', 'M Gligoric', 'A Zaytsev']",2014,Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering
Behavioral execution comparison: Are tests representative of field behavior?,"Software testing is the most widely used approach for assessing and improving software quality, but it is inherently incomplete and may not be representative of how the software is used in the field. This paper addresses the questions of to what extent tests represent how","['Q Wang', 'Y Brun', 'A Orso']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Behaviour abstraction adequacy criteria for API call protocol testing,"Code artefacts that have non‐trivial requirements with respect to the ordering in which their methods or procedures ought to be called are common and appear, for instance, in the form of API implementations and objects. Testing such code artefacts to gain confidence that they","['H Czemerinski', 'V Braberman']",2016,"Software Testing, Verification and Reliability"
Better test cases for better automated program repair,"Automated generate-and-validate program repair techniques (G&V techniques) suffer from generating many overfitted patches due to in-capabilities of test cases. Such overfitted patches are incor-rect patches, which only make all given test cases pass, but fail to fix the","['J Yang', 'A Zhikhartsev', 'Y Liu', 'L Tan']",2017,Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering
Better testing through oracle selection:(NIER track),"In software testing, the test oracle determines if the application under test has performed an execution correctly. In current testing practice and research, significant effort and thought is placed on selecting test inputs, with the selection of test oracles largely neglected. Here, we","['M Staats', 'MW Whalen']",2011,Proceedings of the 33rd International Conference on Software Engineering
Beyond code coverage—An approach for test suite assessment and improvement,"Code coverage is successfully used to guide white box test design and evaluate the respective test completeness. However, simple overall coverage ratios are often not precise enough to effectively help when a (regression) test suite needs to be reassessed and","['D Tengeri', 'Á Beszédes', 'T Gergely']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Bidirectional symbolic analysis for effective branch testing,"Structural coverage metrics, and in particular branch coverage, are popular approaches to measure the thoroughness of test suites. Unfortunately, the presence of elements that are not executable in the program under test and the difficulty of generating test cases for rare","['M Baluda', 'G Denaro', 'M Pezzè']",2015,IEEE Transactions on Software Engineering
Binary mutation analysis of tests using reassembleable disassembly,"Good tests are important in software development, but it can be hard to tell whether tests will reveal future faults that are themselves unknown. Mutation analysis, which checks whether tests reveal inserted changes in a program, is a strong measure of test suite adequacy, but","['N Emamdoost', 'V Sharma', 'T Byun']",2019,Proceedings 2019 Workshop on Binary Analysis Research
Black-box string test case generation through a multi-objective optimization,"String test cases are required by many real-world applications to identify defects and security risks. Random Testing (RT) is a low cost and easy to implement testing approach to generate strings. However, its effectiveness is not satisfactory. In this research, black-box","['A Shahbazi', 'J Miller']",2015,IEEE Transactions on Software Engineering
Black-box tree test case generation through diversity,"To identify defects and security risks in many real-world applications structured test cases, including test cases structured as trees are required. A simple approach is to generate random trees as test cases [random testing (RT)]; however, the RT approach is not very","['A Shahbazi', 'M Panahandeh', 'J Miller']",2018,Automated Software Engineering
Boolean expression extender—A mutation operator for strengthening and weakening boolean expressions,"The degree in which a software system is guaranteed to correctly provide its intended functionality, is one of the most relevant properties in the development of quality software, and the concern of software verification. Among the many techniques that approach software","['SG Brida', 'G Scilingo']",2017,2017 XLIII Latin American Computer Conference (CLEI)
Boundary sampling to boost mutation testing for deep learning models,"Context: The prevalent application of Deep Learning (DL) models has raised concerns about their reliability. Due to the data-driven programming paradigm, the quality of test datasets is extremely important to gain accurate assessment of DL models. Recently","['W Shen', 'Y Li', 'Y Han', 'L Chen', 'D Wu', 'Y Zhou']",2021,Information and Software Technology
BugsInPy: a database of existing bugs in Python programs to enable controlled testing and debugging studies,"The 2019 edition of Stack Overflow developer survey highlights that, for the first time, Python outperformed Java in terms of popularity. The gap between Python and Java further widened in the 2020 edition of the survey. Unfortunately, despite the rapid increase in","['R Widyasari', 'SQ Sim', 'C Lok', 'H Qi', 'J Phan']",2020,Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Building a test suite for web application scanners,"This paper describes the design of a test suite for thorough evaluation of web application scanners. Web application scanners are automated, black-box testing tools that examine web applications for security vulnerabilities. For several common vulnerability types, we","['E Fong', 'R Gaucher', 'V Okun', 'PE Black']",2008,Proceedings of the 41st Annual Hawaii International Conference on System Sciences (HICSS 2008)
Building an infrastructure to support experimentation with software testing techniques,"Experimentation is necessary to provide advances in research on software testing, but without infrastructure to support that experimentation, progress cannot occur. To help with this problem, we have been designing and constructing infrastructure to support controlled","['H Do', 'S Elbaum', 'G Rothermel']",2004,ACM SIGSOFT Software Engineering Notes
C++ 11/14 mutation operators based on common fault patterns,"The C++ 11/14 standard offers a wealth of features aimed at helping programmers write better code. Unfortunately, some of these features may cause subtle programming faults, likely to go unnoticed during code reviews. In this paper we propose four new","['A Parsai', 'S Demeyer', 'S De Busser']",2018,"Testing Software and Systems, Lecture Notes in Computer Science"
"CBUA: A probabilistic, predictive, and practical approach for evaluating test suite effectiveness",Knowing the effectiveness of a test suite is essential for many activities such as guiding the generation of new test cases and assessing the test adequacy of code. Mutation testing is a commonly used defect injection technique for evaluating the effectiveness of a test suite,"['P Zhang', 'Y Li', 'W Ma', 'Y Yang', 'L Chen']",2020,IEEE Transactions on Software Engineering
CCmutator: A mutation generator for concurrency constructs in multithreaded C/C++ applications,"We introduce CCmutator, a mutation generation tool for multithreaded C/C++ programs written using POSIX threads and the recently standardized C++ 11 concurrency constructs. CCmutator is capable of performing partial mutations and generating higher order mutants","['M Kusano', 'C Wang']",2013,2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Call stack coverage for test suite reduction,"Test suite reduction is an important test maintenance activity that attempts to reduce the size of a test suite with respect to some criteria. Emerging trends in software development such as component reuse, multi-language implementations, and stringent performance","['S McMaster', 'AM Memon']",2005,2006 17th International Symposium on Software Reliability Engineering
Call-stack coverage for gui test suite reduction,Graphical user interfaces (GUIs) are used as front ends to most of today's software applications. The event-driven nature of GUIs presents new challenges for testing. One important challenge is test suite reduction. Conventional reduction techniques/tools based,"['S McMaster', 'A Memon']",2008,2006 17th International Symposium on Software Reliability Engineering
Can automated test case generation cope with extract method validation?,"Refactoring often requires regression testing to check whether changes applied to the code have preserved its behavior. It is usually tricky to create an effective test suite for this task, since refactoring is not often applied in isolated steps. Rather refactoring edits may be","['IPSC Silva', 'ELG Alves', 'PDL Machado']",2018,Proceedings of the XXXII Brazilian Symposium on Software Engineering - SBES '18
Can operational profile coverage explain post‐release bug detection?,"To deliver reliable software, developers may rely on the fault detection capability of test suites. To evaluate this capability, they can apply code coverage metrics before a software release. However, recent research results have shown that these metrics may not provide a","['L Andrade', 'P Machado']",2020,"Software Testing, Verification and Reliability"
Can pairwise testing perform comparably to manually handcrafted testing carried out by industrial engineers?,"Testing is an important activity in engineering of industrial software. For such software, testing is usually performed manually by handcrafting test suites based on specific design techniques and domain-specific experience. To support developers in testing, different","['P Charbachi', 'L Eklund', 'E Enoiu']",2017,"2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)"
Can structural test adequacy criteria be used to predict the quality of generated invariants,,['SK Rad'],NA,
Can testedness be effectively measured?,"Among the major questions that a practicing tester faces are deciding where to focus additional testing effort, and deciding when to stop testing. Test the least-tested code, and stop when all code is well-tested, is a reasonable answer. Many measures of"" testedness""","['I Ahmed', 'R Gopinath', 'C Brindescu', 'A Groce']",2016,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering
Can the security mindset make students better testers?,"Writing secure code requires a programmer to think both as a defender and an attacker. One can draw a parallel between this model of thinking and techniques used in test-driven development, where students learn by thinking about how to effectively test their code and","['S Hooshangi', 'R Weiss', 'J Cappos']",2015,Proceedings of the 46th ACM Technical Symposium on Computer Science Education - SIGCSE '15
Can this fault be detected by automated test generation: a preliminary study,"Automated test generation can reduce the manual effort to improve software quality. A test generation method employs code coverage, such as the widely-used branch coverage, to guide the inference of test cases. These test cases can be used to detect hidden faults. An","['H Cheng', 'P Ma', 'J Zhang', 'J Xuan']",2020,2020 IEEE 2nd International Workshop on Intelligent Bug Fixing (IBF)
Can this fault be detected: A study on fault detection via automated test generation,"Automated test generation can reduce the manual effort in improving software quality. A test generation method employs code coverage, such as the widely-used branch coverage, to guide the inference of tests. These tests can be used to detect hidden faults. An automatic","['P Ma', 'H Cheng', 'J Zhang', 'J Xuan']",2020,Journal of Systems and Software
Can you certify your software to MC/DC? A static analysis approach to account for the number test cases,"Software testing is an important task in systems development to certify the quality of the final product. If it is not properly applied, we can end up with low-quality systems. On the other hand, applying rigorous software testing techniques can spend nearly 40-50% of the system","['AL Martins', 'ACV de Melo']",2016,
Causal testing: understanding defects' root causes,"Understanding the root cause of a defect is critical to isolating and repairing buggy behavior. We present Causal Testing, a new method of root-cause analysis that relies on the theory of counterfactual causality to identify a set of executions that likely hold key causal information","['B Johnson', 'Y Brun', 'A Meliou']",2020,
Cause reduction for quick testing,"In random testing, it is often desirable to produce a"" quick test""--an extremely inexpensive test suite that can serve as a frequently applied regression and allow the benefits of random testing to be obtained even in very slow or over-subscribed test environments. Delta","['A Groce', 'MA Alipour', 'C Zhang', 'Y Chen']",2014,"2014 IEEE Seventh International Conference on Software Testing, Verification and Validation"
"Challenges for automated, model-based test scenario generation","This paper focuses on challenges to automatic test suite generation from formal models of software systems. Popular tools and methods and their limitations are discussed. Data cohesion, meaningfulness of derived behavior, usefulness for debugging, coverage","['A Kolchin', 'S Potiyenko', 'T Weigert']",2019,"Communications in Computer and Information Science, Information and Software Technologies"
Challenges of aligning requirements engineering and system testing in large-scale agile: A multiple case study,"As agile methods become more pervasive, agile practices are applied to more large-scale systems with a scope that goes beyond pure software. The expansion of agile in these contexts provides benefits, but creates new challenges. Widespread use of agile has","['FGDO Neto', 'J Horkoff', 'E Knauss']",2017,2017 IEEE 25th International Requirements Engineering Conference Workshops (REW)
Challenges to integrate software testing into introductory programming courses,"Several studies suggest that the teaching of software testing should begin as early as possible, since introductory programming courses. In this way, the teaching of both subjects, programming and testing, becomes an integrated teaching approach. Testing practices in","['LP Scatalon', 'EF Barbosa']",2017,2017 IEEE Frontiers in Education Conference (FIE)
Characterization of open-source applications and test suites,Software systems that meet the stakeholders needs and expectations is the ultimate objective of the software provider. Software testing is a critical phase in the software development lifecycle that is used to evaluate the software. Tests can be written by the,"['S Balasubramanian', 'KR Walcott']",2018,International Journal of Software Engineering & Applications
Characterizing testing methods for context-aware software systems: Results from a quasi-systematic literature review,"Context-Aware Software Systems (CASS) use environmental information to provide better service to the systems' actors to fulfill their goals. Testing of ubiquitous software systems can be challenging since it is unlikely that, while designing the test cases, the tester","['S Matalonga', 'F Rodrigues', 'GH Travassos']",2017,Journal of Systems and Software
Checked coverage and object branch coverage: New alternatives for assessing student-written tests,"Many educators currently use code coverage metrics to assess student-written software tests. While test adequacy criteria such as statement or branch coverage can also be used to measure the thoroughness of a test suite, they have limitations. Coverage metrics assess","['Z Shams', 'SH Edwards']",2015,
Checked coverage: an indicator for oracle quality,"SUMMARY A known problem of traditional coverage metrics is that they do not assess oracle quality—that is, whether the computation result is actually checked against expectations. In this paper, we introduce the concept of checked coverage—the dynamic","['D Schuler', 'A Zeller']",2013,"Software Testing, Verification and Reliability"
Choosing the fitness function for the job: Automated generation of test suites that detect real faults,"Search‐based unit test generation, if effective at fault detection, can lower the cost of testing. Such techniques rely on fitness functions to guide the search. Ultimately, such functions represent test goals that approximate—but do not ensure—fault detection. The need to rely","['A Salahirad', 'H Almulla', 'G Gay']",2019,"Software Testing, Verification and Reliability"
Classifying generated white-box tests: an exploratory study,"White-box test generation analyzes the code of the system under test, selects relevant test inputs, and captures the observed behavior of the system as expected values in the tests. However, if there is a fault in the implementation, this fault could get encoded in the","['D Honfi', 'Z Micskei']",2019,Software Quality Journal
Clustering study of crowdsourced test report with multi-source heterogeneous information,"Crowdsourced testing is an emerging testing method in the field of software testing and industrial practice. Crowdsourced testing can provide a more realistic user experience. But crowdsourced workers are independent of each other, they may submit test reports for the","['Y Yang', 'X Yao', 'D Gong']",2019,"Data Mining and Big Data, Communications in Computer and Information Science"
Co-evolution analysis of production and test code by learning association rules of changes,"Many modern software systems come with automated tests. While these tests help to maintain code quality by providing early feedback after modifications, they also need to be maintained. In this paper, we replicate a recent pattern mining experiment to find patterns on","['L Vidács', 'M Pinzger']",2018,2018 IEEE Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE)
Code coverage and postrelease defects: A large-scale study on open source projects,"Testing is a pivotal activity in ensuring the quality of software. Code coverage is a common metric used as a yardstick to measure the efficacy and adequacy of testing. However, does higher coverage actually lead to a decline in postrelease bugs? Do files that have higher","['PS Kochhar', 'D Lo', 'J Lawall']",2017,IEEE Transactions on Reliability
Code coverage and test suite effectiveness: Empirical study with real bugs in large systems,"During software maintenance, testing is a crucial activity to ensure the quality of program code as it evolves over time. With the increasing size and complexity of software, adequate software testing has become increasingly important. Code coverage is often used as a","['PS Kochhar', 'F Thung', 'D Lo']",2015,"2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)"
Code coverage at Google,"Code coverage is a measure of the degree to which a test suite exercises a software system. Although coverage is well established in software engineering research, deployment in industry is often inhibited by the perceived usefulness and the computational costs of","['M Ivanković', 'G Petrović', 'R Just', 'G Fraser']",2019,
Code coverage differences of Java bytecode and source code instrumentation tools,"Many software testing fields, like white-box testing, test case generation, test prioritization, and fault localization, depend on code coverage measurement. If used as an overall completeness measure, the minor inaccuracies of coverage data reported by a tool do not","['F Horváth', 'T Gergely', 'Á Beszédes', 'D Tengeri']",2019,Software Quality Journal
Code coverage for suite evaluation by developers,"One of the key challenges of developers testing code is determining a test suite's quality--its ability to find faults. The most common approach is to use code coverage as a measure for test suite quality, and diminishing returns in coverage or high absolute coverage as a","['R Gopinath', 'C Jensen', 'A Groce']",2014,Proceedings of the 36th International Conference on Software Engineering
Code defenders: a mutation testing game,"Mutation testing is endorsed by software testing researchers for its unique capability of providing pragmatic estimates of a test suite's fault detection capability, and for guiding testers in improving their test suites. In practice, however, wide-spread adoption of mutation","['JM Rojas', 'G Fraser']",2016,"2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Code defenders: crowdsourcing effective tests and subtle mutants with a mutation testing game,"Writing good software tests is difficult and not every developer's favorite occupation. Mutation testing aims to help by seeding artificial faults (mutants) that good tests should identify, and test generation tools help by providing automatically generated tests. However","['JM Rojas', 'TD White', 'BS Clegg']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)
Combinatorial interaction testing of tangled configuration options,"Traditional t-way covering arrays have been shown to be highly effective at revealing option-related failures caused by the interactions of t or fewer configuration options. We however, argue that their effectiveness suffers in the presence of complex interactions among","['A Javeed', 'C Yilmaz']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Combining bug detection and test case generation,"Detecting bugs in software is an important software engineering activity. Static bug finding tools can assist in detecting bugs automatically, but they suffer from high false positive rates. Automatic test generation tools can generate test cases which can find bugs, but they suffer",['M Kellogg'],2016,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering
Combining code and requirements coverage with execution cost for test suite reduction,"Test suites tend to become large and complex after software evolution iterations, thus increasing effort and cost to execute regression testing. In this context, test suite reduction approaches could be applied to identify subsets of original test suites that preserve the","['A Marchetto', 'G Scanniello', 'A Susi']",2017,IEEE Transactions on Software Engineering
Commit-aware mutation testing,"In Continuous Integration, developers want to know how well they have tested their changes. Unfortunately, in these cases, the use of mutation testing is suboptimal since mutants affect the entire set of program behaviours and not the changed ones. Thus, the","['W Ma', 'T Laurent', 'M Ojdanić', 'TT Chekam']",2020,2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)
Comparing acceptance testing and fuzz testing: a study with wearable pulse oximeter,"Software testing is one of the most critical activities during the software development life cycle. Overall, software testing is carried out to verify the correctness of the software, providing objective evidence that the software works as intended. The deficiency of software",['A Serrano de la Cruz Parra'],2020,
Comparing and combining test-suite reduction and regression test selection,"Regression testing is widely used to check that changes made to software do not break existing functionality, but regression test suites grow, and running them fully can become costly. Researchers have proposed test-suite reduction and regression test selection as two","['A Shi', 'T Yung', 'A Gyori', 'D Marinov']",2015,Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering
Comparing coverage criteria for dynamic web application: An empirical evaluation,"Web applications have become popular and a preferred mean for users to do various crucial tasks such as selling and buying goods, doing short tasks, controlling smart houses and bank account management. The correctness of all such applications is important and","['S Sherin', 'MZ Iqbal', 'MU Khan', 'AA Jilani']",2021,Computer Standards & Interfaces
Comparing developer-provided to user-provided tests for fault localization and automated program repair,"To realistically evaluate a software testing or debugging technique, it must be run on defects and tests that are characteristic of those a developer would encounter in practice. For example, to determine the utility of a fault localization or automated program repair","['R Just', 'C Parnin', 'I Drosos', 'MD Ernst']",2018,Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis
Comparing graph-based algorithms to generate test cases from finite state machines,Model-Based Testing (MBT) is a well-known technique that employs formal models to represent reactive systems' behavior and generates test cases. Such systems have been specified and verified using mostly Finite State Machines (FSMs). There is a plethora of test,"['MM Mariano', 'ÉF de Souza', 'AT Endo']",2019,Journal of Electronic Testing
Comparing multi-point stride coverage and dataflow coverage,"We introduce a family of coverage criteria, called Multi-Point Stride Coverage (MPSC). MPSC generalizes branch coverage to coverage of tuples of branches taken from the execution sequence of a program. We investigate its potential as a replacement for dataflow","['MM Hassan', 'JH Andrews']",2013,2013 35th International Conference on Software Engineering (ICSE)
Comparing mutation coverage against branch coverage in an industrial setting,The state-of-the-practice in software development is driven by constant change fueled by continuous integration servers. Such constant change demands for frequent and fully automated tests capable to detect faults immediately upon project build. As the fault,"['A Parsai', 'S Demeyer']",2021,International Journal on Software Tools for Technology Transfer
Comparing mutation testing at the levels of source code and compiler intermediate representation,"Mutation testing is widely used in research for evaluating the effectiveness of test suites. There are multiple mutation tools that perform mutation at different levels, including traditional mutation testing at the level of source code (SRC) and more recent mutation","['F Hariri', 'A Shi', 'V Fernando']",2019,"2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)"
Comparing non-adequate test suites using coverage criteria,"A fundamental question in software testing research is how to compare test suites, often as a means for comparing test-generation techniques. Researchers frequently compare test suites by measuring their coverage. A coverage criterion C provides a set of","['M Gligoric', 'A Groce', 'C Zhang', 'R Sharma']",2013,Proceedings of the 2013 International Symposium on Software Testing and Analysis
Comparing test quality measures for assessing student-written tests,"Many educators now include software testing activities in programming assignments, so there is a growing demand for appropriate methods of assessing the quality of student-written software tests. While tests can be hand-graded, some educators also use objective","['SH Edwards', 'Z Shams']",2014,Companion Proceedings of the 36th International Conference on Software Engineering
"Comparing the effectiveness of automated test generation tools"" EVOSUITE"" and"" Tpalus""",Automated testing has been evolving over the years and the main reason behind the growth of these tools is to reduce the manual effort in checking the correctness of any software. Writing test cases to check the correctness of software is very time consuming and requires a,['SCR Chitirala'],2016,
Comparing white-box and black-box test prioritization,"Although white-box regression test prioritization has been well-studied, the more recently introduced black-box prioritization approaches have neither been compared against each other nor against more well-established white-box techniques. We present a comprehensive","['C Henard', 'M Papadakis', 'M Harman']",2016,Proceedings of the 38th International Conference on Software Engineering
Comparison of DC and MC/DC code coverages,In software development testing plays the most important role to discover bugs and to verify that the product satisfies its requirements. Several tests methods exist to check code correctness trying to find the best balance between precision and cost. Less strict ones,"['Z Szugyi', 'Z Porkoláb']",2013,Acta Electrotechnica et Informatica
Compatibility and regression testing of COTS-component-based software,"Software engineers frequently update COTS components integrated in component-based systems, and can often chose among many candidates produced by different vendors. This paper tackles both the problem of quickly identifying components that are syntactically","['L Mariani', 'S Papagiannakis']",2007,29th International Conference on Software Engineering (ICSE'07)
Compiler-assisted test acceleration on gpus for embedded software,"Embedded software is found everywhere from our highly visible mobile devices to the confines of our car in the form of smart sensors. Embedded software companies are under huge pressure to produce safe applications that limit risks, and testing is absolutely critical to","['V Yaneva', 'A Rajan', 'C Dubach']",2017,Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis
CompoSAT: specification-guided coverage for model finding,"Model-finding tools like the Alloy Analyzer produce concrete examples of how a declarative specification can be satisfied. These formal tools are useful in a wide range of domains: software design, security, networking, and more. By producing concrete examples","['S Porncharoenwase', 'T Nelson']",2018,"Formal Methods, Lecture Notes in Computer Science"
Conceptual approach for reuse of test automation artifacts on various architectural levels,"When creating a test automation infrastructure, one of the main considerations for the buildup process is its efficiency. A main cause and method for improvement might come from reuse of test automation artifacts. Following that, one may ask “To what extent can the test","['D Almog', 'SH Chassidim', 'Y Tsubery']",2018,Computer Science and Information Systems
Concrete hyperheuristic framework for test case prioritization,"Test case prioritization (TCP), which aims to find the optimal test case execution sequences for specific testing objects, has been widely used in regression testing. A wide variety of search methodologies and algorithms have been proposed to optimize test case execution","['Y Bian', 'Z Li', 'J Guo', 'R Zhao']",2018,Journal of Software: Evolution and Process
Concurrently searching branches in software tests generation through multitask evolution,"Multitask evolutionary computation (MT-EC) has been recently identified as a potentially useful paradigm for significant real-world domains. One such domain is the field of software testing. Although a number of evolutionary approaches exist already, there is a lack of","['R Sagarna', 'YS Ong']",2016,2016 IEEE Symposium Series on Computational Intelligence (SSCI)
Constructing subtle higher order mutants for Java and AspectJ programs,One goal of higher order mutation testing is to produce higher order mutants (HOMs) that represent subtle faults. We define subtle HOMs as those that are not killed by an existing test set that kills all the first order mutants of a given program. The fault detection effectiveness of,"['E Omar', 'S Ghosh', 'D Whitley']",2013,2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)
Context-aware test case adaptation,"During software evolution, both production code and test cases evolve frequently. To assure software quality, test cases should evolve in time. However, test case evolution is usually delayed and error-prone. To facilitate this process, this paper proposes a context-aware test",['P Sun'],2019,
Continuous development and testing of access and usage control: a systematic literature review,"Context: Development and testing of access/usage control systems is a growing research area. With new trends in software development such as DevOps, the development of access/usage control also has to evolve. Objective: The main aim of this paper is to provide","['S Daoudagh', 'F Lonetti', 'E Marchetti']",2020,
Continuous test generation: Enhancing continuous integration with automated test generation,"In object oriented software development, automated unit test generation tools typically target one class at a time. A class, however, is usually part of a software project consisting of more than one class, and these are subject to changes over time. This context of a class offers","['J Campos', 'A Arcuri', 'G Fraser', 'R Abreu']",2014,
Contribuições ao suporte cognitivo em teste de software unitário: um framework de tarefas e uma agenda de pesquisa,"Resumo Paiva Prado, Marllos. Contribuições ao Suporte Cognitivo em Teste de Software Unitário: Um Framework de Tarefas e uma Agenda de Pesquisa. Goiânia, 2018. 154 p. Tese de Doutorado. Instituto de Informática, Universidade Federal de Goiás. O teste unitário é",['MP Prado'],2018,
Correlations between deep neural network model coverage criteria and model quality,"Inspired by the great success of using code coverage as guidance in software testing, a lot of neural network coverage criteria have been proposed to guide testing of neural network models (eg, model accuracy under adversarial attacks). However, while the monotonic","['S Yan', 'G Tao', 'X Liu', 'J Zhai', 'S Ma', 'L Xu']",2020,Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Cost measures matter for mutation testing study validity,Mutation testing research has often used the number of mutants as a surrogate measure for the true execution cost of generating and executing mutants. This poses a potential threat to the validity of the scientific findings reported in the literature. Out of 75 works surveyed in this,"['G Guizzo', 'F Sarro', 'M Harman']",2020,Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Cost-effective regression testing using bloom filters in continuous integration development environments,Regression testing in continuous integration development environments must be cost-effective and should provide fast feedback on test suite failures to the developers. In order to provide faster feedback on failures to developers while using computing resources,"['JH Kwon', 'IY Ko']",2017,2017 24th Asia-Pacific Software Engineering Conference (APSEC)
Cost-effective techniques for user-session-based testing of web applications,"Increased use of web-based applications by businesses, government and consumers to perform their daily operations has led to the need for reliable, well-tested web applications. A short time to market, large user community, demand for con tinuous availability, and",['S Sampath'],2006,
Cost-priority cognizant regression testing,"Any change in software requires all the test cases, developed earlier, to be re-executed. This is done to make sure that the changes have not affected the proper working of the software. Since it is usually impossible to re-run all the test cases, the number of test cases, to be",['H Bhasin'],2014,ACM SIGSOFT Software Engineering Notes
Coverage is not strongly correlated with test suite effectiveness,"The coverage of a test suite is often used as a proxy for its ability to detect faults. However, previous studies that investigated the correlation between code coverage and test suite effectiveness have failed to reach a consensus about the nature and strength of the","['L Inozemtseva', 'R Holmes']",2014,Proceedings of the 36th International Conference on Software Engineering
Coverage metrics for requirements-based testing,"In software development, validation that the software meets the customer requirements is accomplished through manual inspections and testing. Current practices in software validation rely on the engineering judgment of domain experts to determine whether or not",['A Rajan'],2009,Proceedings of the 2006 international symposium on Software testing and analysis  - ISSTA'06
Coverage metrics for requirements-based testing: Evaluation of effectiveness,"In black-box testing, the tester creates a set of tests to exercise a system under test without regard to the internal structure of the system. Generally, no objective metric is used to measure the adequacy of black-box tests. In recent work, we have proposed three","['M Staats', 'M Whalen', 'A Rajan', 'M Heimdahl']",2010,
Coverage metrics for saturation-based and search-based testing of concurrent software,"Coverage metrics play a crucial role in testing. They allow one to estimate how well a program has been tested and/or to control the testing process. Several concurrency-related coverage metrics have been proposed, but most of them do not reflect concurrent behaviour","['B Křena', 'Z Letko', 'T Vojnar']",2011,"Runtime Verification, Lecture Notes in Computer Science"
Coverage-aware test database reduction,"Functional testing of applications that process the information stored in databases often requires a careful design of the test database. The larger the test database, the more difficult it is to develop and maintain tests as well as to load and reset the test data. This paper","['J Tuya', 'C de la Riva', 'MJ Suarez-Cabal']",2016,
Coverage-based quality metric of mutation operators for test suite improvement,The choice of mutation operators is a fundamental aspect in mutation testing to guide the tester to an effective test suite. Designing a set of mutation operators is subject to a trade-off between effectiveness and computational cost: a larger mutation population might uncover,"['P Delgado-Pérez', 'LM Rose', 'I Medina-Bulo']",2019,Software Quality Journal
Coverage-based reduction of test execution time: Lessons from a very large industrial project,"There exist several coverage-based approaches to reduce time and resource costs of test execution. While these methods are well-investigated and evaluated for smaller to medium-size projects, we faced several challenges in applying them in the context of a very large","['T Bach', 'A Andrzejak']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Coverage-based software testing: Beyond basic test requirements,Code coverage is one of the core quality metrics adopted by software testing practitioners nowadays. Researchers have devised several coverage criteria that testers use to assess the quality of test suites. A coverage criterion operates by:(1) defining a set of test,"['W Masri', 'FA Zaraket']",2016,
Coverage-driven test code generation for concurrent classes,Previous techniques on concurrency testing have mainly focused on exploring the interleaving space of manually written test code to expose faulty interleavings of shared memory accesses. These techniques assume the availability of failure-inducing tests. In this,"['V Terragni', 'SC Cheung']",2016,Proceedings of the 38th International Conference on Software Engineering
Creation of mutants by using centrality criteria in social network analysis,"Mutation testing is a method widely used to evaluate the effectiveness of the test suite in hardware and software tests or to design new software tests. In mutation testing, the original model is systematically mutated using certain error assumptions. Mutation testing is based",['S Takan'],2020,
Criterios basados en abstracciones de comportamiento para testing de conformidad de protocolos,"Los artefactos de código que tienen requerimientos no triviales con respecto al orden en el que sus métodos o procedimientos deben ser invocados son comunes y aparecen, por ejemplo, como implementaciones de APIs y objetos. El testeo de que dichos artefactos se",['H Czemerinski'],2015,
DASE: Document-assisted symbolic execution for improving automated test generation,"Software testing is crucial for uncovering software defects and ensuring software reliability. Symbolic execution has been utilized for automatic test generation to improve testing effectiveness. However, existing test generation techniques based on symbolic execution",['L Zhang'],2014,
DOM-based test adequacy criteria for web applications,"To assess the quality of web application test cases, web developers currently measure code coverage. Although code coverage has traditionally been a popular test adequacy criterion, we believe it alone is not adequate for assessing the quality of web application test cases","['M Mirzaaghaei', 'A Mesbah']",2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
Dase: Document-assisted symbolic execution for improving automated software testing,"We propose and implement a new approach, Document-Assisted Symbolic Execution (DASE), to improve automated test generation and bug detection. DASE leverages natural language processing techniques and heuristics to analyze program documentation to","['E Wong', 'L Zhang', 'S Wang', 'T Liu']",2015,2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
Deep neural network test coverage: How far are we?,"DNN testing is one of the most effective methods to guarantee the quality of DNN. In DNN testing, many test coverage metrics have been proposed to measure test effectiveness, including structural coverage and non-structural coverage (which are classified according to","['J Chen', 'M Yan', 'Z Wang', 'Y Kang', 'Z Wu']",2020,
DeepMutants: Training neural bug detectors with contextual mutations,"Learning-based bug detectors promise to find bugs in large code bases by exploiting natural hints such as names of variables and functions or comments. Still, existing techniques tend to underperform when presented with realistic bugs. We believe bug detector learning to","['C Richter', 'H Wehrheim']",2021,
DeepMutation: a neural mutation tool,"Mutation testing can be used to assess the fault-detection capabilities of a given test suite. To this aim, two characteristics of mutation testing frameworks are of paramount importance:(i) they should generate mutants that are representative of real faults; and (ii)","['M Tufano', 'J Kimko', 'S Wang', 'C Watson']",2020,
Defects4J: A database of existing faults to enable controlled testing studies for Java programs,"Empirical studies in software testing research may not be comparable, reproducible, or characteristic of practice. One reason is that real bugs are too infrequently used in software testing research. Extracting and reproducing real bugs is challenging and as a result hand","['R Just', 'D Jalali', 'MD Ernst']",2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
Dependent-test-aware regression testing techniques,"Developers typically rely on regression testing techniques to ensure that their changes do not break existing functionality. Unfortunately, these techniques suffer from flaky tests, which can both pass and fail when run multiple times on the same version of code and tests. One","['W Lam', 'A Shi', 'R Oei', 'S Zhang', 'MD Ernst']",2020,Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis
Deriving state-based test oracles for conformance testing,"We address the problem of how to instrument code to log events for conformance testing purposes, and how to write test oracles that process log files. We specifically consider oracles written in languages based on the state-machine formalism. We describe two",['JH Andrews'],2004,"""Second International Workshop on Dynamic Analysis (WODA 2004)"" W10S Workshop - 26th International Conference on Software Engineering"
Design of a fuzzy model to detect equivalent mutants for weak and strong mutation testing,Mutation testing is a software testing technique which works on the principle of applying simple changes to a program which is known as a mutant. A mutant helps to map the effects of real faults and generate test suite which helps to detect these faults. If the faults are,"['V Bhatia', 'A Singhal']",2016,2016 International Conference on Information Technology (InCITe) - The Next Generation IT Summit on the Theme - Internet of Things: Connect your Worlds
Detecting redundant unit tests for AspectJ programs,"Aspect-oriented software development is gaining popularity with the adoption of languages such as AspectJ. Testing is an important part in any software development, including aspect-oriented development. To automate generation of unit tests for AspectJ programs, we can","['T Xie', 'J Zhao', 'D Marinov']",2006,2006 17th International Symposium on Software Reliability Engineering
Detecting trivial mutant equivalences via compiler optimisations,"Mutation testing realises the idea of fault-based testing, ie, using artificial defects to guide the testing process. It is used to evaluate the adequacy of test suites and to guide test case generation. It is a potentially powerful form of testing, but it is well-known that its","['M Kintis', 'M Papadakis', 'Y Jia', 'N Malevris']",2017,IEEE Transactions on Software Engineering
Determining flaky tests from test failures,"Automated regression testing is widely used in modern software development. Whenever a developer pushes some changes to a repository, tests are run to check whether the changes broke some functionality. When previously passing tests fail, the most recent changes are",['L Eloussi'],2015,
Developers perception on the severity of test smells: an empirical study,"Unit testing is an essential component of the software development life-cycle. A developer could easily and quickly catch and fix software faults introduced in the source code by creating and running unit tests. Despite their importance, unit tests are subject to bad design","['D Campos', 'L Rocha', 'I Machado']",2021,
Developing and evaluating objective termination criteria for random testing,"Random testing is a software testing technique through which programs are tested by generating and executing random inputs. Because of its unstructured nature, it is difficult to determine when to stop a random testing process. Faults may be missed if the process is","['P Tramontana', 'D Amalfitano', 'N Amatucci']",2019,ACM Transactions on Software Engineering and Methodology
"Developing, verifying, and maintaining high-quality automated test scripts","With the increasing importance, size, and complexity of automated test suites, the need exists for suitable methods and tools to develop, assess the quality of, and maintain test code (scripts) in parallel with regular production (application) code. A recent review paper","['V Garousi', 'M Felderer']",2016,IEEE Software
Deviant: A mutation testing tool for solidity smart contracts,Solidity is a widely used scripting language for developing smart contracts in blockchain applications. Quality assurance of Solidity contracts is of critical importance because bugs can lead to considerable loss of assets. As software testing is a common practice for quality,"['P Chapman', 'D Xu', 'L Deng']",2019,
Deviation testing: A test case generation technique for GraphQL APIs,"GraphQL is a flexible and expressive query language. With the objective to replace the flawed and inefficient REST architectural style, GraphQL has been adopted by numerous online APIs and services. Despite its popularity, testing the implementation of a GraphQL","['DM Vargas', 'AF Blanco', 'AC Vidaurre']",2018,
Differences between a static and a dynamic test-to-code traceability recovery method,Recovering test-to-code traceability links may be required in virtually every phase of development. This task might seem simple for unit tests thanks to two fundamental unit testing guidelines: isolation (unit tests should exercise only a single unit) and separation,"['T Gergely', 'G Balogh', 'F Horváth', 'B Vancsics']",2019,Software Quality Journal
Directed test generation and analysis for web applications,Description The advent of web technologies has led to the proliferation of modern web applications with enhanced user interaction and client-side execution. JavaScript (the most widely used programming language) is extensively used to build responsive modern web,['A Milani Fard'],2017,
Disposable testing: avoiding maintenance of generated unit tests by throwing them away,"Developers write unit tests together with program code, and then maintain these tests as the program evolves. Since writing good tests can be difficult and tedious, unit tests can so be generated automatically. However, maintaining these tests (eg, when APIs change, or, when","['S Shamshiri', 'J Campos', 'G Fraser']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C)
Distance-integrated combinatorial testing,"This paper proposes a novel approach to combinatorial test generation, which achieves an increase of not only the number of new combinations but also the distance between test cases. We applied our distance-integrated approach to a state-of-the-art greedy algorithm","['EH Choi', 'C Artho', 'T Kitamura']",2016,2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE)
"Distributed systems, discrete-event simulation, test adequacy criteria, fault-based analysis.",,"['MJ Rutherford', 'A Carzaniga', 'AL Wolf']",2008,
Diversity driven adaptive test generation for concurrent data structures,"Context Testing concurrent data structures remains a notoriously challenging task, due to the nondeterminism of multi-threaded tests and the exponential explosion on the number of thread schedules. Objective We propose an automated approach to generate a series of","['L Ma', 'P Wu', 'TY Chen']",2018,Information and Software Technology
Diversity-based automated test case generation,"Software testing is an expensive task that consumes around half of a project's effort. To reduce the cost of testing and improve the software quality, test cases can be produced automatically. Random Testing (RT) is a low cost and straightforward automated test",['A Shahbazi'],2015,
Do automatically generated unit tests find real faults? an empirical study of effectiveness and challenges (t),"Rather than tediously writing unit tests manually, tools can be used to generate them automatically-sometimes even resulting in higher code coverage than manual testing. But how good are these tests at actually finding faults? To answer this question, we applied","['S Shamshiri', 'R Just', 'JM Rojas', 'G Fraser']",2015,2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Do mutation reduction strategies matter?,"Mutation analysis is a well-known, but computationally intensive, method for measuring test suite quality. While multiple strategies have been proposed to reduce the number of mutants, there is inconclusive evidence for their utility due to the limited number and size of","['R Gopinath', 'A Alipour', 'I Ahmed', 'C Jensen', 'A Groce']",2015,
Do pseudo test suites lead to inflated correlation in measuring test effectiveness?,Code coverage is the most widely adopted criteria for measuring test effectiveness in software quality assurance. The performance of coverage criteria (in indicating test suites' effectiveness) has been widely studied in prior work. Most of the studies use randomly,"['JM Zhang', 'L Zhang', 'D Hao', 'M Wang']",2019,"2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)"
Do student programmers all tend to write the same software tests?,"While many educators have added software testing practices to their programming assignments, assessing the effectiveness of student-written tests using statement coverage or branch coverage has limitations. While researchers have begun investigating alternative","['SH Edwards', 'Z Shams']",2014,Proceedings of the 2014 conference on Innovation & technology in computer science education - ITiCSE '14
Does choice of mutation tool matter?,"Though mutation analysis is the primary means of evaluating the quality of test suites, it suffers from inadequate standardization. Mutation analysis tools vary based on language, when mutants are generated (phase of compilation), and target audience. Mutation tools","['R Gopinath', 'I Ahmed', 'MA Alipour', 'C Jensen']",2017,Software Quality Journal
Does code coverage provide a good stopping rule for operational profile based testing?,"We introduce a new coverage measure, called the operational coverage, which is customized to the usage profile (count spectrum) of the entities to be covered. Operational coverage is proposed as an adequacy criterion for operational profile based testing, ie, to","['B Miranda', 'A Bertolino']",2016,Proceedings of the 11th International Workshop on Automation of Software Test - AST '16
Does creating programming assignments with tests lead to improved performance in writing unit tests?,"We have constructed a tool, CrowdSorcerer, in which students create programming assignments, their model solutions and associated test cases using a simple input-output format. We have used the tool as a part of an introductory programming course with normal","['V Kangas', 'N Pirttinen', 'H Nygren', 'J Leinonen']",2019,Proceedings of the ACM Conference on Global Computing Education
Does mutation testing improve testing practices?,"Various proxy metrics for test quality have been defined in order to guide developers when writing tests. Code coverage is particularly well established in practice, even though the question of how coverage relates to test quality is a matter of ongoing debate. Mutation","['G Petrović', 'M Ivanković', 'G Fraser']",2021,2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)
Does the failing test execute a single or multiple faults? An approach to classifying failing tests,"Debugging is an indispensable yet frustrating activity in software development and maintenance. Thus, numerous techniques have been proposed to aid this task. Despite the demonstrated effectiveness and future potential of these techniques, many of them have the","['Z Yu', 'C Bai', 'KY Cai']",2015,2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
DroidMate-2: a platform for Android test generation,"Android applications (apps) represent an ever increasing portion of the software market. Automated test input generators are the state of the art for testing and security analysis. We introduce DRoIDMATE-2 (DM-2), a platform to easily assist both developers and","['NP Borges', 'J Hotzkow', 'A Zeller']",2018,
Dynamic analysis of shared execution in software product line testing,"Software product line (SPL), a family-based software development process, has proven to be a more effective technology than single software systems. Testing SPL products individually is redundant for product lines testing. Meanwhile, the complexity of",['B Wang'],2016,Proceedings of the 20th International Systems and Software Product Line Conference
Dynamic data flow testing of object oriented systems,"Data flow testing has recently attracted new interest in the context of testing object oriented systems, since data flow information is well suited to capture relations among the object states, and can thus provide useful information for testing method interactions. Unfortunately","['G Denaro', 'A Margara', 'M Pezze']",2015,2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
Dynamic data-flow testing,"Data-flow testing techniques have long been discussed in the literature, yet to date they are still of little practical relevance. The applicability of data-flow testing is limited by the complexity and the imprecision of the approach: writing a test suite that satisfy a data-flow",['M Vivanti'],2014,
Dynamic mutant subsumption analysis using LittleDarwin,"Many academic studies in the field of software testing rely on mutation testing to use as their comparison criteria. However, recent studies have shown that redundant mutants have a significant effect on the accuracy of their results. One solution to this problem is to use","['A Parsai', 'S Demeyer']",2017,Proceedings of the 8th ACM SIGSOFT International Workshop on Automated Software Testing
Dynamic program analysis for suggesting test improvements to developers,"Automated testing is at the core of modern software development. Yet developers struggle when it comes to the evaluation of the quality of their test cases and how to improve them. The main goal of this thesis is precisely that, to generate concrete suggestion that",['O Vera-Pérez'],2019,
Eclat: Automatic generation and classification of test inputs,"This paper describes a technique that selects, from a large set of test inputs, a small subset likely to reveal faults in the software under test. The technique takes a program or software component, plus a set of correct executions—say, from observations of the software running","['C Pacheco', 'MD Ernst']",2005,"ECOOP 2005 - Object-Oriented Programming, Lecture Notes in Computer Science"
Eclat: automatic generation and classification of test inputs,,"['MD Ernst', 'C Pacheco']",2005,"ECOOP 2005 - Object-Oriented Programming, Lecture Notes in Computer Science"
Effective fault localization via mutation analysis: A selective mutation approach,"When programs fail, developers face the problem of identifying the code fragments responsible for this failure. To this end, fault localization techniques try to identify suspicious program places (program statements) by observing the spectrum of the failing and passing","['M Papadakis', 'Y Le Traon']",2014,
Effective methods to tackle the equivalent mutant problem when testing software with mutation,"Mutation Testing is undoubtedly one of the most effective software testing techniques that has been applied to different software artefacts at different testing levels. Apart from mutation's versatility, its most important characteristic is its ability to detect real faults",['M Kintis'],2016,
Effective regression test case selection: A systematic literature review,"Regression test case selection techniques attempt to increase the testing effectiveness based on the measurement capabilities, such as cost, coverage, and fault detection. This systematic literature review presents state-of-the-art research in effective regression test","['R Kazmi', 'DNA Jawawi', 'R Mohamad']",2017,
Effective test suites for mixed discrete-continuous stateflow controllers,Modeling mixed discrete-continuous controllers using Stateflow is common practice and has a long tradition in the embedded software system industry. Testing Stateflow models is complicated by expensive and manual test oracles that are not amenable to full automation,"['R Matinnejad', 'S Nejati', 'LC Briand']",2015,Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering
Effective unit-testing in model-based software development,"Model-based software development is extensively used in avionics and automotive safety critical control software applications. In model-based software development, highly optimized code is generated automatically from models. Such code is often hard to","['D Kamma', 'P Maruthi']",2014,
Effectiveness and challenges in generating concurrent tests for thread-safe classes,"Developing correct and efficient concurrent programs is difficult and error-prone, due to the complexity of thread synchronization. Often, developers alleviate such problem by relying on thread-safe classes, which encapsulate most synchronization-related challenges. Thus","['V Terragni', 'M Pezzè']",2018,Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering
Efficient and flexible GUI test execution via test merging,"As a test suite evolves, it can accumulate redundant tests. To address this problem, many test-suite reduction techniques, based on different measures of redundancy, have been developed. A more subtle problem, that can also cause test-suite bloat and that has not","['P Devaki', 'S Thummalapenta', 'N Singhania']",2013,Proceedings of the 2013 International Symposium on Software Testing and Analysis
Efficient binary-level coverage analysis,"Code coverage analysis plays an important role in the software testing process. More recently, the remarkable effectiveness of coverage feedback has triggered a broad interest in feedback-guided fuzzing. In this work, we introduce bcov, a tool for binary-level coverage","['MA Ben Khadra', 'D Stoffel', 'W Kunz']",2020,Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Efficient increasing of the mutation score during model-based test suite generation,"The purpose of the method is to increase the sensitivity of an automatically generated test suite to mutations of a model. Unlike existing methods for generating test scenarios that use the mutational approach to assess the resulting test set, the proposed method analyzes the","['A Kolchin', 'S Potiyenko', 'T Weigert']",2020,PROBLEMS IN PROGRAMMING
Efficient mutant generation for mutation testing of pointcuts in aspect-oriented programs,"Fault-based testing is an approach where the designed test data is used to demonstrate the absence of a set of prespecified faults, typically being frequently occurring faults. Mutation testing is a fault-based testing technique used to inject faults into an existing program, ie, a","['P Anbalagan', 'T Xie']",2006,Second Workshop on Mutation Analysis (Mutation 2006 - ISSRE Workshops 2006)
Efficient mutation analysis by propagating and partitioning infected execution states,Mutation analysis evaluates a testing technique by measur-ing how well it detects seeded faults (mutants). Mutation analysis is hampered by inherent scalability problems—a test suite is executed for each of a large number of mutants. Despite numerous optimizations,"['R Just', 'MD Ernst', 'G Fraser']",2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
Efficient mutation testing in configurable systems,Mutation testing is a technique to evaluate the quality of test cases by assessing their ability to detect faults. Mutants are modified versions of the original program that are generated automatically and should contain faults similar to those caused by developers' mistakes. For,"['M Al-Hajjaji', 'J Krüger', 'F Benduhn']",2017,2017 IEEE/ACM 2nd International Workshop on Variability and Complexity in Software Design (VACE)
Efficient observability-based test generation by dynamic symbolic execution,"Structural coverage metrics have been widely used to measure test suite adequacy as well as to generate test cases. In previous investigations, we have found that the fault-finding effectiveness of tests satisfying structural coverage criteria is highly dependent on program","['D You', 'S Rayadurgam', 'M Whalen']",2015,2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)
Efficiently finding higher-order mutants,"Higher-order mutation has the potential for improving major drawbacks of traditional first-order mutation, such as by simulating more realistic faults or improving test-optimization techniques. Despite interest in studying promising higher-order mutants, such mutants are","['CP Wong', 'J Meinicke', 'L Chen', 'JP Diniz']",2020,Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Efficiently generating test data to kill stubborn mutants by dynamically reducing the search domain,"Mutation testing is a fault-oriented software testing technique, and a test suite generated based on the criterion of mutation testing generally has a high capability in detecting faults. A mutant that is hard killed is called a stubborn one. The traditional methods of test data","['X Dang', 'X Yao', 'D Gong', 'T Tian']",2019,IEEE Transactions on Reliability
Empirical analysis of object-oriented software test suite evolution,"The software system is evolving over the time, thus, the test suite must be repaired according to the changing code. Updating test cases manually is a time-consuming activity, especially for large test suites, which motivate the recent development of automatically repairing test","['N Alsolami', 'Q Obeidat']",2019,International Journal of Advanced Computer Science and Applications
Empirical evaluation of a new composite approach to the coverage criteria and reachability testing of concurrent programs,"Testing is a key activity to assure the quality of concurrent applications. In recent years, a variety of different mechanisms have been proposed to test concurrent software. However, a persistent problem is the high testing cost because of the large number of different","['SRS Souza', 'PSL Souza', 'MAS Brito']",2015,"Software Testing, Verification and Reliability"
Empirical evaluation of mutation‐based test case prioritization techniques,"In this paper, we propose a new test case prioritization technique that combines both mutation‐based and diversity‐aware approaches. The diversity‐aware mutation‐based technique relies on the notion of mutant distinguishment, which aims to distinguish one","['D Shin', 'S Yoo', 'M Papadakis']",2019,"Software Testing, Verification and Reliability"
Empirical evaluation of test coverage for functional programs,"The correlation between test coverage and test effectiveness is important to justify the use of coverage in practice. Existing results on imperative programs mostly show that test coverage predicates effectiveness. However, since functional programs are usually structurally","['Y Cheng', 'M Wang', 'Y Xiong', 'D Hao']",2016,"2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Empirical evaluation of the fault detection effectiveness and test effort efficiency of the automated AOP testing approaches,"Context Testing process is a time-consuming, expensive, and labor-intensive activity in any software setting including aspect-oriented programming (AOP). To reduce the testing costs, human effort, and to achieve the improvements in both quality and productivity of AOP, it is","['RM Parizi', 'AAA Ghani', 'R Abdullah', 'R Atan']",2011,Information and Software Technology
Empirical research on concurrent software testing: A systematic mapping study,"Background: Concurrent software testing is a costly and difficult task, especially due to the exponential increase in the test sequences caused by non-determinism. Such an issue has motivated researchers to develop testing techniques that select a subset of the input domain","['SM Melo', 'JC Carver', 'PSL Souza', 'SRS Souza']",2019,Information and Software Technology
Empirical study of correlation between mutation score and model inference based test suite adequacy assessment,"In this paper we investigate a method for test suite evaluation that is based on an inferred model from the test suite. The idea is to use the similarity between the inferred model and the system under test as a measure of test suite adequacy, which is the ability of a test suite","['H Felbinger', 'F Wotawa', 'M Nica']",2016,Proceedings of the 11th International Workshop on Automation of Software Test - AST '16
Empirical study of the effects of different similarity measures on test case prioritization,Similarity-based test case prioritization algorithms have been applied to regression testing. The common characteristic of these algorithms is to reschedule the execution order of test cases according to the distances between pair-wise test cases. The distance information can,"['R Wang', 'S Jiang', 'D Chen', 'Y Zhang']",2016,Mathematical Problems in Engineering
Empirically evaluating Greedy-based test suite reduction methods at different levels of test suite complexity,"Test suite reduction is an important approach that decreases the cost of regression testing. A test suite reduction technique operates based on the relationship between the test cases in the regression test suite and the test requirements in the program under test. Thus, its","['CT Lin', 'KW Tang', 'JS Wang', 'GM Kapfhammer']",2017,Science of Computer Programming
Empirically evaluating the quality of automatically generated and manually written test suites,"The creation, execution, and maintenance of tests are some of the most expensive tasks in software development. To help reduce the cost, automated test generation tools can be used to assist and guide developers in creating test cases. Yet, the tests that automated tools","['JS Kracht', 'JZ Petrovic']",2014,2014 14th International Conference on Quality Software
Empirically revisiting and enhancing IR-based test-case prioritization,"Test-case prioritization (TCP) aims to detect regression bugs faster via reordering the tests run. While TCP has been studied for over 20 years, it was almost always evaluated using seeded faults/mutants as opposed to using real test failures. In this work, we study the recent","['Q Peng', 'A Shi', 'L Zhang']",2020,Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis
Empirically revisiting the test independence assumption,"In a test suite, all the test cases should be independent: no test should affect any other test's result, and running the tests in any order should produce the same test results. Techniques such as test prioritization generally assume that the tests in a suite are independent. Test","['S Zhang', 'D Jalali', 'J Wuttke', 'K Muşlu', 'W Lam']",2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
Emville: A gamification-based approach to address the equivalent mutant problem,"Mutation testing is known as an effective method for evaluating test sets in terms of their error-revealing capability. When applying mutation testing, it is necessary to identify and filter out the equivalent mutants, ie mutants that despite their syntactical difference have the","['M Houshmand', 'S Paydar']",2017,2017 7th International Conference on Computer and Knowledge Engineering (ICCKE)
Enabledness-based testing of object protocols,"A significant proportion of classes in modern software introduce or use object protocols, prescriptions on the temporal orderings of method calls on objects. This article studies search-based test generation techniques that aim to exploit a particular abstraction of object","['J Godoy', 'JP Galeotti', 'D Garbervetsky']",2021,ACM Transactions on Software Engineering and Methodology
Enabling mutation testing for android apps,"Mutation testing has been widely used to assess the fault-detection effectiveness of a test suite, as well as to guide test case generation or prioritization. Empirical studies have shown that, while mutants are generally representative of real faults, an effective application of","['M Linares-Vásquez', 'G Bavota', 'M Tufano']",2017,
Enabling test case prioritization for component based software development,"Frequent evolution of modern software systems increases complexity and system failure. Therefore, to overcome these issues the component-based system was developed that consists of integrated reuse components that work together to perform specific tasks or new","['S Ali', 'Y Hafeez']",2019,2019 International Conference on Frontiers of Information Technology (FIT)
Enabling test case selection of automatically generated unit tests through traceability: An empirical study,"Anticipating the effects of changes/modifications to source code, is a difficult if not an impossible process, unless the right tools or methods are applied. One way of handling change impact analysis is through test case selection which can cut down the testing time","['M Jobe', 'M Mahboob']",2017,
"Engineering of Software Test-Code: Developing, verifying and maintaining high-quality automated test scripts","Automated software testing and development of test code (scripts) are now mainstream in the software industry. For instance, in a recent book, Microsoft test engineers reported that “there were more than a million [automated] test cases written for Microsoft Office 2007”[1]","['V Garousi', 'M Felderer']",2016,
Enhanced optimizer algorithm and its application to software testing,Optimisation algorithm is currently one of the most applicable techniques to solve real-world problems by finding the best solution from all feasible solutions in the search space. This paper proposes enhanced multiverse optimiser algorithm that is inspired from the physics,"['SN Fakhouri', 'A Hudaib', 'HN Fakhouri']",2020,Journal of Experimental & Theoretical Artificial Intelligence
Enhanced regression testing technique for agile software development and continuous integration strategies,"To survive in competitive marketplaces, most organizations have adopted agile methodologies to facilitate continuous integration and faster application delivery and rely on regression testing during application development to validate the quality and reliability of the","['S Ali', 'Y Hafeez', 'S Hussain', 'S Yang']",2019,Software Quality Journal
Enriching code coverage with test characteristics,"Code coverage measures the degree to which source code elements (eg, statements, branches) are invoked during testing. Despite growing evidence that coverage is a problematic measurement, it is often used to make decisions about where testing effort","['V Subramanian', 'S Vysali']",2021,
Ensuring the observability of structural test obligations,"Test adequacy criteria are widely used to guide test creation. However, many of these criteria are sensitive to statement structure or the choice of test oracle. This is because such criteria ensure that execution reaches the element of interest, but impose no constraints on","['Y Meng', 'G Gay', 'M Whalen']",2018,IEEE Transactions on Software Engineering
Equivalent mutants in configurable systems: An empirical study,"Mutation testing is a program-transformation technique that evaluates the quality of test cases by assessing their capability to detect injected artificial faults. The costs of using mutation testing are usually high, hindering its use in industry. Previous research has","['L Carvalho', 'MA Guimarães', 'M Ribeiro']",2018,
Erkennung von semantisch zusammenhängenden Quelltextabschnitten anhand von Komponententests,Die Rückverfolgbarkeit von Quelltext zu Anforderungen ist ein wichtiger werdendes Problem. Eine Garantie der Implementierung aller Anforderungen kann zur Steigerung von Softwarequalität führen. Für das Erstellen der Rückverfolgbarkeitsinformationen ist ein,['M Wittlinger'],2019,
Establishing multilevel test-to-code traceability links,"Test-to-code traceability links model the relationships between test artefacts and code artefacts. When utilised during the development process, these links help developers to keep test code in sync with tested code, reducing the rate of test failures and missed faults","['R White', 'J Krinke', 'R Tan']",2020,Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering
Estimating the number of equivalent mutants,"Equivalent mutants are a constant source of aggravation in mutation testing because they distort mutation-based analysis; but the identification of equivalent mutants is known to be undecidable, in addition to being (in practice) tedious and error-prone. We argue that for","['A Ayad', 'I Marsit', 'JM Loh', 'MN Omri']",2019,"2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Evaluating T-wise testing strategies in a community-wide dataset of configurable software systems,Configurable software systems allow developers to maintain a unique platform and address a diversity of deployment contexts and usages. Testing configurable systems is essential because configurations that fail may potentially hurt users and degrade the project,"['F Ferreira', 'G Vale', 'JP Diniz', 'E Figueiredo']",2021,Journal of Systems and Software
Evaluating a test automation decision support tool,"Goldrich and Flamm developed the MITRE Automated Test Decision Framework (ATDF) to help MITRE government sponsors (and, via sharing on GitHub, development organizations in general) move from manually tested legacy software towards automated test, continuous","['K Baral', 'R Mohod', 'J Flamm', 'S Goldrich']",2019,"2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Evaluating and improving white-box test generation,"Software testing is an inevitable part of software development to ensure the quality of the product. Thorough testing of software, however, might consume an significant amount of time and resources. Therefore, already decades ago, research has begun to reduce this",['D Honfi'],2020,
Evaluating code‐based test input generator tools,"In recent years, several tools have been developed to automatically select test inputs from the code of the system under test. However, each of these tools has different advantages, and there is a little detailed feedback available on the actual capabilities of the various tools","['L Cseppentő', 'Z Micskei']",2017,"Software Testing, Verification and Reliability"
Evaluating different strategies for reduction of mutation testing costs,"Mutation testing presents high efficacy in terms of revealed faults, but with high computational costs, because test cases must be executed against a great number of mutants. To reduce such costs several strategies exist. In general, they select a reduced","['JAP Lima', 'G Guizzo', 'SR Vergilio', 'APC Silva']",2016,Proceedings of the 1st Brazilian Symposium on Systematic and Automated Software Testing - SAST
Evaluating fuzz testing,"Fuzz testing has enjoyed great success at discovering security critical bugs in real software. Recently, researchers have devoted significant effort to devising new fuzzing techniques, strategies, and algorithms. Such new ideas are primarily evaluated experimentally so an","['G Klees', 'A Ruef', 'B Cooper', 'S Wei', 'M Hicks']",2018,
Evaluating non-adequate test-case reduction,"Given two test cases, one larger and one smaller, the smaller test case is preferred for many purposes. A smaller test case usually runs faster, is easier to understand, and is more convenient for debugging. However, smaller test cases also tend to cover less code and","['MA Alipour', 'A Shi', 'R Gopinath']",2016,Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering
Evaluating random mutant selection at class-level in projects with non-adequate test suites,"Mutation testing is a standard technique to evaluate the quality of a test suite. Due to its computationally intensive nature, many approaches have been proposed to make this technique feasible in real case scenarios. Among these approaches, uniform random mutant","['A Parsai', 'A Murgia', 'S Demeyer']",2016,Proceedings of the 20th International Conference on Evaluation and Assessment in Software Engineering
Evaluating software testing techniques: a systematic mapping study,"Software testing techniques are crucial for detecting faults in software and reducing the risk of using it. As such, it is important that we have a good understanding of how to evaluate these techniques for their efficiency, scalability, applicability, and effectiveness at finding",['M Mayeda'],2019,Advances in Computers
Evaluating symbolic execution-based test tools,"In recent years several symbolic execution-based tools have been developed to automatically select relevant test inputs from the source code of the system under test. However, each of these tools has different advantages, and there is no detailed feedback","['L Cseppento', 'Z Micskei']",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)"
Evaluating test suites and adequacy criteria using simulation-based models of distributed systems,"Test adequacy criteria provide the engineer with guidance on how to populate test suites. While adequacy criteria have long been a focus of research, existing testing methods do not address many of the fundamental characteristics of distributed systems, such as distribution","['MJ Rutherford', 'A Carzaniga']",2008,IEEE Transactions on Software Engineering
Evaluating test-suite reduction in real software evolution,"Test-suite reduction (TSR) speeds up regression testing by removing redundant tests from the test suite, thus running fewer tests in the future builds. To decide whether to use TSR or not, a developer needs some way to predict how well the reduced test suite will detect real","['A Shi', 'A Gyori', 'S Mahmood', 'P Zhao']",2018,Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis
Evaluating the effects of compiler optimizations on mutation testing at the compiler IR level,Software testing is one of the most widely used approaches for improving software reliability. The effectiveness of testing depends to a large extent on the quality of test suites. Researchers have developed various techniques to evaluate the quality of test suites. Of,"['F Hariri', 'A Shi', 'H Converse', 'S Khurshid']",2016,2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE)
Evaluating the synergies of integrating e-assessment and software testing,"Teaching and learning rely on assessments. They help to measure performance and to keep track of learning success. Manual assessments are very time-consuming for teaching personnel. Therefore, e-learning and in particular e-assessment systems are introduced by","['TA Majchrzak', 'CA Usener']",2013,Information Systems Development
Evaluation and analysis of incorporating Fuzzy Expert System approach into test suite reduction,"Context Software has become increasingly important in our modern society. However, when new features are developed due to user requests, such requests could make the sizes of test-case pools bigger. Many techniques are proposed to solve this problem, such as test suite","['CY Huang', 'CS Chen', 'CE Lai']",2016,Information and Software Technology
Evaluation and improvement of automated software test suites,"Automated software tests are an important means of quality assurance in software projects and for helping to detect faults in software products early. While various measures and techniques have been proposed to evaluate test suites, code coverage metrics are the most",['R Niedermayr'],2019,
Evaluation of GUI testing techniques for system crashing: from real to model-based controlled experiments,Cellular phone applications are becoming more complex as well as their testing. Graphical User Interface (GUI) testing is a current trend to test such applications by simulating user interaction. Several techniques are proposed and their efficiency (execution cost) and,['C Bertolini'],2010,
Evaluation of mutant sampling criteria in object-oriented mutation testing,"Mutation testing of object-oriented programs differs from that of standard (traditional) mutation operators in accordance to the number of generated mutants and ability of tests to kill mutants. Therefore, outcomes of cost reduction analysis cannot be directly transferred","['A Derezińska', 'M Rudnik']",2017,Proceedings of the 2017 Federated Conference on Computer Science and Information Systems
Evaluation of mutation testing in a nuclear industry case study,"For software quality assurance, many safety-critical industries appeal to the use of dynamic testing and structural coverage criteria. However, there are reasons to doubt the adequacy of such practices. Mutation testing has been suggested as an alternative or complementary","['P Delgado-Pérez', 'I Habli', 'S Gregory']",2018,IEEE Transactions on Reliability
Evaluation of the prediction-based approach to cost reduction in mutation testing,"Mutation testing is the most effective technique for assessing the quality of test suites, but it is also very expensive in terms of computational costs. The cost arises from the need to generate and execute a large number of so called mutants. The paper presents and","['J Strug', 'B Strug']",2018,"Advances in Intelligent Systems and Computing, Information Systems Architecture and Technology: Proceedings of 39th International Conference on Information Systems Architecture and Technology – ISAT 2018"
Experience report: An industrial experience report on test outsourcing practices,"Nowadays, many companies contract their testing functionalities out to third-party IT outsourcing companies. This process referred to as test outsourcing is common in the industry, yet it is rarely studied in the research community. In this paper, to bridge the gap","['X Xia', 'D Lo', 'PS Kochhar', 'Z Xing']",2015,2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)
Experience report: An industrial experience report on test outsourcing practices.(2015),"Nowadays, many companies contract their testing functionalities out to third-party IT outsourcing companies. This process referred to as test outsourcing is common in the industry, yet it is rarely studied in the research community. In this paper, to bridge the gap","['X XIA', 'LO David', 'PS KOCHHAR', 'Z XING']",NA,2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)
"Experience report: How do techniques, programs, and tests impact automated program repair?","Automated program repair can save tremendous manual efforts in software debugging. Therefore, a huge body of research efforts have been dedicated to design and implement automated program repair techniques. Among the existing program repair techniques","['X Kong', 'L Zhang', 'WE Wong', 'B Li']",2015,2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)
Experience report: How is dynamic symbolic execution different from manual testing? a study on klee,"Software testing has been the major approach to software quality assurance for decades, but it typically involves intensive manual efforts. To reduce manual efforts, researchers have proposed numerous approaches to automate test-case generation, which is one of the most","['X Wang', 'L Zhang', 'P Tanofsky']",2015,Proceedings of the 2015 International Symposium on Software Testing and Analysis
Experimental evaluation of mutation testing approaches to python programs,Mutation testing of Python programs raises a problem of incompetent mutants. Incompetent mutants cause execution errors due to inconsistency of types that cannot be resolved before run-time. We present a practical approach in which incompetent mutants can be generated,"['A Derezinska', 'K Halas']",2014,"2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops"
Experimenting with a multi-approach testing strategy for adaptive systems,"Context: Testing adaptive systems (ASs) is particularly challenging due to certain characteristics such as the high number of possible configurations, runtime adaptations and the interactions between the system and its surrounding environment","['BR Siqueira', 'MC Júnior', 'FC Ferrari']",2018,Proceedings of the 17th Brazilian Symposium on Software Quality
Exploiting the saturation effect in automatic random testing of android applications,"Monkey Fuzz Testing (MFT), a form of random testing, continues to gain popularity to test Android apps because of its ease of use.(Untrained) programmers use MFT tools to fully automatically detect certain classes of faults in apps. A challenge for these tools is the lack of","['D Amalfitano', 'N Amatucci', 'AR Fasolino']",2015,2015 2nd ACM International Conference on Mobile Software Engineering and Systems
Explorando gamificação no ensino de teste de software,"Context: Testing is a fundamental activity in the development process, and aims at revealing faults. Despite its importance, the time devoted to testing education has not been enough, resulting in the lack of trained professionals. Other problems faced are misalignment",['GM Jesus'],2019,
Exploring design decisions for mutation testing,"Software testing is by far the most popular technique used in industry for quality assurance. One key challenge of software testing is how to evaluate the quality of test suites in terms of their bug-finding capability. A test suite with a large number of tests, or that achieves a high",['F Hariri'],2018,
Exploring output-based coverage for testing PHP web applications,"In software testing, different testers focus on different aspects of the software such as functionality, performance, design, and other attributes. While many tools and coverage metrics exist to support testers at the code level, not much support is targeted for testers who","['HV Nguyen', 'HD Phan', 'C Kästner']",2019,Automated Software Engineering
Exploring test suite diversification and code coverage in multi-objective test case selection,"Test case selection is a classic testing technique to choose a subset of existing test cases for execution, due to the limited budget and tight deadlines. While'code coverage'is the state of practice among test case selection heuristics, recent literature has shown thattest case","['D Mondal', 'H Hemmati']",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)"
Exploring topological structure of boolean expressions for test data selection,Several test strategies have emerged to detect faults associated Boolean expressions. Current approaches lack a proper model to give an overall picture of the Boolean expressions and comprehensive exploration of test data space. This paper proposes a,"['L Yu', 'W Zhao', 'X Fan', 'J Zhu']",2009,2009 Third IEEE International Symposium on Theoretical Aspects of Software Engineering
Exposing library API misuses via mutation analysis,Misuses of library APIs are pervasive and often lead to software crashes and vulnerability issues. Various static analysis tools have been proposed to detect library API misuses. They often involve mining frequent patterns from a large number of correct API usage examples,"['M Wen', 'Y Liu', 'R Wu', 'X Xie']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)
Extended program invariants: applications in testing and fault localization,"Invariants are powerful tools for program analysis and reasoning. Several tools and techniques have been developed to infer invariants of a program. Given a test suite for a program, an invariant detection tool (IDT) extracts (potential) invariants from the program","['MA Alipour', 'A Groce']",2012,Proceedings of the 2012 Workshop on Dynamic Analysis - WODA 2012
Extending coverage criteria by evaluating their robustness to code structure changes,"Code coverage is usually used as a measurement of testing quality and as adequacy criterion. Unfortunately, code coverage is very sensitive to modifications of the code structure, and, therefore, the same test suite can achieve different degrees of coverage on","['A Gargantini', 'M Guarnieri', 'E Magri']",2012,"Testing Software and Systems, Lecture Notes in Computer Science"
Extending the Bacterio tool for web application mutation testing.,,"['M Polo', 'D Caivano', 'PR Mateo']",NA,
Fairness testing: testing software for discrimination,"This paper defines software fairness and discrimination and develops a testing-based method for measuring if and how much software discriminates, focusing on causality in discriminatory behavior. Evidence of software discrimination has been found in modern","['S Galhotra', 'Y Brun', 'A Meliou']",2017,Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering
Fast and accurate incremental feedback for students' software tests using selective mutation analysis,"As incorporating software testing into programming assignments becomes routine, educators have begun to assess not only the correctness of students' software, but also the adequacy of their tests. In practice, educators rely on code coverage measures, though its","['AM Kazerouni', 'JC Davis', 'A Basak', 'CA Shaffer']",2021,Journal of Systems and Software
Faster mutation analysis via equivalence modulo states,"Mutation analysis has many applications, such as asserting the quality of test suites and localizing faults. One important bottleneck of mutation analysis is scalability. The latest work explores the possibility of reducing the redundant execution via split-stream execution","['B Wang', 'Y Xiong', 'Y Shi', 'L Zhang', 'D Hao']",2017,Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis
Faster mutation testing inspired by test prioritization and reduction,"Mutation testing is a well-known but costly approach for determining test adequacy. The central idea behind the approach is to generate mutants, which are small syntactic transformations of the program under test, and then to measure for a given test suite how","['L Zhang', 'D Marinov', 'S Khurshid']",2013,Proceedings of the 2013 International Symposium on Software Testing and Analysis
Faster mutation-based fault localization with a novel mutation execution strategy,Checking program entities for finding faults is extremely tedious for developers. Fault localization techniques are designed to give a rank list of the probability that program entities incur faults to assist developers to locate faults. Mutation-based fault localization is a,"['P Gong', 'R Zhao', 'Z Li']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Fault Evaluator: a tool for experimental investigation of effectiveness in software testing,"The specifications for many software systems, including safety-critical control systems, are often described using complex logical expressions. It is important to find effective methods to test implementations of such expressions. Analyzing the effectiveness of the testing of","['W Jenkins', 'S Vilkomir']",2010,2010 IEEE International Conference on Progress in Informatics and Computing
Fault detection probability analysis for coverage-based test suite reduction,Test suite reduction seeks to reduce the number of test cases in a test suite while retaining a high percentage of the original suite's fault detection effectiveness. Most approaches to this problem are based on eliminating test cases that are redundant relative to some coverage,"['S McMaster', 'A Memon']",2007,2007 IEEE International Conference on Software Maintenance
Featured model-based mutation analysis,"Model-based mutation analysis is a powerful but expensive testing technique. We tackle its high computation cost by proposing an optimization technique that drastically speeds up the mutant execution process. Central to this approach is the Featured Mutant Model, a","['X Devroey', 'G Perrouin', 'M Papadakis', 'A Legay']",2016,Proceedings of the 38th International Conference on Software Engineering
Feedback-based random test generator for TSTL,"Software testing is the process of evaluating the accuracy and performance of software, and automated software testing allows programmers to develop software more efficiently by decreasing testing costs. We compared two advanced random test generators, a Feedback",['K Kaneoka'],2017,
Feedback-controlled random test generation,"Feedback-directed random test generation is a widely used technique to generate random method sequences. It leverages feedback to guide generation. However, the validity of feedback guidance has not been challenged yet. In this paper, we investigate the","['K Yatoh', 'K Sakamoto', 'F Ishikawa']",2015,Proceedings of the 2015 International Symposium on Software Testing and Analysis
File Systems are Hard to Test—Learning from Xfstests,"Modern file systems, such as ext4, btrfs, and XFS, are evolving and enable the introduction of new features to meet ever-changing demands and improve reliability. File system developers are struggling to eliminate all software bugs, but the operating system","['N Aota', 'K Kono']",2019,IEICE Transactions on Information and Systems
Finding redundancy in web mutation operators,"New web development technologies enhance functionality of web applications but also introduce challenges in testing the software. As mutation analysis has been shown to be effective at designing tests for traditional software, we previously proposed web mutation","['U Praphamontripong', 'J Offutt']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Fine-grained code coverage measurement in automated black-box android testing,"Today, there are millions of third-party Android applications. Some of them are buggy or even malicious. To identify such applications, novel frameworks for automated black-box testing and dynamic analysis are being developed by the Android community. Code","['A Pilgun', 'O Gadyatskaya', 'Y Zhauniarovich']",2020,ACM Transactions on Software Engineering and Methodology
Fine-grained test minimization,"As a software system evolves, its test suite can accumulate redundancies over time. Test minimization aims at removing redundant test cases. However, current techniques remove whole test cases from the test suite using test adequacy criteria, such as code coverage","['A Vahabzadeh', 'A Stocco']",2018,EasyChair Preprints
Fragment analysis and test case generation using F-measure for adaptive random testing and partitioned block based adaptive random testing,Test case generation is a path to identify the solution in software testing. Adaptive random testing is an enhancement of random testing to improve the quality of fault-revealing. The research focuses on software adaptive random testing based on Matrix called Partitioned,"['D Indhumathi', 'S Sarala']",2014,International Journal of Computer Applications
From Daikon to Agitator: lessons and challenges in building a commercial tool for developer testing,"Developer testing is of one of the most effective strategies for improving the quality of software, reducing its cost, and accelerating its development. Despite its widely recognized benefits, developer testing is practiced by only a minority of developers. The slow adoption","['M Boshernitsan', 'R Doong', 'A Savoia']",2006,
Full predicate coverage for testing SQL database queries,"In the field of database applications a considerable part of the business logic is implemented using a semi‐declarative language: the Structured Query Language (SQL). Because of the different semantics of SQL compared with other procedural languages, the conventional","['J Tuya', 'MJ Suárez‐Cabal']",2010,"Software Testing, Verification and Reliability"
Functional and Security testing of a Mobile Application,"A mobile application has been developed to be used for assistance in crisis scenarios. To assure the application is dependable enough to be used in such scenarios, the application was put under test. This thesis investigates different approaches to functional testing and","['J Sjöstrand', 'S Westberg']",2017,
GECOJAP: A novel source-code preprocessing technique to improve code coverage,Safety critical standards such as DO178B/DO178C/RTCA (Radio Technical Commission for Aeronautics) mandates coverage based testing in Aerospace applications. These standards mandate Level A certification for Modified Condition/Decision Coverage (MC/DC). To,"['S Godboley', 'A Dutta', 'DP Mohapatra', 'R Mall']",2018,Computer Standards & Interfaces
Gamification in software testing: A characterization study,"Context: Testing is a fundamental activity in the software development cycle. Revealing software faults is its main objective. Despite that, testing is considered unpleasant, dull and tedious. As a result, there is a lack of expertise among professionals while many projects fail","['GM de Jesus', 'FC Ferrari', 'D de Paula Porto']",2018,
Gamification of software testing,"Writing good software tests is difficult, not every software developer's favorite occupation, and not a prominent aspect in programming education. However, human involvement in testing is unavoidable: What makes a test good is often down to intuition; what makes a test",['G Fraser'],2017,2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
Gamification to aid the learning of test coverage concepts,The ability to effectively and efficiently test software is an important practice in software testing that is often under-emphasized in computer science education. Many students find learning about testing to be uninteresting and difficult to learn. This causes numerous,"['E Sherif', 'A Liu', 'B Nguyen', 'S Lerner']",2020,2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
Gamifying a software testing course with code defenders,"Software testing is an essential skill for software developers, but it is challenging to get students engaged in this activity. The Code Defenders game addresses this problem by letting students compete over code under test by either introducing faults ("" attacking"") or by","['G Fraser', 'A Gambi', 'M Kreis', 'JM Rojas']",2019,
Generate test selection statistics with automated selective mutation,Objectives. This thesis focuses on co-relating code packages to test packages by automating mutation to inject error into C code. Regression testing against mutated code establishes co-relations. Co-relation data of particular modified code packages can be used,['GD Charan'],2020,
Generating effective test suites by combining coverage criteria,"A number of criteria have been proposed to judge test suite adequacy. While search-based test generation has improved greatly at criteria coverage, the produced suites are still often ineffective at detecting faults. Efficacy may be limited by the single-minded application of one",['G Gay'],2017,"Search Based Software Engineering, Lecture Notes in Computer Science"
Generating effective test suites for reactive systems using specification mining,Failures in reactive embedded systems are often unacceptable. Effective testing of embedded systems to detect such unacceptable failures is a difficult task. We present an automated black box test suite generation technique for embedded systems. The technique,['PR Bokil'],2014,
Generating source inputs for metamorphic testing using dynamic symbolic execution,"Metamorphic testing uses domain-specific properties about a program's intended behaviour to alleviate the oracle problem. From a given set of source test inputs, a set of follow-up test inputs are generated which have some relation to the source inputs, and their outputs are","['E Alatawi', 'T Miller', 'H Søndergaard']",2016,Proceedings of the 1st International Workshop on Metamorphic Testing
Generating unit tests for concurrent classes,"As computers become more and more powerful, programs are increasingly split up into multiple threads to leverage the power of multi-core CPUs. However, writing correct multi-threaded code is a hard problem, as the programmer has to ensure that all access to shared","['S Steenbuck', 'G Fraser']",2013,"2013 IEEE Sixth International Conference on Software Testing, Verification and Validation"
Generating various contexts from permissions for testing Android applications.,"Page 1. Generating various contexts from permissions for testing Android applications Kwangsik Song, Ah-Rim Han, Sehun Jeong, Sungdeok Cha Presented by Ah-Rim Han Korea University, South Korea 2015. 7. 6 Page 2. Contents • Introduction • Overview • Testing Android applications","['K Song', 'AR Han', 'S Jeong', 'SD Cha']",2015,Proceedings of the 27th International Conference on Software Engineering and Knowledge Engineering
Generation of test requirements from aspectual use cases,"To effectively uncover aspect defects, system (or subsystem) testing is of importance because aspects crosscut multiple system components. This paper presents an approach for generating system test requirements from aspect-oriented use cases. Central to this","['D Xu', 'X He']",2007,Proceedings of the 3rd workshop on Testing aspect-oriented programs  - WTAOP '07
Generic method for statistical testing of parallel programs based on task trees,"This paper deals with a particular class of parallel programs, which are based on task trees. The main objective of this paper was to adapt the generic method for statistical testing of sequential programs (GMST-SP) for this class of parallel programs, such that adapted","['M Popovic', 'I Kupresanin']",2012,Scientific Research and Essays
Genetic improvement using higher order mutation,This paper presents a brief outline of a higher-order mutation-based framework for Genetic Improvement (GI). We argue that search-based higher-order mutation testing can be used to implement a form of genetic programming (GP) to increase the search granularity and,"['Y Jia', 'F Wu', 'M Harman', 'J Krinke']",2015,Proceedings of the Companion Publication of the 2015 Annual Conference on Genetic and Evolutionary Computation
Goal-oriented mutation testing with focal methods,"Mutation testing is the state-of-the-art technique for assessing the fault-detection capacity of a test suite. Unfortunately, mutation testing consumes enormous computing resources because it runs the whole test suite for each and every injected mutant. In this paper we","['S Vercammen', 'M Ghafari', 'S Demeyer']",2018,"Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation"
Grammar-driven generation of domain-specific language testing tools using aspects,Domain-specific languages (DSLs) assist a software developer (or end-user) in writing a program using idioms that are similar to the abstractions found in a specific problem domain. Testing tool support for DSLs is lacking when compared to the capabilities,['H Wu'],2007,
Greenscaler: training software energy models with automatic test generation,Software energy consumption is a performance related non-functional requirement that complicates building software on mobile devices today. Energy hogging applications (apps) are a liability to both the end-user and software developer. Measuring software energy,"['S Chowdhury', 'S Borle', 'S Romansky']",2019,Empirical Software Engineering
Grt: Program-analysis-guided random testing (t),"We propose Guided Random Testing (GRT), which uses static and dynamic analysis to include information on program types, data, and dependencies in various stages of automated test generation. Static analysis extracts knowledge from the system under test","['L Ma', 'C Artho', 'C Zhang', 'H Sato']",2015,2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Guided mutation testing for javascript web applications,"Mutation testing is an effective test adequacy assessment technique. However, there is a high computational cost in executing the test suite against a potentially large pool of generated mutants. Moreover, there is much effort involved in filtering out equivalent","['S Mirshokraie', 'A Mesbah']",2014,IEEE Transactions on Software Engineering
Guidelines for coverage-based comparisons of non-adequate test suites,"A fundamental question in software testing research is how to compare test suites, often as a means for comparing test-generation techniques that produce those test suites. Researchers frequently compare test suites by measuring their coverage. A coverage criterion C provides","['M Gligoric', 'A Groce', 'C Zhang', 'R Sharma']",2015,ACM Transactions on Software Engineering and Methodology
Guiding app testing with mined interaction models,"Test generators for graphical user interfaces must constantly choose which UI element to interact with, and how. We guide this choice by mining associations between UI elements and their interactions from the most common applications. Once mined, the resulting UI","['NP Borges', 'M Gómez', 'A Zeller']",2018,Proceedings of the 5th International Conference on Mobile Software Engineering and Systems
Guiding testing effort using mutant utility,"This paper addresses two long-standing goals in software testing: making mutation-based testing practical and software testing overall more effective, predictable, and consistent. To that end, this paper proposes a novel mutation-based approach that guides testing effort","['J Alvin', 'B Kurtz', 'P Ammann']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
HMER: a hybrid mutation execution reduction approach for mutation-based fault localization,"Identifying the location of faults in programs has been recognized as one of the most manually and time cost activities during software debugging process. Fault localization techniques, which seek to identify faulty program statements as quickly as possible, can","['Z Li', 'H Wang', 'Y Liu']",2020,Journal of Systems and Software
Harnessing automated test case generators for GUI testing in industry,"Modern graphical user interfaces (GUIs) are highly dynamic and support multi-touch interactions and screen gestures besides conventional inputs via mouse and keyboard. Hence, the flexibility of modern GUIs enables countless usage scenarios and combinations","['C Klammer', 'R Ramler']",2016,2016 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)
Higher accuracy and lower run time: efficient mutation analysis using non‐redundant mutation operators,"Mutation analysis is a powerful but computationally expensive method to measure the effectiveness of a testing or debugging technique. The high cost is due, in part, to redundant mutants generated by commonly used mutation operators. A mutant is said to be redundant","['R Just', 'F Schweiggert']",2015,"Software Testing, Verification and Reliability"
Higher order mutation testing: A Systematic,"Page 1. See discussions, stats, and author profiles for this publication at: https://www. researchgate.net/publication/318922725 Higher order mutation testing: A Systematic Literature Review Article in Computer Science Review · August 2017 DOI","['A Ghiduk', 'M Girgis']",2017,
Higher order mutation testing: a systematic literature review,"Mutation testing is the process whereby a fault is deliberately inserted into a software system, in order to assess the quality of test data, in terms of its ability to find this fault. Mutation testing is also used as a way to drive the test data development process","['AS Ghiduk', 'MR Girgis', 'MH Shehata']",2017,Computer Science Review
How do assertions impact coverage-based test-suite reduction?,"Code coverage is the dominant criterion in test-suite reduction. Typically, most test-suite reduction techniques repeatedly remove tests covering code that has been covered by other tests from the test suite. However, test-suite reduction based on code coverage alone may","['J Chen', 'Y Bai', 'D Hao', 'L Zhang']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
How do automatically generated unit tests influence software maintenance?,"Generating unit tests automatically saves time over writing tests manually and can lead to higher code coverage. However, automatically generated tests are usually not based on realistic scenarios, and are therefore generally considered to be less readable. This places","['S Shamshiri', 'JM Rojas', 'JP Galeotti']",2018,"2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)"
How do developers test android applications?,Enabling fully automated testing of mobile applications has recently become an important topic of study for both researchers and practitioners. A plethora of tools and approaches have been proposed to aid mobile developers both by augmenting manual testing practices,"['M Linares-Vásquez', 'C Bernal-Cárdenas']",2017,2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)
How do static and dynamic test case prioritization techniques perform on modern software systems? An extensive study on GitHub projects,"Test Case Prioritization (TCP) is an increasingly important regression testing technique for reordering test cases according to a pre-defined goal, particularly as agile practices gain adoption. To better understand these techniques, we perform the first extensive study aimed","['Q Luo', 'K Moran', 'L Zhang']",2018,IEEE Transactions on Software Engineering
How does combinatorial testing perform in the real world: an empirical study,"Studies have shown that combinatorial testing (CT) can be effective for detecting faults in software systems. By focusing on the interactions between different factors of a system, CT shows its potential for detecting faults, especially those that can be revealed only by the","['L Hu', 'WE Wong', 'DR Kuhn', 'RN Kacker']",2020,Empirical Software Engineering
How does regression test prioritization perform in real-world software evolution?,"In recent years, researchers have intensively investigated various topics in test prioritization, which aims to re-order tests to increase the rate of fault detection during regression testing. While the main research focus in test prioritization is on proposing novel prioritization","['Y Lu', 'Y Lou', 'S Cheng', 'L Zhang', 'D Hao', 'Y Zhou']",2016,Proceedings of the 38th International Conference on Software Engineering
How effective are code coverage criteria?,"Code coverage is one of the main metrics to measure the adequacy of a test case/suite. It has been studied a lot in academia and used even more in industry. However, a test case may cover a piece of code (no matter what coverage metric is being used) but miss its faults",['H Hemmati'],2015,"2015 IEEE International Conference on Software Quality, Reliability and Security"
How effective are mutation testing tools? An empirical analysis of Java mutation testing tools with manual analysis and real faults,"Mutation analysis is a well-studied, fault-based testing technique. It requires testers to design tests based on a set of artificial defects. The defects help in performing testing activities by measuring the ratio that is revealed by the candidate tests. Unfortunately","['M Kintis', 'M Papadakis', 'A Papadopoulos']",2018,Empirical Software Engineering
"How far are we from testing a program in a completely automated way, considering the mutation testing criterion at unit level?","Testing is a mandatory activity to guarantee software quality. Not only knowledge about the software under testing is required to generate high-quality test cases, but also knowledge about the business rules implemented in software product to cover more than 80% of its","['FS Araujo', 'AM Rizzo Vincenzi']",2020,19th Brazilian Symposium on Software Quality
How good are my tests?,"Background: Test quality is a prerequisite for achieving production system quality. While the concept of quality is multidimensional, most of the effort in testing context has been channelled towards measuring test effectiveness. Objective: While effectiveness of tests is","['D Bowes', 'T Hall', 'J Petric', 'T Shippey']",2017,2017 IEEE/ACM 8th Workshop on Emerging Trends in Software Metrics (WETSoM)
How good are your types? using mutation analysis to evaluate the effectiveness of type annotations,"Software engineers primarily use two orthogonal means to reduce susceptibility to faults: software testing and static type checking. While many strategies exist to evaluate the effectiveness of a test suite in catching bugs, there are few that evaluate the effectiveness of","['R Gopinath', 'E Walkingshaw']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
"How hard does mutation analysis have to be, anyway?","Mutation analysis is considered the best method for measuring the adequacy of test suites. However, the number of test runs required for a full mutation analysis grows faster than project size, which is not feasible for real-world software projects, which often have more","['R Gopinath', 'A Alipour', 'I Ahmed']",2015,2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)
How test suites impact fault localisation starting from the size,"Although a test suite is indispensable for conducting effective fault localisation, not much work has been done to study how the test suite impacts fault localisation. This study presents a systematic study for a deeper understanding of their relation. Specifically, the authors'","['Y Lei', 'C Sun', 'X Mao', 'Z Su']",2018,IET Software
How the experience of development teams relates to assertion density of test classes,"The impact of developers' experience on several development practices has been widely investigated in the past. One of the most promising research fields is software testing, as many researchers found significant correlations between developers' experience and testing","['G Catolino', 'F Palomba', 'A Zaidman']",2019,2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)
How to kill them all: an exploratory study on the impact of code observability on mutation testing,"Mutation testing is well-known for its efficacy in assessing test quality, and starting to be applied in the industry. However, what should a developer do when confronted with a low mutation score? Should the test suite be plainly reinforced to increase the mutation score, or","['Q Zhu', 'A Zaidman', 'A Panichella']",2021,
How to optimize the use of SAT and SMT solvers for test generation of boolean expressions,"In the context of automatic test generation, the use of propositional satisfiability (SAT) and Satisfiability Modulo Theories (SMT) solvers is becoming an attractive alternative to traditional algorithmic test generation methods, especially when testing Boolean","['P Arcaini', 'A Gargantini', 'E Riccobene']",2015,The Computer Journal
How verified (or tested) is my code? Falsification-driven verification and testing,"Formal verification has advanced to the point that developers can verify the correctness of small, critical modules. Unfortunately, despite considerable efforts, determining if a “verification” verifies what the author intends is still difficult. Previous approaches are difficult","['A Groce', 'I Ahmed', 'C Jensen', 'PE McKenney']",2018,Automated Software Engineering
How well are regular expressions tested in the wild?,"Developers report testing their regular expressions less than the rest of their  code. In this work, we explore how thoroughly tested regular expressions are by examining open  source projects. Using standard metrics of coverage, such as line and branch cov- erage, gives","['P Wang', 'KT Stolee']",2018,Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Hunting for bugs in code coverage tools via randomized differential testing,"Reliable code coverage tools are critically important as it is heavily used to facilitate many quality assurance activities, such as software testing, fuzzing, and debugging. However, little attention has been devoted to assessing the reliability of code coverage tools. In this study","['Y Yang', 'Y Zhou', 'H Sun', 'Z Su', 'Z Zuo']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)
Hybrid is better: Why and how test coverage and software reliability can benefit each other,"Functional, structural and operational testing are three broad categories of software testing methods driven by the product functionalities, the way it is implemented, and the way it is expected to be used, respectively. A large body of the software testing literature is devoted to","['A Bertolino', 'B Miranda', 'R Pietrantuono']",2018,"Lecture Notes in Business Information Processing, Web Information Systems and Technologies"
Hybrid methods for reducing database schema test suites: Experimental insights from computational and human studies,"Given that a relational database is a critical component of many software applications, it is important to thoroughly test the integrity constraints of a database's schema, because they protect the data. Although automated test data generation techniques ameliorate the","['A Alsharif', 'GM Kapfhammer', 'P McMinn']",2020,
Identifikace potenciálně znovupoužitelných částí v neoptimálně strukturovaných automatických testovacích skriptech,"With the growing complexity of current information systems, the testing and quality assurance of these systems also grow in importance. Manual testing proves to be inefficient in a number of cases, and test automation is employed as a logical alternative. Automated",['M Filipský'],2018,
Identifying method-level mutation subsumption relations using Z3,"Context: Mutation analysis is a popular but costly approach to assess the quality of test suites. One recent promising direction in reducing costs of mutation analysis is to identify redundant mutations, ie, mutations that are subsumed by some other mutations. A previous","['R Gheyi', 'M Ribeiro', 'B Souza', 'M Guimaraes']",2021,Information and Software Technology
Identifying mutation subsumption relations,One recent promising direction in reducing costs of mutation analysis is to identify redundant mutations. We propose a technique to discover redundant mutations by proving subsumption relations among method-level mutation operators using weak mutation testing,['B Souza'],2020,Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering
Identifying testing requirements for modified software,"Throughout its lifetime, software must be changed for many reasons, such as bug fixing, performance tuning, and code restructuring. Testing modified software is the main activity performed to gain confidence that changes behave as they are intended and do not have",['T Apiwattanapong'],2007,
Identifying useful mutants to test time properties,"Real-time systems have to be verified and tested for timely behavior as well as functional behavior. Thus, time is an extra dimension that adds to the complexity of software testing. A timed automata model with a model-checker can be used to generate timed test traces. To","['B Lindström', 'J Offutt']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
"If You Can't Kill a Supermutant, You Have a Problem","Quality of software test suites can be effectively and accurately measured using mutation analysis. Traditional mutation involves seeding first and sometimes higher order faults into the program, and evaluating each for detection. However, traditional mutants are often","['R Gopinath', 'B Mathis', 'A Zeller']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Impact of mutation operators on the ratio of equivalent mutants,"Software mutation is a widely used technique of software testing that consists in generating variants of a base program by applying standard modifications to its source code. One of the main obstacles in the use of software mutations is the existence of equivalent mutants, ie","['I Marsit', 'MN Omri', 'JM Loh', 'A Mili']",2018,
Impact of using tools in an undergraduate software testing course supported by wrestt,"Software continues to affect a major part of our daily lives, including the way we use our phones, home appliances, medical devices, and cars. The pervasiveness of software has led to a growing demand for software developers over the next decade. To ensure the high","['PJ Clarke', 'DL Davis', 'R Chang-Lau']",2017,ACM Transactions on Computing Education
Impacts de l'AOP sur les tests dans un environnement Agile: utilisation de Mocks pour les tests unitaires d'aspects,"Bien que l'AOP soit présent dans le paysage informatique depuis quelques années, son adoption industrielle reste relativement timide malgré les bénéfices architecturaux promis et espérés. L'objectif principal de nos travaux est de favoriser l'adoption de l'AOP auprès des",['FA Bourbonnais-Bigras'],2013,
Improving defect detection ability of derived test cases based on mutated UML activity diagrams,"Structure coverage driven test generation is the key approach for automatic testing at source code level. However, the defect detection ability of the generated test cases should be carefully evaluated since the correlation between coverage and test effectiveness is in","['H Sun', 'M Chen', 'M Zhang', 'J Liu']",2016,2016 IEEE 40th Annual Computer Software and Applications Conference (COMPSAC)
Improving effectiveness of automated software testing in the absence of specifications,"Software testing is currently the most widely used method for detecting software failures. When  testing a program, developers need to generate test inputs for the program, run these test inputs  on the program, and check the test execution for correctness. It has been well recognized that",['T Xie'],2005,2006 22nd IEEE International Conference on Software Maintenance
Improving fault detection capability by selectively retaining test cases during test suite reduction,"Software testing is a critical part of software development. As new test cases are generated over time due to software modifications, test suite sizes may grow significantly. Because of time and resource constraints for testing, test suite minimization techniques are needed to","['D Jeffrey', 'N Gupta']",2007,IEEE Transactions on Software Engineering
Improving fault localization for Simulink models using search-based testing and prediction models,"One promising way to improve the accuracy of fault localization based on statistical debugging is to increase diversity among test cases in the underlying test suite. In many practical situations, adding test cases is not a cost-free option because test oracles are","['B Liu', 'S Nejati', 'LC Briand']",2017,"2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)"
Improving generation of object-oriented test suites by avoiding redundant tests,"Object-oriented tests consist of sequences of method invocations. Behavior of an invocation depends on the state of the receiver object and method arguments at the beginning of the invocation. Existing tools for automatic generation of object-oriented test suites, such as Jtest","['T Xie', 'D Marinov', 'D Notkin']",2004,
Improving in-house testing using field execution data,"Software testing is today the most widely used approach for assessing and improving software quality. Despite its popularity, however, software testing has a number of inherent limitations. First, due to resource limitations, in-house tests necessarily exercise only a tiny",['Q Wang'],2019,
Improving mutation testing process of python programs,"Mutation testing helps in evaluation of test suite quality and test development. It can be directed to programs of different languages. High cost of a mutation testing process limits its applicability. This paper focuses on mutation testing of Python programs, discussing several","['A Derezinska', 'K Hałas']",2015,"Software Engineering in Intelligent Systems, Advances in Intelligent Systems and Computing"
Improving mutation testing with dominator mutants,"In a world increasingly driven by software, software testing is an increasingly important topic. Mutation testing is a software testing technique that has been shown to be highly effective in identifying software defects. In mutation testing, engineers or researchers use an automated",['RG Kurtz Jr'],2018,
Improving oracle quality by detecting brittle assertions and unused inputs in tests,"Writing oracles is challenging. As a result, developers often create oracles that check too little, resulting in tests that are unable to detect failures, or check too much, resulting in tests that are brittle and difficult to maintain. In this paper we present a new technique for","['C Huo', 'J Clause']",2014,Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering
Improving readability in automatic unit test generation,"In object-oriented programming, quality assurance is commonly provided through writing unit tests, to exercise the operations of each class. If unit tests are created and maintained manually, this can be a time-consuming and laborious task. For this reason, automatic",['E Daka'],2018,
Improving regression testing efficiency and reliability via test-suite transformations,"As software becomes more important and ubiquitous, high quality software also becomes crucial. Developers constantly make changes to improve software, and they rely on regression testing—the process of running tests after every change—to ensure that changes",['AW Shi'],2020,
Improving software quality for regular expression matching tools using automated combinatorial testing,"Regular expression matching tools (grep) match regular expressions to lines of text. However, because of the complexity that regular expressions can reach, it is challenging to apply state of the art automated testing frameworks to grep tools. Combinatorial testing has",['FA Aldebeyan'],2017,
Improving test coverage measurement for reused software,Test coverage adequacy measures provide a widely used stopping criterion. Engineering of modern software-intensive systems emphasizes reuse. In the case that a program uses reused code or third-party components in a context that is different from the original one,"['B Miranda', 'A Bertolino']",2015,2015 41st Euromicro Conference on Software Engineering and Advanced Applications
Improving test coverage using merged classification tree,"Large scale and complex software systems are becoming more difficult to control, resulting in higher development cost, and difficulties in managing software quality. To ensure software quality, testing has to be done and needs to execute more number of test cases. There are","['B Ramadoss', 'P Prema', 'SR Balasundaram']",2011,Proceedings of the International Conference & Workshop on Emerging Trends in Technology - ICWET '11
Improving the effectiveness of testing pervasive software via,,"['H Wang', 'WK Chan', 'TH Tse']",NA,
Improving the effectiveness of testing pervasive software via context diversity,"Context-aware pervasive software is responsive to various contexts and their changes. A faulty implementation of the context-aware features may lead to unpredictable behavior with adverse effects. In software testing, one of the most important research issues is to","['H Wang', 'WK Chan', 'TH Tse']",2014,ACM Transactions on Autonomous and Adaptive Systems
Improving the quality of automotive test case specifications,Context. Test case specifications are a central element of a structured automotive test process. They contain natural language test cases that are used to perform manual tests in prototype vehicles (entire vehicle test) or as a basis for implementing test scripts (system,['K Juhnke'],2021,
Improving the testing of Profit Software's insurance policy database system,"Profit Software's Profit Life and Pension (PLP) is an investment insurance management system. This means that PLP handles investment insurances from the moment they are sold to when they eventually expire. For a system that handles money, it is important that it can be",['K Nordman'],2017,
Increasing functional coverage by inductive testing: A case study,"This paper addresses the challenge of generating test sets that achieve functional coverage, in the absence of a complete specification. The inductive testing technique works by probing the system behaviour with tests, and using the test results to construct an internal model of","['N Walkinshaw', 'K Bogdanov', 'J Derrick']",2010,"Testing Software and Systems, Lecture Notes in Computer Science"
Increasing system test coverage in production automation systems,"An approach is introduced, which supports a testing technician in the identification of possibly untested behavior of control software of fully integrated automated production systems (aPS). Based on an approach for guided semi-automatic system testing, execution","['S Ulewicz', 'B Vogel-Heuser']",2018,Control Engineering Practice
Incremental control dependency frontier exploration for many-criteria test case generation,Several criteria have been proposed over the years for measuring test suite adequacy. Each criterion can be converted into a specific objective function to optimize with search-based techniques in an attempt to generate test suites achieving the highest possible coverage for,"['A Panichella', 'FM Kifetew', 'P Tonella']",2018,"Search-Based Software Engineering, Lecture Notes in Computer Science"
Inferring mutant utility from program context,"Existing mutation techniques produce vast numbers of equivalent, trivial, and redundant mutants. Selective mutation strategies aim to reduce the inherent redundancy of full mutation analysis to obtain most of its benefit for a fraction of the cost. Unfortunately, recent research","['R Just', 'B Kurtz', 'P Ammann']",2017,Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis
Influencing factors in model-based testing with UML state machines: report on an industrial cooperation,"Automatic model-based test generation is influenced by many factors such as the test generation algorithm, the structure of the used test model, and the applied coverage criteria. In this paper, we report on an industrial cooperation for model-based testing: We used a",['S Weißleder'],2009,"Model Driven Engineering Languages and Systems, Lecture Notes in Computer Science"
Infrastructure support for controlled experimentation with software testing and regression testing techniques,"Where the creation, understanding, and assessment of software testing and regression testing techniques are concerned, controlled experimentation is an indispensable research methodology. Obtaining the infrastructure necessary to support such experimentation","['H Do', 'S Elbaum', 'G Rothermel']",2004,"Proceedings. 2004 International Symposium on Empirical Software Engineering, 2004. ISESE '04."
Input-driven active testing of multi-threaded programs,"It is still a challenge to select"" good"" test inputs for concurrent programs within limited testing resources. We present in this paper a test case diversity metric for multi-threaded programs, which evaluates a test input with its effect in exposing concurrent thread interactions. We","['H Yue', 'P Wu', 'TY Chen', 'Y Lv']",2015,2015 Asia-Pacific Software Engineering Conference (APSEC)
Intelligent evaluation of test suites for developing efficient and reliable software,"Test suites play an important role in developing reliable software applications. Generally, the behaviour of software applications is verified by executing test suites to find defects. The quality of a test suite needs to be evaluated and enriched (if needed) especially for testing","['M Mohammadian', 'Z Javed']",2021,"International Journal of Parallel, Emergent and Distributed Systems"
Interaktywne testowanie mutacyjne w procesie tworzenia oprogramowania w środowisku Visual Studio,"Testowanie mutacyjne to technika pomiaru jakości i pomocy w rozwoju zestawu testów dla aplikacji. Swoje działanie opiera na tworzeniu i testowaniu mutantów–zmodyfikowanych wersji oryginalnego programu zawierających błędy–w celu sprawdzenia, jaką część błędów",['P Trzpil'],NA,
Interpreting coverage information using direct and indirect coverage,"Because of the numerous benefits of tests, developers often wish their applications had more tests. Unfortunately, it is challenging to determine what new tests to add in order to improve the quality of the test suite. A number of approaches, including numerous coverage","['C Huo', 'J Clause']",2016,"2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Introduction du test dans la modélisation par aspects,"In Model-Driven Software Development (MDSD), models represent views of software at different levels of abstraction and transformations specify refinements from one level of abstraction to another. Aspect Oriented Modelling (AOM) complements MDSD by extending","['J Klein', 'B Baudry', 'O Barais', 'A Jackson']",2007,
Introduction to software testing,"This extensively classroom-tested text takes an innovative approach to explaining software testing that defines it as the process of applying a few precise, general-purpose criteria to a structure or model of the software. The book incorporates cutting-edge developments","['P Ammann', 'J Offutt']",2016,
Investigate the matrix: leveraging variability to specialize software and test suites,"People are nowadays more and more demanding regarding the characteristics of their software. They want software to be efficient, fast to execute and sometimes even able to optimize several different aspects at once. In the meantime, software are taking evermore",['P Temple'],2018,
Investigating faults missed by test suites achieving high code coverage,"Code coverage criteria are commonly used to determine the adequacy of a test suite. However, studies investigating code coverage and fault-finding capabilities have mixed results. Some studies have shown that creating test suites to satisfy coverage criteria has a","['A Schwartz', 'D Puckett', 'Y Meng', 'G Gay']",2018,Journal of Systems and Software
Investigating the correlation between mutation score and coverage score,Strong test suites ensure the correctness and quality of software. Coverage and Mutation score are widespread metrics for evaluating the quality of a test suite. Mutation analysis process improves a test suite to obtain higher coverage scores. We investigate the,"['B Assylbekov', 'E Gaspar', 'N Uddin']",2013,2013 UKSim 15th International Conference on Computer Modelling and Simulation
Investigating the impact of development task on external quality in test-driven development: An industry experiment,"Reviews on test-driven development (TDD) studies suggest that the conflicting results reported in the literature are due to unobserved factors, such as the tasks used in the experiments, and highlight that there are very few industry experiments conducted with","['A Tosun', 'O Dieste', 'S Vegas', 'D Pfahl']",2019,IEEE Transactions on Software Engineering
Is mutation an appropriate tool for testing experiments?,"The empirical assessment of test techniques plays an important role in software testing research. One common practice is to instrument faults, either manually or by using mutation operators. The latter allows the systematic, repeatable seeding of large numbers of faults;","['JH Andrews', 'LC Briand', 'Y Labiche']",2005,"Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005."
Is mutation score a fair metric?,"Comparing the mutation scores achieved for test suites, one is able to judge which test suite is more effective. However, it is not known if the mutation score is a fair metric to do such comparison. In this paper, we present an empirical study, which compares developer-written",['B Souza'],2019,"Proceedings Companion of the 2019 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity"
Is neuron coverage a meaningful measure for testing deep neural networks?,"Recent effort to test deep learning systems has produced an intuitive and compelling test criterion called neuron coverage (NC), which resembles the notion of traditional code coverage. NC measures the proportion of neurons activated in a neural network and it is","['F Harel-Canada', 'L Wang', 'MA Gulzar', 'Q Gu']",2020,Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Is search-based unit test generation research stuck in a local optimum?,"Research in search-based unit test generation has seen steady development in recent years. New techniques and tools have been developed, and empirical evidence has been collected on the wide-ranging capabilities of search-based algorithms for unit test","['JM Rojas', 'G Fraser']",2017,2017 IEEE/ACM 10th International Workshop on Search-Based Software Testing (SBST)
Is the stack distance between test case and method correlated with test effectiveness?,"Mutation testing is a means to assess the effectiveness of a test suite and its outcome is considered more meaningful than code coverage metrics. However, despite several optimizations, mutation testing requires a significant computational effort and has not been","['R Niedermayr', 'S Wagner']",2019,Proceedings of the Evaluation and Assessment on Software Engineering
Is this a bug or an obsolete test?,"In software evolution, developers typically need to identify whether the failure of a test is due to a bug in the source code under test or the obsoleteness of the test code when they execute a test suite. Only after finding the cause of a failure can developers determine","['D Hao', 'T Lan', 'H Zhang', 'C Guo', 'L Zhang']",2013,"ECOOP 2013 – Object-Oriented Programming, Lecture Notes in Computer Science"
Isomorphic regression testing: executing uncovered branches without test augmentation,"In software testing, it is very hard to achieve high coverage with the program under test, leaving many behaviors unexplored. To alleviate this problem, various automated test generation and augmentation approaches have been proposed, among which symbolic","['J Zhang', 'Y Lou', 'L Zhang', 'D Hao', 'L Zhang']",2016,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering
Jat: A test automation framework for multi-agent systems,"Automated tests have been widely used as a supporting mechanism during software development and maintenance activities. It improves the confidence on software releases as it seeks to uncover regression bugs, and serves as a live documentation which is very useful","['R Coelho', 'E Cirilo', 'U Kulesza']",2007,2007 IEEE International Conference on Software Maintenance
Java unit testing tool competition-fifth round,"After four successful JUnit tool competitions, we report on the achievements of a new Java Unit Testing Tool Competition. This 5th contest introduces statistical analyses in the benchmark infrastructure and has been validated with significance against the results of the","['A Panichella', 'UR Molina']",2017,2017 IEEE/ACM 10th International Workshop on Search-Based Software Testing (SBST)
Java unit testing tool competition-sixth round,We report on the advances in this sixth edition of the JUnit tool competitions. This year the contest introduces new benchmarks to assess the performance of JUnit testing tools on different types of real-world software projects. Following on the statistical analyses from the,"['UR Molina', 'F Kifetew']",2018,
KD-ART: Should we intensify or diversify tests to kill mutants?,"Context: Adaptive Random Testing (ART) spreads test cases evenly over the input domain. Yet once a fault is found, decisions must be made to diversify or intensify subsequent inputs. Diversification employs a wide range of tests to increase the chances of","['M Patrick', 'Y Jia']",2017,Information and Software Technology
Kernel density adaptive random testing,"Mutation analysis is used to assess the effectiveness of a test data generation technique at finding faults. Once a mutant is killed, decisions must be made whether to diversify or intensify the subsequent test inputs. Diversification employs a wide range of test inputs with","['M Patrick', 'Y Jia']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Killing stubborn mutants with symbolic execution,"We introduce SEMu, a Dynamic Symbolic Execution technique that generates test inputs capable of killing stubborn mutants (killable mutants that remain undetected after a reasonable amount of testing). SEMu aims at mutant propagation (triggering erroneous","['TT Chekam', 'M Papadakis', 'M Cordy']",2021,ACM Transactions on Software Engineering and Methodology
L3. 4: Etude de réduction de suites de tests,,"['T Triki', 'L du-Bousquet', 'Y Ledru']",NA,
Learning from super-mutants: searching post-apocalyptic software ecosystems for novel semantics-preserving transforms,"In light of recent advances in genetic-algorithm-driven automated program modification, our team has been actively exploring the art, engineering, and discovery of novel semantics-preserving transforms. While modern compilers represent some of the best ideas we have","['J Landsborough', 'S Harding', 'S Fugate']",2017,
Leveraging existing tests in automated test generation for web applications,"To test web applications, developers currently write test cases in frameworks such as Selenium. On the other hand, most web test generation techniques rely on a crawler to explore the dynamic states of the application. The first approach requires much manual","['A Milani Fard', 'M Mirzaaghaei', 'A Mesbah']",2014,Proceedings of the 29th ACM/IEEE international conference on Automated software engineering
Leveraging keyword-guided exploration to build test models for web applications,"Context Dynamic exploration techniques, which automatically exercise possible user interface elements, have been used to explore user interface state flow graphs as test models for web applications. An exhaustive exploration may incur the well-known state","['XF Qi', 'YL Hua', 'P Wang', 'ZY Wang']",2019,Information and Software Technology
"Life sciences-inspired test case similarity measures for search-based, FSM-based software testing","Researchers and practitioners alike have the intuition that test cases diversity is positively correlated to fault detection. Empirical results already show that some measurement of diversity within a pre-existing state-based test suite (ie, a test suite not necessarily created to","['N Asoudeh', 'Y Labiche']",2018,"Modelling Foundations and Applications, Lecture Notes in Computer Science"
Lightweight assessment of test-case effectiveness using source-code-quality indicators,"Test cases are crucial to help developers preventing the introduction of software faults. Unfortunately, not all the tests are properly designed or can effectively capture faults in production code. Some measures have been defined to assess test-case effectiveness: the","['G Grano', 'F Palomba', 'HC Gall']",2019,IEEE Transactions on Software Engineering
Lightweight lexical test prioritization for immediate feedback,"The practice of unit testing enables programmers to obtain automated feedback on whether a currently edited program is consistent with the expectations specified in test cases. Feedback is most valuable when it happens immediately, as defects can be corrected","['T Mattis', 'R Hirschfeld']",2020,"The Art, Science, and Engineering of Programming"
LittleDarwin: a feature-rich and extensible mutation testing framework for large and complex Java systems,"Mutation testing is a well-studied method for increasing the quality of a test suite. We designed LittleDarwin as a mutation testing framework able to cope with large and complex Java software systems, while still being easily extensible with new experimental","['A Parsai', 'A Murgia', 'S Demeyer']",2017,"Fundamentals of Software Engineering, Lecture Notes in Computer Science"
Location pairs: a test coverage metric for shared-memory concurrent programs,"We present a coverage metric targeted at shared-memory concurrent programs: the Location Pairs (LP) coverage metric. The goals of this metric are (i) to measure how thoroughly a program has been tested from a concurrency standpoint, ie, whether enough","['S Tasiran', 'ME Keremoğlu', 'K Muşlu']",2012,Empirical Software Engineering
MAP-Coverage: a novel coverage criterion for testing thread-safe classes,"Concurrent programs must be thoroughly tested, as concurrency bugs are notoriously hard to detect. Code coverage criteria can be used to quantify the richness of a test suite (eg, whether a program has been tested sufficiently) or provide practical guidelines on test case","['Z Wang', 'Y Zhao', 'S Liu', 'J Sun']",2019,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)
MC/DC coverage measurement of C programs,,['EA Gerlits'],NA,
MEDIC: A static analysis framework for equivalent mutant identification,"Context: The equivalent mutant problem is a well-known impediment to the adoption of mutation testing in practice. In consequence of its undecidable nature, a complete automated solution is unattainable. To worsen the situation, the manual analysis of the","['M Kintis', 'N Malevris']",2015,Information and Software Technology
MS-guided many-objective evolutionary optimisation for test suite minimisation,Test suite minimisation is a process that seeks to identify and then eliminate the obsolete or redundant test cases from the test suite. It is a trade-off between cost and other value criteria and is appropriate to be described as a many-objective optimisation problem. This study,"['W Zheng', 'X Wu', 'S Cao', 'J Lin']",2018,IET Software
Machine learning applied to software testing: A systematic mapping study,"Software testing involves probing into the behavior of software systems to uncover faults. Most testing activities are complex and costly, so a practical strategy that has been adopted to circumvent these issues is to automate software testing. There has been a growing","['VHS Durelli', 'RS Durelli', 'SS Borges']",2019,
"Machine learning testing: Survey, landscapes and horizons","This paper provides a comprehensive survey of Machine Learning Testing (ML testing) research. It covers 138 papers on testing properties (eg, correctness, robustness, and fairness), testing components (eg, the data, learning program, and framework), testing","['JM Zhang', 'M Harman', 'L Ma']",2020,IEEE Transactions on Software Engineering
Mahtab: Phase-wise acceleration of regression testing for C,"Software regression testing consists of offline, online, and execution phases which are executed sequentially. The offline phase involves code instrumentation and test-coverage collection. Subsequently, the online phase performs program differencing, test-suite","['S Mondal', 'R Nasre']",2019,Journal of Systems and Software
Mapeamento e aplicação de testes estatísticos em engenharia de software,"RESUMO A Engenharia de Software costuma desenvolver e indicar o uso de diferentes ferramentas para construção de uma solução computacional. Além disso, um dos objetivos da área é a busca pela melhoria dos processos. Através da compreensão e da modificação",['MNP Detoni'],2020,
Maple: A coverage-driven testing tool for multithreaded programs,"Testing multithreaded programs is a hard problem, because it is challenging to expose those rare interleavings that can trigger a concurrency bug. We propose a new thread interleaving coverage-driven testing tool called Maple that seeks to expose untested thread","['J Yu', 'S Narayanasamy', 'C Pereira']",2012,
"Massively parallel, highly efficient, but what about the test suite quality? applying mutation testing to gpu programs","Thanks to rapid advances in programmability and performance, GPUs have been widely applied in High-Performance Computing (HPC) and safety-critical domains. As such, quality assurance of GPU applications has gained increasing attention. This brings us to mutation","['Q Zhu', 'A Zaidman']",2020,"2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)"
Matrix: Maintenance-oriented testing requirements identifier and examiner,This paper presents a new test-suite augmentation technique for use in regression testing of software. Our technique combines dependence analysis and symbolic evaluation and uses information about the changes between two versions of a program to (1) identify parts of the,"['T Apiwattanapong', 'R Santelices']",2006,Testing: Academic & Industrial Conference - Practice And Research Techniques (TAIC PART'06)
Mdroid+: A mutation testing framework for android,"Mutation testing has shown great promise in assessing the effectiveness of test suites while exhibiting additional applications to test-case generation, selection, and prioritization. Traditional mutation testing typically utilizes a set of simple language specific source code","['K Moran', 'M Tufano', 'C Bernal-Cárdenas']",2018,
Measuring effectiveness of mutant sets,"Redundancy in mutants, where multiple mutants end up producing the same semantic variant of a program, is a major problem in mutation analysis. Hence, a measure of effectiveness that accounts for redundancy is an essential tool for evaluating mutation tools","['R Gopinath', 'A Alipour', 'I Ahmed']",2016,"2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Measuring effectiveness of sample-based product-line testing,"Recent research on quality assurance (QA) of configurable software systems (eg, software product lines) proposes different analysis strategies to cope with the inherent complexity caused by the well-known combinatorial-explosion problem. Those strategies aim at","['S Ruland', 'L Luthmann', 'J Bürdek', 'S Lity']",2018,
Measuring software testability modulo test quality,"Comprehending the degree to which software components support testing is important to accurately schedule testing activities, train developers, and plan effective refactoring actions. Software testability estimates such property by relating code characteristics to the test effort","['V Terragni', 'P Salza', 'M Pezzè']",2020,Proceedings of the 28th International Conference on Program Comprehension
Measuring the diversity of a test set with distance entropy,"Most existing metrics that we call white-box metrics, such as coverage metrics, require white-box information, like program structure information, and historical runtime information, to evaluate the fault detection capability of a test set. In practice, such white-box information is","['Q Shi', 'Z Chen', 'C Fang', 'Y Feng']",2015,IEEE Transactions on Reliability
Measuring the multiple-condition coverage with test suites for AspectJ programs,,['A Zanderink'],NA,
Measuring unit test accuracy,"Unit testing is widely adopted in software development to automate verification of individual functions. Likewise, computer science curricula are increasing their emphasis on teaching unit testing skills. However, coverage and other measurements of test quality have","['K Buffardi', 'P Valdivia', 'D Rogers']",2019,Proceedings of the 50th ACM Technical Symposium on Computer Science Education
Memory mutation testing,"Context Three decades of mutation testing development have given software testers a rich set of mutation operators, yet relatively few operators can target memory faults (as we demonstrate in this paper). Objective To address this shortcoming, we introduce Memory","['F Wu', 'J Nanavati', 'M Harman', 'Y Jia', 'J Krinke']",2017,
Metallaxis‐FL: mutation‐based fault localization,Fault localization methods seek to identify faulty program statements based on the information provided by the failing and passing test executions. Spectrum‐based methods are among the most popular ones and assist programmers by assigning suspiciousness,"['M Papadakis', 'Y Le Traon']",2015,"Software Testing, Verification and Reliability"
Mimicking user behavior to improve in-house test suites,"Testing is today the most widely used software quality assurance approach. However, it is well known that the necessarily limited number of tests developed and run in-house are not representative of the rich variety of user executions in the field. In order to bridge this gap","['Q Wang', 'A Orso']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Mining historical test logs to predict bugs and localize faults in the test logs,"Software testing is an integral part of modern software development. However, test runs can produce thousands of lines of logged output that make it difficult to find the cause of a fault in the logs. This problem is exacerbated by environmental failures that distract from product","['A Amar', 'PC Rigby']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)
Mitigating the effects of equivalent mutants with mutant classification strategies,"Mutation Testing has been shown to be a powerful technique in detecting software faults. Despite this advantage, in practice there is a need to deal with the equivalent mutants' problem. Automatically detecting equivalent mutants is an undecidable problem. Therefore","['M Papadakis', 'M Delamaro', 'Y Le Traon']",2014,Science of Computer Programming
Mitigating the effects of flaky tests on mutation testing,"Mutation testing is widely used in research as a metric for evaluating the quality of test suites. Mutation testing runs the test suite on generated mutants (variants of the code under test), where a test suite kills a mutant if any of the tests fail when run on the mutant. Mutation","['A Shi', 'J Bell', 'D Marinov']",2019,Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis
Model transformation impact on test artifacts: An empirical study,"Development environments that support Model-Driven Development often focus on model-level functional testing, enabling verification of design models against their specifications. However, developers of safety-critical software systems are also required to show that tests","['A Eriksson', 'B Lindström', 'SF Andler', 'J Offutt']",2012,
Model-based mutant equivalence detection using automata language equivalence and simulations,"Mutation analysis is a popular technique for assessing the strength of test suites. It relies on the mutation score, which indicates their fault-revealing potential. Yet, there are mutants whose behaviour is equivalent to the original system, wasting analysis resources and","['X Devroey', 'G Perrouin', 'M Papadakis', 'A Legay']",2018,Journal of Systems and Software
Model-based mutation operators for timed systems: a taxonomy and research agenda,"Mutation testing relies on the principle of artificially injecting faults in systems to create mutants, in order to either assess the sensitivity of existing test suites, or generate test cases that are able to find real faults. Mutation testing has been employed in a variety of","['JJO Vega', 'G Perrouin', 'M Amrani']",2018,"2018 IEEE International Conference on Software Quality, Reliability and Security (QRS)"
"Model-based testing of NASA's GMSEC, a reusable framework for ground system software","We present an empirical study in which model-based testing (MBT) was applied to the software bus of NASA's Goddard Mission Service Evolution Center (GMSEC), a reusable software framework. The goal was to study the feasibility of using MBT on a real-world","['V Gudmundsson', 'C Schulze', 'D Ganesan']",2015,Innovations in Systems and Software Engineering
Model-based testing of flexible systems,"We present an empirical study in which model-based testing (MBT) was applied to two different flexible systems. Namely, the software bus of NASA's Goddard Mission Service Evolution Center (GMSEC), a reusable software framework used in several NASA missions",['VÖ Guðmundsson'],2015,
Model-based testing of measurement devices using a domain-specific modelling language,"The practice of model-based testing finds increasing application in industry, due to its potential to cope with the ever rising complexity of technical systems. For this reason, the AVL List GmbH is introducing a model-based testing methodology for the application to its",['C Burghard'],2018,
"Model-based, mutation-driven test-case generation via heuristic-guided branching search","This work introduces a heuristic-guided branching search algorithm for model-based, mutation-driven test-case generation. The algorithm is designed towards the efficient and computationally tractable exploration of discrete, non-deterministic models with huge state","['A Fellner', 'W Krenn', 'R Schlick', 'T Tarrach']",2019,ACM Transactions on Embedded Computing Systems
Modeling readability to improve unit tests,"Writing good unit tests can be tedious and error prone, but even once they are written, the job is not done: Developers need to reason about unit tests throughout software development and evolution, in order to diagnose test failures, maintain the tests, and to","['E Daka', 'J Campos', 'G Fraser', 'J Dorn']",2015,Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering
Model‐based security testing: a taxonomy and systematic classification,"Model‐based security testing relies on models to test whether a software system meets its security requirements. It is an active research field of high relevance for industrial applications, with many approaches and notable results published in recent years. This","['M Felderer', 'P Zech', 'R Breu', 'M Büchler']",2016,"Software Testing, Verification and Reliability"
Most higher mutants are useless for method-level mutation operators using weak mutation.,"Mutation analysis is a popular but costly approach to assess the quality of test suites. One of the attempts to reduce the costs associated to mutation analysis is to identify subsuming higher order mutants (HOMs), ie, mutants that are harder to kill than the first order mutants",['BB SOUZA'],2020,
Mrdb: A multi-user real-time database testbed,"Transactions in real-time database systems should be scheduled considering both data consistency and timing constraints. In addition, a real-time database must adapt to changes in the operating environment and guarantee the completion of critical tasks. The effects of",['YK Kim'],1994,Proceedings of the Twenty-Seventh Hawaii International Conference on System Sciences HICSS-94
MuAlloy: an automated mutation system for alloy,"Mutation is a powerful technique that researchers have studied for several decades in the context of imperative code. For example, mutation testing is commonly considered a'"" gold standard""'for test suite quality. Mutation in the context of declarative languages is a less",['K Wang'],2015,
MuDroid: Mutation testing for Android apps,"With the raising of smartphones, mobile apps become an new emerging paradigm in software development. With 3.4 billion smartphone subscription, the quality of mobile apps become a crucial problem which lead to the need of novel and high quality testing",['Y Wei'],2015,
MuRanker: a mutant ranking tool,Mutation testing is a fault‐based software testing technique in which a large number of mutants are generated in order to assess the adequacy of test cases devised. One of the daunting problems in this area consists in determining whether a mutant can be killed by a,"['AS Namin', 'X Xue', 'O Rosas']",2015,"Software Testing, Verification and Reliability"
MuVM: Higher order mutation analysis virtual machine for C,Mutation analysis is a method for evaluating the effectiveness of a test suite by seeding faults artificially and measuring the fraction of seeded faults detected by the test suite. The major limitation of mutation analysis is its lengthy execution time because it involves,"['S Tokumoto', 'H Yoshida', 'K Sakamoto']",2016,"2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Mucheck: An extensible tool for mutation testing of haskell programs,"This paper presents MuCheck, a mutation testing tool for Haskell programs. MuCheck is a counterpart to the widely used QuickCheck random testing tool for functional programs, and can be used to evaluate the efficacy of QuickCheck property definitions. The tool implements","['D Le', 'MA Alipour', 'R Gopinath', 'A Groce']",2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
Multi-objective black-box test case selection for cost-effectively testing simulation models,"In many domains, engineers build simulation models (eg, Simulink) before developing code to simulate the behavior of complex systems (eg, Cyber-Physical Systems). Those models are commonly heavy to simulate which makes it difficult to execute the entire test suite","['A Arrieta', 'S Wang', 'A Arruabarrena', 'U Markiegi']",2018,Proceedings of the Genetic and Evolutionary Computation Conference
Multi-objective integer programming approaches for solving the multi-criteria test-suite minimization problem: Towards sound and complete solutions of a particular …,"Test-suite minimization is one key technique for optimizing the software testing process. Due to the need to balance multiple factors, multi-criteria test-suite minimization (MCTSM) becomes a popular research topic in the recent decade. The MCTSM problem is typically","['Y Xue', 'YF Li']",2020,
Multi-objective search-based mobile testing,"Despite the tremendous popularity of mobile applications, mobile testing still relies heavily on manual testing. This thesis presents mobile test automation approaches based on multi-objective search. We introduce three approaches: Sapienz (for native Android app testing)",['K Mao'],2017,
Musc: A tool for mutation testing of ethereum smart contract,"The smart contract cannot be modified when it has been deployed on a blockchain. Therefore, it must be given thorough test before its being deployed. Mutation testing is considered as a practical test methodology to evaluate the adequacy of software testing. In","['Z Li', 'H Wu', 'J Xu', 'X Wang', 'L Zhang']",2019,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Mutant reduction based on dominance relation for weak mutation testing,"Context: As a fault-based testing technique, mutation testing is effective at evaluating the quality of existing test suites. However, a large number of mutants result in the high computational cost in mutation testing. As a result, mutant reduction is of great importance to","['D Gong', 'G Zhang', 'X Yao', 'F Meng']",2017,Information and Software Technology
Mutantdistiller: Using symbolic execution for automatic detection of equivalent mutants and generation of mutant killing tests,"Mutation testing can be used to measure the quality of a given test suite. But two flaws prevent wide acceptance. First, there are equivalent mutants-mutants that are semantically equivalent to the unmodified version and therefore unkillable. Manually identifying those","['M Baer', 'N Oster', 'M Philippsen']",2020,"2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Mutapk: Source-codeless mutant generation for android apps,"The amount of Android application is having a tremendous increasing trend, exerting pressure over practitioners and researchers around application quality, frequent releases, and quick fixing of bugs. This pressure leads practitioners to make usage of automated","['C Escobar-Velásquez', 'M Osorio-Riaño']",2019,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Mutasyon bazlı yazılım testlerinin iyileştirilmesi için bir yaklaşım,"Mutasyon testi, hataları ortaya çıkarmak ve tespit etmek için etkili olduğu bilinen bir tür beyaz kutu testidir. Hata tespitinde test kümesinin yeterliliğini değerlendirmek için tasarlanmış en güçlü tekniklerden biridir. Bununla birlikte, mutasyon testi, yüksek sayıda mutant",['MA Warsame'],NA,
Mutation analysis for system of systems policy testing,"A System of Systems (SoS) is a set of the constituent systems (CS) which has managerial and operational independence. To address an SoS-level goal that cannot be satisfied by each CS, an SoS policy guides or forces the CSs to collaborate with each other. If there is a","['W Yun', 'D Shin', 'DH Bae']",2017,"2017 IEEE/ACM Joint 5th International Workshop on Software Engineering for Systems-of-Systems and 11th Workshop on Distributed Software Development, Software Ecosystems and Systems-of-Systems (JSOS)"
Mutation based test generation using search based social group optimization approach,Mutation based test generation is a popular and effective process for creating the test suite that is appraised for its caliber over a pool of artificial faults. These artificial faults can be infused by imposing mutagenic rules that further assist meta-heuristic techniques for,"['S Rani', 'B Suri']",2021,Evolutionary Intelligence
Mutation integration testing,"In integration testing, integrated software modules or components are evaluated as a whole to determine if they behave correctly. Mutation testing is recognized as one of the strongest approaches for evaluating the effectiveness of test suites, and it is important to generate","['M Grechanik', 'G Devanla']",2016,
Mutation reduction in software mutation testing using firefly optimization algorithm,"Purpose For delivering high-quality software applications, proper testing is required. A software test will function successfully if it can find more software faults. The traditional method of assessing the quality and effectiveness of a test suite is mutation testing. One of","['N Shomali', 'B Arasteh']",2020,Data Technologies and Applications
"Mutation score, coverage, model inference: Quality assessment for t-way combinatorial test-suites","In this paper we assess and evaluate the quality of t-way combinatorial test-suites using three different test-suite quality assessment methods. As t-way combinatorial test-suites reduce the input space of a program under test, we investigate how an increasing t affects","['H Felbinger', 'F Wotawa', 'M Nica']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Mutation testing advances: an analysis and survey,"Mutation testing realizes the idea of using artificial defects to support testing activities. Mutation is typically used as a way to evaluate the adequacy of test suites, to guide the generation of test cases, and to support experimentation. Mutation has reached a maturity","['M Papadakis', 'M Kintis', 'J Zhang', 'Y Jia', 'Y Le Traon']",2019,Advances in Computers
Mutation testing and self/peer assessment: analyzing their effect on students in a software testing course,"Testing is a crucial activity in the development of software systems. With the increasing complexity of software projects, the industry requires incorporating graduates with adequate testing skills and preparation in this field. A challenge in software testing education is to","['P Delgado-Pérez', 'I Medina-Bulo']",2021,2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
Mutation testing and test data generation approaches: A review,"Software advancement has increased the complexities many fold and to meet the quality standards, a lot of research is being done in designing new testing methodologies and tools. Mutation testing is a proven effective technique but the high cost attached with it averts it","['M Dave', 'R Agrawal']",2016,
Mutation testing approach to negative testing,"Negative testing deals with an important problem of assessing a system ability to handle unexpected situations. Such situations, if unhandled, may lead to system failures that in some cases can have catastrophic consequences. This paper presents a mutation testing",['J Strug'],2016,Journal of Engineering
Mutation testing as a safety net for test code refactoring,"Refactoring is an activity that improves the internal structure of the code without altering its external behavior. When performed on the production code, the tests can be used to verify that the external behavior of the production code is preserved. However, when the","['A Parsai', 'A Murgia', 'QD Soetens']",2015,Scientific Workshop Proceedings of the XP2015
Mutation testing cost reduction by clustering overlapped mutants,"Mutation testing is a powerful but computationally expensive testing technique. Several approaches have been developed to reduce the cost of mutation testing by decreasing the number of mutants to be executed; however, most of these approaches are not as effective","['YS Ma', 'SW Kim']",2016,Journal of Systems and Software
Mutation testing for DSLs (tool demo),"Mutation testing (MT) is a well-known technique to evaluate and improve the quality of a given test-suite. While several MT tools exist for traditional programming languages, there is no common method to take advantage of MT in the case of domain-specific languages","['P Gómez-Abajo', 'E Guerra', 'J de Lara']",2019,Proceedings of the 17th ACM SIGPLAN International Workshop on Domain-Specific Modeling
Mutation testing for aspect-oriented programs,"Mutation testing has been shown to be one of the strongest testing criteria for the evaluation of both programs and test suites. Comprehensive sets of mutants require strong test sets to achieve acceptable testing coverage. Moreover, mutation operators are valuable for the","['FC Ferrari', 'JC Maldonado']",2008,
Mutation testing for ethereum smart contract,"Smart contract is a special program that manages digital assets on blockchain. It is difficult to recover the loss if users make transactions through buggy smart contracts, which cannot be directly fixed. Hence, it is important to ensure the correctness of smart contracts before","['H Wu', 'X Wang', 'J Xu', 'W Zou', 'L Zhang']",2019,
Mutation testing in practice using ruby,"Mutation testing is an effective testing technique to detect faults and improve code quality. However, few practitioners have adopted mutation testing into practice, which raises several questions: Are tests capable of killing mutants useful? What is the main hindrance to","['N Li', 'M West', 'A Escalona']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Mutation testing meets approximate computing,"One of the most widely studied techniques in software testing research is mutation testing-a technique for evaluating the quality of test suites. Despite over four decades of academic advances in this technique, mutation testing has not found its way to mainstream","['M Gligoric', 'S Khurshid', 'S Misailovic']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering: New Ideas and Emerging Technologies Results Track (ICSE-NIER)
Mutation testing of functional programming languages,Mutation testing has been widely studied in imperative programming languages. The rising popularity of functional languages and the adoption of functional idioms in traditional languages (eg lambda expressions) requires a new set of studies for evaluating the,"['D Le', 'MA Alipour', 'R Gopinath', 'A Groce']",2014,
Mutation testing of smart contracts at scale,"It is crucial that smart contracts are tested thoroughly due to their immutable nature. Even small bugs in smart contracts can lead to huge monetary losses. However, testing is not enough; it is also important to ensure the quality and completeness of the tests. There are","['P Hartel', 'R Schumi']",2020,
Mutation testing strategies using mutant classification,"Mutation testing has a widespread reputation of being a rather powerful testing technique. However, its practical application requires the detection of equivalent mutants. Detecting equivalent mutants is cumbersome since it requires manual analysis, resulting in","['M Papadakis', 'Y Le Traon']",2013,Proceedings of the 28th Annual ACM Symposium on Applied Computing - SAC '13
Mutation testing techniques: A comparative study,"Testing is a very crucial phase in any software development, in which various testing techniques are used with the intent of finding software defects. Different approaches have been suggested to effectively accomplish an application testing, and testers shall choose the","['S Hamimoune', 'B Falah']",2016,2016 International Conference on Engineering & MIS (ICEMIS)
Mutation testing with hyperproperties,We present a new method for model-based mutation-driven test case generation. Mutants are generated by making small syntactical modifications to the model or source code of the system under test. A test case kills a mutant if the behavior of the mutant deviates from the,"['A Fellner', 'MT Befrouei', 'G Weissenbacher']",2021,"Software Engineering and Formal Methods, Lecture Notes in Computer Science"
Mutation testing: from theory to practice,"The cost of software faults has increased from 59 billion USD in 2002 to 1.7 trillion USD in 2017. To alleviate this cost, the consensus among software engineers is to test as early and as often as possible. This, however, is not adopted by many software development teams",['A Parsai'],2019,
Mutation-based test generation for plc embedded software using model checking,"Testing is an important activity in engineering of industrial embedded software. In certain application domains (eg, railway industry) engineering software is certified according to safety standards that require extensive software testing procedures to be applied for the","['EP Enoiu', 'D Sundmark', 'A Čaušević', 'R Feldt']",2016,"Testing Software and Systems, Lecture Notes in Computer Science"
Mutation-based test-case prioritization in software evolution,"During software evolution, to assure the software quality, test cases for an early version tend to be reused by its latter versions. As a large number of test cases may aggregate during software evolution, it becomes necessary to schedule the execution order of test cases so","['Y Lou', 'D Hao', 'L Zhang']",2015,2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)
Mutode: generic javascript and node. js mutation testing tool,Mutation testing is a technique in which faults (mutants) are injected into a program or application to assess its test suite effectiveness. It works by inserting mutants and running the application's test suite to identify if the mutants are detected (killed) or not (survived) by,"['D Rodríguez-Baquero', 'M Linares-Vásquez']",2018,Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis
Mutually enhancing test generation and specification inference,Generating effective tests and inferring likely program specifications are both difficult and costly problems. We propose an approach in which we can mutually enhance the tests and specifications that are generated by iteratively applying each in a feedback loop. In,"['T Xie', 'D Notkin']",2003,"Formal Approaches to Software Testing, Lecture Notes in Computer Science"
Mythical unit test coverage,"It is a continuous struggle to understand how much a product should be tested before its delivery to the market. Ericsson, as a global software development company, decided to evaluate the adequacy of the unit-test-coverage criterion that it had employed for years as a","['V Antinyan', 'J Derehag', 'A Sandberg', 'M Staron']",2018,IEEE Software
Negative effects of bytecode instrumentation on Java source code coverage,"Code coverage measurement is an important element in white-box testing, both in industrial practice and academic research. Other related areas are highly dependent on code coverage as well, including test case generation, test prioritization, fault localization, and","['D Tengeri', 'F Horváth', 'Á Beszédes']",2016,"2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)"
Novel applications of machine learning in software testing,Machine learning techniques have long been used for various purposes in software engineering. This paper provides a brief overview of the state of the art and reports on a number of novel applications I was involved with in the area of software testing. Reflecting,['LC Briand'],2008,2008 The Eighth International Conference on Quality Software
Novel approach for whole test suite generation using metamorphic relations,"Background: The software or an individual program will not get crash by the minute bugs in the code and always manual method for testing the code was not feasible, most of the cases the tester will adds the test oracles to the test cases using the manual method but it is not","['R Bandaru', 'JA Mayan']",2016,Indian Journal of Science and Technology
Observability using aspect-oriented programming for OO software testing,"Software testing is a process of executing software with the goal of finding errors. It is an important phase in the software development process. It still remains an art due to limitations in understanding of the principles of software. In this paper, we present a new approach to","['MZ Meetei', 'A Goel', 'SK Wasan']",2011,International Journal of System Assurance Engineering and Management
Observable modified condition/decision coverage,"In many critical systems domains, test suite adequacy is currently measured using structural coverage metrics over the source code. Of particular interest is the modified condition/decision coverage (MC/DC) criterion required for, eg, critical avionics systems. In","['M Whalen', 'G Gay', 'D You']",2013,2013 35th International Conference on Software Engineering (ICSE)
On strong mutation and subsuming mutants,"Mutation analysis is a powerful technique for software testing but it is also known to be computationally expensive. The main reason for the high computational cost is that many of the mutants are redundant and thus, do not contribute to the quality of the test suite. One of","['B Lindström', 'A Ḿrki']",2016,
On strong mutation and the theory of subsuming logic‐based mutants,"Redundant mutants might cause problems when benchmarking since testing techniques can get high scores without detecting any nonredundant mutants. However, removing nonredundant mutants might cause similar problems. Subsumed mutants are per definition","['B Lindström', 'A Márki']",2019,"Software Testing, Verification and Reliability"
On the construction of context-aware test suites,"Context-aware programs are responsive to various contexts and their changes. A faulty implementation of the context-awareness may lead to misbehavior. Existing techniques do not consider the amount of context changes related to program execution, so that they do not","['H Wang', 'WK Chan', 'TH Tse']",2010,
On the danger of coverage directed test case generation,"In the avionics domain, the use of structural coverage criteria is legally required in determining test suite adequacy. With the success of automated test generation tools, it is tempting to use these criteria as the basis for test generation. To more firmly establish the","['M Staats', 'G Gay', 'M Whalen', 'M Heimdahl']",2012,"Fundamental Approaches to Software Engineering, Lecture Notes in Computer Science"
On the effectiveness of manual and automatic unit test generation: ten years later,"Good unit tests play a paramount role when it comes to foster and evaluate software quality. However, writing effective tests is an extremely costly and time consuming practice. To reduce such a burden for developers, researchers devised ingenious techniques to","['D Serra', 'G Grano', 'F Palomba', 'F Ferrucci']",2019,2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)
On the effectiveness of unit tests in test-driven development,"Background: Writing unit tests is one of the primary activities in test-driven development. Yet, the existing reviews report few evidence supporting or refuting the effect of this development approach on test case quality. Lack of ability and skills of developers to produce sufficiently","['A Tosun', 'M Ahmed', 'B Turhan', 'N Juristo']",2018,
On the effectiveness of using elitist genetic algorithm in mutation testing,"Manual test case generation is an exhaustive and time-consuming process. However, automated test data generation may reduce the efforts and assist in creating an adequate test suite embracing predefined goals. The quality of a test suite depends on its fault-finding","['S Rani', 'B Suri', 'R Goyal']",2019,Symmetry
On the impact of timeouts and JVM crashes in Pitest,"Mutation analysis is a strong, well studied, faultbased testing criterion that has been shown to lead to strong test suites. Still, when using mutation analysis to compare test suites, previous work has shown that its results can be skewed because of redundant mutants. This","['T Laurent', 'F Wall', 'A Ventresque']",2020,"2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
On the implementation of search based approach to mutation testing,"As a method to measure a test case, mutation testing has become a subject of research, mostly about optimizing it using a search-based approach. At the time, there was no research about the potential obstacle of implementing a search-based approach in mutation","['M Tuloli', 'B Sitohang']",2017,2017 International Conference on Data and Software Engineering (ICoDSE)
On the influence of test smells on test coverage,"Software testing is a key practice in the software quality assurance process. Usually, the quality of a test is not analyzed before its execution, ie, there are no tests to check the tests. When the quality of tests is not guaranteed, it may impair the quality of the software. Test","['T Virgínio', 'R Santana', 'LA Martins', 'LR Soares']",2019,Proceedings of the XXXIII Brazilian Symposium on Software Engineering
On the limits of mutation analysis,Mutation analysis is the gold standard for evaluating test-suite adequacy. It involves exhaustive seeding of all small faults in a program and evaluating the effectiveness of test suites in detecting these faults. Mutation analysis subsumes numerous structural coverage,['R Gopinath'],2017,
On the limits of mutation reduction strategies,"Although mutation analysis is considered the best way to evaluate the effectiveness of a test suite, hefty computational cost often limits its use. To address this problem, various mutation reduction strategies have been proposed, all seeking to reduce the number of mutants while","['R Gopinath', 'MA Alipour', 'I Ahmed', 'C Jensen']",2016,Proceedings of the 38th International Conference on Software Engineering
On the preliminary adaptive random testing of aspect-oriented programs,,"['RM Parizi', 'AAA Ghani']",NA,
On the proposal and evaluation of a test-enriched dataset for configurable systems,"Configurable systems offer advantages compared to single systems since developers should maintain a unique platform to address a diversity of deployment contexts and usages. To ensure that all configurations correctly execute, developers spend considerable","['F Ferreira', 'G Vale', 'JP Diniz', 'E Figueiredo']",2020,Proceedings of the 14th International Working Conference on Variability Modelling of Software-Intensive Systems
On the test-driven development of emerging modularization mechanisms,Emerging modularization techniques such as aspects and their precursors such as events in implicit invocation languages aim to provide a software engineer with better facilities to separate conceptual concerns in software systems. To facilitate adoption of these,['RB Setty'],2008,
On the utility of dominator mutants for mutation testing,"Mutation testing has been shown to support the generation of test sets that are highly effective at detecting faults. However, practitioner adoption of mutation testing has been minimal in part because of problems that arise from the huge numbers of redundant and",['B Kurtz'],2016,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering
On-line tracing of XACML-based policy coverage criteria,"Currently, eXtensible Access Control Markup Language (XACML) has becoming the standard for implementing access control policies and consequently more attention is dedicated to testing the correctness of XACML policies. In particular, coverage measures","['F Lonetti', 'E Marchetti']",2018,IET Software
Operator-based and random mutant selection: Better together,"Mutation testing is a powerful methodology for evaluating the quality of a test suite. However, the methodology is also very costly, as the test suite may have to be executed for each mutant. Selective mutation testing is a well-studied technique to reduce this cost by selecting","['L Zhang', 'M Gligoric', 'D Marinov']",2013,2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Optimizing compilation with preservation of structural code coverage metrics to support software testing,"Code‐coverage‐based testing is a widely‐used testing strategy with the aim of providing a meaningful decision criterion for the adequacy of a test suite. Code‐coverage‐based testing is also mandated for the development of safety‐critical applications; for example, the","['R Kirner', 'W Haas']",2014,"Software Testing, Verification and Reliability"
Optimizing for the number of tests generated in search based test data generation with an application to the oracle cost problem,"Previous approaches to search based test data generation tend to focus on coverage, rather than oracle cost. While there may be an aspiration that systems should have models, checkable specifications and/or contract driven development, this sadly remains an","['M Harman', 'SG Kim', 'K Lakhotia']",2010,"2010 Third International Conference on Software Testing, Verification, and Validation Workshops"
Optimizing mutation testing by discovering dynamic mutant subsumption relations,"One recent promising direction on reducing costs of mutation analysis is to identify redundant mutations, ie, mutations that are subsumed by some other mutations. Previous works found out redundant mutants manually through the truth table. Although the idea is","['MA Guimarães', 'L Fernandes', 'M Ribeiro']",2020,"2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)"
Optimizing test prioritization via test distribution analysis,"Test prioritization aims to detect regression faults faster via reordering test executions, and a large number of test prioritization techniques have been proposed accordingly. However, test prioritization effectiveness is usually measured in terms of the average percentage of","['J Chen', 'Y Lou', 'L Zhang', 'J Zhou', 'X Wang']",2018,
Oracle problem in software testing,"The oracle problem remains one of the key challenges in software testing, for which little automated support has been developed so far. In my thesis work we introduce a technique for assessing and improving test oracles by reducing the incidence of both false positives",['G Jahangirova'],2017,Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis
PBCOV: a property-based coverage criterion,"Coverage criteria aim at satisfying test requirements and compute metrics values that quantify the adequacy of test suites at revealing defects in programs. Typically, a test requirement is a structural program element, and the coverage metric value represents the","['K Fawaz', 'F Zaraket', 'W Masri', 'H Harkous']",2015,Software Quality Journal
PIT-HOM: an extension of pitest for higher order mutation analysis,"Mutation testing is a well-known, effective, fault-based testing criterion. First order mutation introduces defects in the form of a single small syntactic change. While the technique has been shown to be effective, it has some limits. Higher order mutation, where the faults","['T Laurent', 'A Ventresque']",2019,"2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Pareto efficient multi-objective black-box test case selection for simulation-based testing,"Context: In many domains, engineers build simulation models (eg, Simulink) before developing code to simulate the behavior of complex systems (eg, Cyber-Physical Systems). Those models are commonly heavy to simulate which makes it difficult to execute the entire","['A Arrieta', 'S Wang', 'U Markiegi', 'A Arruabarrena']",2019,Information and Software Technology
Partitioning patches into test-equivalence classes for scaling program repair,"Automated program repair is a problem of finding a transformation (called a patch) of a given incorrect program that eliminates the observable failures. It has important applications such as providing debugging aids, automatically grading assignments and patching security","['S Mechtaev', 'X Gao', 'SH Tan']",2017,
Path based test suite augmentation using artificial bee colony algorithm,Regression testing is the activity of retesting a program that ensures that no new bugs are generated into the previously tested code. This activity involves selecting a few test cases from the test suite that exercise these changes. Suppose there is a program P and P'is it's,"['D Suri', 'P Kaur']",2014,
Path-wise test data generation based on heuristic look-ahead methods,"Path-wise test data generation is generally considered an important problem in the automation of software testing. In essence, it is a constraint optimization problem, which is often solved by search methods such as backtracking algorithms. In this paper, the","['Y Xing', 'YZ Gong', 'YW Wang', 'XZ Zhang']",2014,Mathematical Problems in Engineering
Personas and redundancies in crowdsourced testing,"Crowdsourced testing is gaining a lot of attention these days. Crowdsourced testing utilizes testers which subscribe to an external or internal crowdsourcing platform. Usually these testers are distributed across geographies. Thus, such testing can be treated as a form of","['A Dubey', 'K Singi', 'V Kaulgud']",2017,2017 IEEE 12th International Conference on Global Software Engineering (ICGSE)
Perspectives on automated testing of aspect-oriented programs,"Aspect-oriented software development is gaining popularity with the adoption of aspect-oriented languages in writing programs. To reduce the manual effort in assuring the quality of aspect-oriented programs, we have developed a set of techniques and tools for","['T Xie', 'J Zhao']",2007,Proceedings of the 3rd workshop on Testing aspect-oriented programs  - WTAOP '07
Pizza versus pinsa: On the perception and measurability of unit test code quality,"Test cases are an essential asset to evaluate software quality. The research community has provided various alternatives to help developers assessing the quality of tests, like code or mutation coverage. Despite the effort spent so far, however, little is known on how","['G Grano', 'C De Iaco', 'F Palomba']",2020,2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)
Possibility of cost reduction by mutant clustering according to the clustering scope,"Mutation testing offers developers a good way to improve the quality of a test set. However, the high cost of executing a large number of mutants remains an issue. This paper examines the possibility of reducing the cost of statement‐level mutant clustering by comparing the","['M Yu', 'YS Ma']",2019,"Software Testing, Verification and Reliability"
PraPR: Practical program repair via bytecode mutation,"Automated program repair (APR) is one of the recent advances in automated software engineering aiming for reducing the burden of debugging by suggesting high-quality patches that either directly fix the bugs, or help the programmers in the course of manual","['A Ghanbari', 'L Zhang']",2019,2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Practical amplification of condition/decision test coverage by combinatorial testing,"Test suites in complex software projects might grow over time to considerable sizes, incurring high maintenance effort and prolonged execution times. Maintaining their quality and efficiency require pruning of redundancies while increasing, or at least retaining their","['A Andrzejak', 'T Bach']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Practical mutation testing at scale,"Mutation analysis assesses a test suite's adequacy by measuring its ability to detect small artificial faults, systematically seeded into the tested program. Mutation analysis is considered one of the strongest test-adequacy criteria. Mutation testing builds on top of","['G Petrovic', 'M Ivankovic', 'G Fraser']",2021,
Practical mutation testing for smart contracts,"Solidity smart contracts operate in a hostile environment, which introduces the need for the adequate application of testing techniques to ensure mitigation of the risk of a security incident. Mutation testing is one such technique. It allows for the evaluation of the efficiency","['JJ Honig', 'MH Everts', 'M Huisman']",2019,
Practical program repair via bytecode mutation,"Automated Program Repair (APR) is one of the most recent advances in automated debugging, and can directly fix buggy programs with minimal human intervention. Although various advanced APR techniques (including search-based or","['A Ghanbari', 'S Benton', 'L Zhang']",2019,
Practitioners' views on good software testing practices,"Software testing is an integral part of software development process. Unfortunately, for many projects, bugs are prevalent despite testing effort, and testing continues to cost significant amount of time and resources. This brings forward the issue of test case quality and prompts","['PS Kochhar', 'X Xia', 'D Lo']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
Predicting survived and killed mutants,"Mutation Testing (MT) is a state-of-the-art technique for assessing test suite effectiveness. The MT principle is to inject variants, known as mutants, into the System Under Test (SUT). Then, the behaviour of the original SUT is compared to that of the mutated SUT when","['A Duque-Torres', 'N Doliashvili', 'D Pfahl']",2020,"2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Predicting testability of concurrent programs,"Concurrent programs are difficult to test due to their inherent non-determinism. To address the nondeterminism problem, testing often requires the exploration of thread schedules of a program, this can be time-consuming for testing real-world programs. We believe that testing","['T Yu', 'W Wen', 'X Han', 'JH Hayes']",2016,"2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Prediction of the testing effort for the safety certification of open-source software: A case study on a real-time operating system,"The reuse of Open Source Software (OSS) for safety-critical systems is seen with interest by industries, such as automotive, medical, and aerospace, as it enables shorter time-to-market and lower development costs. However, safety certification demands to supply evidence","['D Cotroneo', 'D Di Leo', 'R Natella']",2016,2016 12th European Dependable Computing Conference (EDCC)
Predictive analytics for software testing,"This keynote discusses the use of Predictive Analytics for Software Engineering, and in particular for Software Defect Prediction and Software Testing, by presenting the latest results achieved in these fields leveraging Artificial Intelligence, Search-based and Machine",['F Sarro'],2018,Proceedings of the 11th International Workshop on Search-Based Software Testing
Predictive analytics for software testing: Keynote paper,"This keynote discusses the use of Predictive Analytics for Software Engineering, and in particular for Software Defect Prediction and Software Testing, by presenting the latest results achieved in these fields leveraging Artificial Intelligence, Search-based and Machine",['F Sarro'],2018,
Predictive mutation testing,"Test suites play a key role in ensuring software quality. A good test suite may detect more faults than a poor-quality one. Mutation testing is a powerful methodology for evaluating the fault-detection ability of test suites. In mutation testing, a large number of mutants may be","['J Zhang', 'L Zhang', 'M Harman', 'D Hao']",2018,
Preventing data errors with continuous testing,"Today, software systems that rely on data are ubiquitous, and ensuring the data's quality is an increasingly important challenge as data errors result in annual multi-billion dollar losses. While software debugging and testing have received heavy research attention, less effort","['K Muşlu', 'Y Brun', 'A Meliou']",2015,Proceedings of the 2015 International Symposium on Software Testing and Analysis
Prioritizing state-based aspect tests,"In aspect-oriented programming, aspects are essentially incremental modifications to their base classes. Therefore aspect-oriented programs can be tested in an incremental fashion-we can first test the base classes and then test the base classes and aspects as a whole","['D Xu', 'J Ding']",2010,"2010 Third International Conference on Software Testing, Verification and Validation"
Private api access and functional mocking in automated unit test generation,"Not all object oriented code is easily testable: Dependency objects might be difficult or even impossible to instantiate, and object-oriented encapsulation makes testing potentially simple code difficult if it cannot easily be accessed. When this happens, then developers can resort","['A Arcuri', 'G Fraser', 'R Just']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
Profile analysis techniques for observation-based software testing,"Observation-based testing is a software-testing paradigm based on the idea of observing the behavior of the program when executed under a variety of test cases. The runtime behavior of a program can be summarized in profiles, which can then be analyzed for a variety of",['DZL Cesin'],2005,
Program state coverage: a test coverage metric based on executed program states,"In software testing, different metrics are proposed to predict and compare test suites effectiveness. In this regard, Mutation Score (MS) is one of most accurate metrics. However, calculating MS needs executing test suites many times and it is not commonly used in","['KE Someoliayi', 'S Jalali', 'M Mahdieh']",2019,"2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)"
"Programs, tests, and oracles: the foundations of testing revisited","In previous decades, researchers have explored the formal foundations of program testing. By exploring the foundations of testing largely separate from any specific method of testing, these researchers provided a general discussion of the testing process, including the goals","['M Staats', 'MW Whalen']",2011,
QTEP: Quality-aware test case prioritization,"Test case prioritization (TCP) is a practical activity in software testing for exposing faults earlier. Researchers have proposed many TCP techniques to reorder test cases. Among them, coverage-based TCPs have been widely investigated. Specifically, coverage-based","['S Wang', 'J Nam', 'L Tan']",2017,Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering
Qos-aware metamorphic testing: An elevation case study,"Elevators are among the oldest and most widespread transportation systems, yet their complexity increases rapidly to satisfy customization demands and to meet quality of service requirements. Verification and validation tasks in this context are costly, since they rely on","['J Ayerdi', 'S Segura', 'A Arrieta']",2020,2020 IEEE 31st International Symposium on Software Reliability Engineering (ISSRE)
Quality assessment of crowdsourced test cases,"Various software-engineering problems have been solved by crowdsourcing. In many projects, the software outsourcing process is streamlined on cloud-based platforms. Among software engineering tasks, test-case development is particularly suitable for crowdsourcing","['Y Zhao', 'Y Feng', 'Y Wang', 'R Hao', 'C Fang']",2020,Science China Information Sciences
Quantitative metrics for mutation testing,"Program mutation is the process of generating versions of a base program by applying elementary syntactic modifications; this technique has been used in program testing in a variety of applications, most notably to assess the quality of a test data set. A good test set",['A Ayad'],2019,Proceedings of the 14th International Conference on Software Technologies
RAMBUTANS: automatic AOP-specific test generation tool,"Aspect-oriented programming (AOP) is a programmatic methodology to handle better modularized code by separating crosscutting concerns from the traditional abstraction boundaries. Automated testing, as one of the most demanding needs of the software","['RM Parizi', 'AAA Ghani', 'SP Lee', 'SUR Khan']",2017,International Journal on Software Tools for Technology Transfer
Recent advances in automatic black-box testing,"Research in black-box testing has produced impressive results in the past 40 years, addressing many aspects of the problem that span from integration with the development process, to test case generation and execution. In the past few years, the research in this","['L Mariani', 'M Pezze', 'D Zuddas']",2015,Advances in Computers
Recent advances in regression testing techniques,"Software systems and their environment change are continuous. They are enhanced, corrected, and ported to new platforms. These changes can affect a system adversely, thus software engineers perform regression testing to ensure the quality of the modified systems",['H Do'],2016,Advances in Computers
Reconsidering automated feedback: A test-driven approach,"Writing meaningful software tests requires students to think critically about a problem and consider a variety of cases that might break the solution code. Consequently, to overcome bugs in their code, it would be beneficial for students to reflect over their work and write","['K Buffardi', 'SH Edwards']",2015,
Redefining and evaluating coverage criteria based on the testing scope,"Test coverage information can help testers in deciding when to stop testing and in augmenting their test suites when the measured coverage is not deemed sufficient. Since the notion of a test criterion was introduced in the 70's, research on coverage testing has",['B Miranda'],2016,
Reducing mutants with mutant killable precondition,"Mutation analysis is a method for predicting the quality of test suite accurately. However, it has high computational cost due to the number of mutants that are generated. For example, the ROR (Relational Operator Replacement) mutation operator will generate seven mutants","['C Iida', 'S Takada']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Reducing test effort: A systematic mapping study on existing approaches,"Context Quality assurance effort, especially testing effort, is often a major cost factor during software development, which sometimes consumes more than 50% of the overall development effort. Consequently, one major goal is often to reduce testing effort. Objective","['F Elberzhager', 'A Rosbach', 'J Münch']",2012,Information and Software Technology
Reduzindo o custo do teste de mutação com base no conceito de arcos primitivos,"Context: Software testing plays an important role in quality assurance. Testing techniques and criteria help the tester to develop and assess test suites. Mutation testing is a fault-based testing criterion commonly used to evaluate the quality of test suites. However, a high",['PH Kuroishi'],2021,
Regression test case prioritization by code combinations coverage,"Regression test case prioritization (RTCP) aims to improve the rate of fault detection by executing more important test cases as early as possible. Various RTCP techniques have been proposed based on different coverage criteria. Among them, a majority of techniques","['R Huang', 'Q Zhang', 'D Towey', 'W Sun', 'J Chen']",2020,
Regression test selection for AspectJ software,"As aspect-oriented software development gains popularity, there is growing interest in using aspects to implement cross-cutting concerns in object-oriented systems. When aspect-oriented features are added to an object-oriented program, or when an existing aspect","['G Xu', 'A Rountev']",2007,29th International Conference on Software Engineering (ICSE'07)
Regression test selection when evolving software with aspects,"Aspect-oriented software evolution introduces new challenges for regression test selection. When a program, that has been thoroughly tested, evolves by addition of an aspect, it is important for regression test selection to know which test cases are impacted by the new","['R Delamare', 'B Baudry', 'Y Le Traon']",2008,Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution - LATE '08
Regression testing in software product line engineering,"Software product line engineering is an approach to cost-efficiently derive tailored products to markets and customers, utilizing common components and services in a planned manner. Product lines have been applied to other engineering fields for decades, while being quite","['P Runeson', 'E Engström']",2012,
"Regression testing minimization, selection and prioritization: a survey","Regression testing is a testing activity that is performed to provide confidence that changes do not harm the existing behaviour of the software. Test suites tend to grow in size as software evolves, often making it too costly to execute entire test suites. A number of different","['S Yoo', 'M Harman']",2012,
Rehabilitating equivalent mutants as static anomaly detectors in software artifacts,"In mutation analysis a mutant is said equivalent if it leaves the semantics of the program or the model unchanged. Equivalent mutants are usually seen as an inconvenience; for example, in software testing they cannot be detected by a test and, therefore, they fictitiously","['P Arcaini', 'A Gargantini', 'E Riccobene']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
"Relating code coverage, mutation score and test suite reducibility to defect density","Assessing the overall quality (adequacy for a particular purpose) of existing test suites is a complex task. Their code coverage is a simple yet powerful attribute for this purpose, so the additional benefits of mutation analysis may not always justify the comparably much higher","['D Tengeri', 'L Vidács', 'Á Beszédes', 'J Jász']",2016,"2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Relation-based test case prioritization for regression testing,"Test case prioritization (TCP), which aims at detecting faults as early as possible is broadly used in program regression testing. Most existing TCP techniques exploit coverage information with the hypothesis that higher coverage has more chance to catch bugs. Static","['J Chi', 'Y Qu', 'Q Zheng', 'Z Yang', 'W Jin', 'D Cui']",2020,
Requirements coverage as an adequacy measure for conformance testing,Conformance testing in model-based development refers to the testing activity that verifies whether the code generated (manually or automatically) from the model is behaviorally equivalent to the model. Presently the adequacy of conformance testing is inferred by,"['A Rajan', 'M Whalen', 'M Staats']",2008,"Formal Methods and Software Engineering, Lecture Notes in Computer Science"
Resolving the equivalent mutant problem in the presence of non-determinism and coincidental correctness,"In this paper, we develop a new mutation testing technique called Interlocutory Mutation Testing (IMT) that mitigates the equivalent mutant problem in the presence of coincidental correctness and non-determinism. The accuracy of IMT was evaluated; it obtained a","['K Patel', 'RM Hierons']",2016,"Testing Software and Systems, Lecture Notes in Computer Science"
"Revisiting test smells in automatically generated tests: limitations, pitfalls, and opportunities","Test smells attempt to capture design issues in test code that reduce their maintainability. Previous work found such smells to be highly common in automatically generated test-cases, but based this result on specific static detection rules; although these are based on","['A Panichella', 'S Panichella', 'G Fraser']",2020,2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)
"Revisiting the relationship between fault detection, test adequacy criteria, and test set size","The research community has long recognized a complex interrelationship between fault detection, test adequacy criteria, and test set size. However, there is substantial confusion about whether and how to experimentally control for test set size when assessing how well","['YT Chen', 'R Gopinath', 'A Tadakamalla']",2020,Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering
RobOT: Robustness-oriented testing for deep learning systems,"Recently, there has been a significant growth of interest in applying software engineering techniques for the quality assurance of deep learning (DL) systems. One popular direction is deep learning testing, where adversarial examples (aka bugs) of DL systems are found","['J Wang', 'J Chen', 'Y Sun', 'X Ma', 'D Wang']",2021,2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)
Rostra: A framework for detecting redundant object-oriented unit tests,Object-oriented unit tests consist of sequences of method invocations. Behavior of an invocation depends on the state of the receiver object and method arguments at the beginning of the invocation. Existing tools for automatic generation of object-oriented test,"['T Xie', 'D Notkin', 'D Marinov']",2004,"Proceedings. 19th International Conference on Automated Software Engineering, 2004."
Rotten green tests,"Unit tests are a tenant of agile programming methodologies, and are widely used to improve code quality and prevent code regression. A green (passing) test is usually taken as a robust sign that the code under test is valid. However, some green tests contain assertions that are","['J Delplanque', 'S Ducasse', 'G Polito']",2019,2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)
"Running students' software tests against each others' code: new life for an old"" gimmick""","At SIGCSE 2002, Michael Goldwasser suggested a strategy for adding software testing practices to programming courses by requiring students to turn in tests along with their solutions, and then running every student's tests against every other student's program","['SH Edwards', 'Z Shams', 'M Cogswell']",2012,
SPt: uma nova abordagem para revisão automática de artefatos de software e geração de planos de teste,"Os produtos de software devem apresentar níveis de alta qualidade para serem bem-sucedidos em um mercado competitivo. Normalmente, a confiabilidade dos produtos é assegurada pelas atividades de teste. No entanto, o teste de software às vezes é","['AC MOTA', 'FA BARROS']",2019,
SS-BDD: automated acceptance testing for spreadsheets,"Current Spreadsheet Applications, such as Excel and Google Sheets, provide innumerous built-in facilities, including arithmetic, financial and statistical operations, as well as conditional expressions. Thus, users with little or no formal training in programming can","['L Almeida', 'E Cirilo', 'EA Barbosa']",2016,
STADS: Software testing as species discovery,"A fundamental challenge of software testing is the statistically well-grounded extrapolation from program behaviors observed during testing. For instance, a security researcher who has run the fuzzer for a week has currently no means (1) to estimate the total number of",['M Böhme'],2018,
STAGE: a software tool for automatic grading of testing exercises: case study paper,"We report on an approach and associated tool-support for automatically evaluating and grading exercises in Software Engineering courses, by connecting various third-party tools to the online learning platform Moodle. In the case study presented here, the tool was used","['S Pape', 'J Flake', 'A Beckmann', 'J Jürjens']",2016,
Sampling program inputs with mutation analysis: Going beyond combinatorial interaction testing,"Modern systems tend to be highly configurable. Testing such systems requires selecting test cases from a large input space. Thus, there is a need to systematically sample program inputs in order to reduce the testing effort. In such cases, testing the interactions between","['M Papadakis', 'C Henard']",2014,"2014 IEEE Seventh International Conference on Software Testing, Verification and Validation"
Scalability studies on selective mutation testing,"Mutation testing is a test method which is designed to evaluate a test suite's quality. Due to the expensive cost of mutation testing, selective mutation testing was first proposed in 1991 by Mathur, in which a subset of mutants are selected aiming to achieve the same",['J Zhang'],2015,2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
Scalable mutation testing using predictive analysis of deep learning model,"Software testing plays a crucial role in ensuring the quality of software systems. Mutation testing is designed to measure the adequacy of test suites by detecting artificially induced software faults. Despite their potential, the expensive cost and the scalability of mutation","['MR Naeem', 'T Lin', 'H Naeem', 'F Ullah', 'S Saeed']",2019,IEEE Access
Scaling testing of refactoring engines.,"Definir e implementar refatoramentos não é uma tarefa trivial, pois é difícil definir todas as pré-condições necessárias para garantir que a transformação preserve o comportamento observável do programa. Com isso, ferramentas de refatoramentos podem ter condições",['MMCL Sabino'],2016,
Scaling up automated test generation: Automatically generating maintainable regression unit tests for programs,This paper presents an automatic technique for generating maintainable regression unit tests for programs. We found previous test generation techniques inadequate for two main reasons. First. they were designed for and evaluated upon libraries rather than applications,"['B Robinson', 'MD Ernst', 'JH Perkins']",2011,2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)
"Scope-aided test prioritization, selection and minimization for software reuse","Software reuse can improve productivity, but does not exempt developers from the need to test the reused code into the new context. For this purpose, we propose here specific approaches to white-box test prioritization, selection and minimization that take into account","['B Miranda', 'A Bertolino']",2017,Journal of Systems and Software
Search-Based test case prioritization for simulation-Based testing of cyber-Physical system product lines,"Cyber-Physical Systems (CPSs) integrate computation with physical processes. These systems are usually highly configurable to address different customer needs and are evolving to be CPS product lines. The variability of CPS product lines is large, which implies","['A Arrieta', 'S Wang', 'G Sagardui', 'L Etxeberria']",2019,Journal of Systems and Software
Search-based mutant selection for efficient test suite improvement: Evaluation and results,"Context Search-based techniques have been applied to almost all areas in software engineering, especially to software testing, seeking to solve hard optimization problems. However, the problem of selecting mutants to improve the test suite at a lower cost has not","['P Delgado-Pérez', 'I Medina-Bulo']",2018,Information and Software Technology
Search-based product line fault detection allocating test cases iteratively,"The large number of possible configurations makes it unfeasible to test every single system variant in a product line. Consequently, a small subset of the product line products must be selected, typically following combinatorial interaction testing approaches. Recently, many","['U Markiegi', 'A Arrieta', 'G Sagardui']",2017,Proceedings of the 21st International Systems and Software Product Line Conference - Volume A
Search-based test case implantation for testing untested configurations,"Context Modern large-scale software systems are highly configurable, and thus require a large number of test cases to be implemented and revised for testing a variety of system configurations. This makes testing highly configurable systems very expensive and time","['D Pradhan', 'S Wang', 'T Yue', 'S Ali', 'M Liaaen']",2019,Information and Software Technology
Search-based testing in financial applications,"Automated unit test generation has been extensively studied in the literature in recent years. Previous studies on open source systems have shown that test generation tools are quite effective at detecting faults, but how effective and applicable are they in an industrial",['MM Almasi'],2017,
Searching for test data,In recent years metaheuristic search techniques have been applied successfully to solve many software engineering problems. One area in particular where these techniques have gained much attention is search based test data generation. Many techniques have been,['K Ghani'],2009,
Seeding strategies for multi-objective test case selection: an application on simulation-based testing,"The time it takes software systems to be tested is usually long. This is often caused by the time it takes the entire test suite to be executed. To optimize this, regression test selection approaches have allowed for improvements to the cost-effectiveness of verification and","['A Arrieta', 'JA Agirre', 'G Sagardui']",2020,
Seeding strategies in search‐based unit test generation,"Search‐based techniques have been applied successfully to the task of generating unit tests for object‐oriented software. However, as for any meta‐heuristic search, the efficiency heavily depends on many factors; seeding, which refers to the use of previous related","['JM Rojas', 'G Fraser', 'A Arcuri']",2016,"Software Testing, Verification and Reliability"
Selecting fault revealing mutants,"Mutant selection refers to the problem of choosing, among a large number of mutants, the (few) ones that should be used by the testers. In view of this, we investigate the problem of selecting the fault revealing mutants, ie, the mutants that are killable and lead to test cases","['TT Chekam', 'M Papadakis', 'TF Bissyandé']",2020,Empirical Software Engineering
Selective mutation testing for concurrent code,"Concurrent code is becoming increasingly important with the advent of multi-cores, but testing concurrent code is challenging. Researchers are developing new testing techniques and test suites for concurrent code, but evaluating these techniques and test suites often","['M Gligoric', 'L Zhang', 'C Pereira', 'G Pokam']",2013,Proceedings of the 2013 International Symposium on Software Testing and Analysis
Self determination: A comprehensive strategy for making automated tests more effective and efficient,"A significant change in software development over the last decade has been the growth of test automation. Most software organizations automate as many tests as possible, which not only saves time and money, but also increases reproducibility and reduces errors during","['K Baral', 'J Offutt', 'F Mulla']",2021,"2021 14th IEEE Conference on Software Testing, Verification and Validation (ICST)"
Semantic-preserving test model transformations for interchangeable coverage criteria,"Testing cannot be complete. Heuristic means like coverage criteria are applied to measure the quality of tests. In model-based testing, it is common to apply coverage criteria to test models. Beyond test quality measurement, coverage criteria are also used to steer test",['S Weißleder'],2009,
Semi-automatic security testing of web applications with fault models and properties,"Web applications are complex and face complex attacks, as well. Thus, security vulnerabilities are hard to find. To tackle this complexity we analyze abstract models of these web applications. We generate test cases by (semi-) automatically injecting faults into the",['M Büchler'],2015,
Semi-automatic test case expansion for mutation testing,"Mutation testing is the state-of-the-art technique for detecting weaknesses in a test suite. Unfortunately, alleviating these weakness (ie “killing the surviving mutants”) is quite labour-intensive. In this paper we investigate a recommender system which expands test cases with","['ZX Lu', 'S Vercammen', 'S Demeyer']",2020,"2020 IEEE Workshop on Validation, Analysis and Evolution of Software Tests (VST)"
Sentinel: A hyper-heuristic for the generation of mutant reduction strategies,"Mutation testing is an effective approach to evaluate and strengthen software test suites, but its adoption is currently limited by the mutants' execution computational cost. Several strategies have been proposed to reduce this cost (aka mutation cost reduction strategies)","['G Guizzo', 'F Sarro', 'J Krinke']",2020,IEEE Transactions on Software Engineering
Service testing for the internet of things,"Services that represent sensor and actuator nodes, together with service orchestration, aid in overcoming the heterogeneous structure of the Internet of Things (IoT). Interconnecting different sensor and actuator nodes and exposing them as services is a complex topic which",['ES Reetz'],2016,
SiMut: exploring program similarity to support the cost reduction of mutation testing,"Scientists have created many cost reduction techniques for mutation testing, and most of them reduce cost with minor losses of effectiveness. However, many of these techniques are difficult to generalize, difficult to scale, or both. Published results are usually limited to a","['AV Pizzoleto', 'FC Ferrari', 'LD Dallilo']",2020,"2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Simautogen tool: test vector generation from large scale Matlab/Simulink models,"Safety-critical applications require complete high-coverage testing, which is not always guaranteed by model-based test generation techniques. Recently, automatic test generation by model checking has been reported to improve the efficiency of test suites over","['N Ebdelli', 'SB Ahmed']",2016,"Formal Techniques for Distributed Objects, Components, and Systems, Lecture Notes in Computer Science"
Simulated restriction of coverage criteria on UML state machines,Model-based testing is a promising quality assurance technique. Automatic test generation from behavioral models is state of the art. Coverage criteria at model level are often used to measure test quality and to steer automatic test generation. While tests are focused on,"['S Weißleder', 'T Rogenhofer']",2011,"2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops"
Simulated satisfaction of coverage criteria on uml state machines,"UML state machines are widely used as test models in model-based testing. Coverage criteria are applied to them, eg to measure a test suite's coverage of the state machine or to steer automatic test suite generation based on the state machine. The model elements to",['S Weißleder'],2010,"2010 Third International Conference on Software Testing, Verification and Validation"
Simulation-based test adequacy criteria for distributed systems,"Developers of distributed systems routinely construct discrete-event simulations to help understand and evaluate the behavior of inter-component protocols. Simulations are abstract models of systems and their environments, capturing basic algorithmic functionality","['MJ Rutherford', 'A Carzaniga', 'AL Wolf']",2006,
Simulation-based testing of distributed systems,"Developers of distributed systems routinely construct discrete-event simulations to help them understand and evaluate the behavior of inter-component protocols. Typically written using an imperative programming language, these simulations capture basic algorithmic","['MJ Rutherford', 'A Carzaniga', 'AL Wolf']",2006,
Smartunit: Empirical evaluations for automated unit testing of embedded software in industry,"In this paper, we aim at the automated unit coverage-based testing for embedded software. To achieve the goal, by analyzing the industrial requirements and our previous work on automated unit testing tool CAUT, we rebuild a new tool, SmartUnit, to solve the engineering","['C Zhang', 'Y Yan', 'H Zhou', 'Y Yao', 'K Wu']",2018,
Smells in software test code: A survey of knowledge in industry and academia,"As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to","['V Garousi', 'B Küçük']",2018,Journal of Systems and Software
Smug: a selective mutant generator tool,"In this tool demo paper, we present a prototype of a tool for the selective generation of mutants in Java source code. We named this tool as SMUG (Selective MUtant Generator). Given two subsequent versions of a program, SMUG creates mutants by considering only","['S Romano', 'G Scanniello']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C)
Software semantics and syntax as a tool for automated test generation,Test automation saves time and cost by digitising test generation and execution. The existing techniques fail to produce effective and compliable test scripts for not considering both syntactic and semantic information. The proposed three-layer architecture incorporates,"['N Nahar', 'K Sakib']",2017,International Journal of Critical Computer-Based Systems
Software testing,"Any nontrivial program contains some errors in the source code. These “bugs” are annoying for users if they lead to application crashes and data loss, and they are worrisome if they lead to privacy leaks and security exploits. The economic damage caused by software bugs","['G Fraser', 'JM Rojas']",2019,
Software-testing contests: Observations and lessons learned,"While a significant amount of resources can be spent on software testing, the software produced may still suffer from low quality. The authors describe their experience of hosting industrysponsored software-testing contests to help undergraduate and graduate students","['X Wang', 'W Sun', 'L Hu', 'Y Zhao', 'WE Wong', 'Z Chen']",2019,Computer
Sound and quasi-complete detection of infeasible test requirements,"In software testing, coverage criteria specify the requirements to be covered by the test cases. However, in practice such criteria are limited due to the well-known infeasibility problem, which concerns elements/requirements that cannot be covered by any test case","['S Bardin', 'M Delahaye', 'R David']",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)"
Special features of testing tools applicable for use in trading systems production,"Page 1. Special Features of Testing Tools Applicable for Use in Trading Systems Production AA Averina “Innovative Trading Systems”, LLC Kostroma, Russia Email: nastasya-89@bk.ru IL Itkin “Exactpro Systems”, LLC San Rafael, CA, USA NA Antonov “Innovative Trading Systems”","['AA Averina', 'IL Itkin', 'NA Antonov']",2013,2013 Tools & Methods of Program Analysis
"Specify and measure, cover and reveal: A unified framework for automated test generation","Automatic test input generation (ATG) is a major topic in software engineering, analysis and security. In this paper, we bridge the gap between state-of-the-art white-box ATG techniques, especially Dynamic Symbolic Execution, and the diversity of test objectives that they may be","['S Bardin', 'N Kosmatov', 'M Marcozzi']",2021,Science of Computer Programming
Speeding up GUI testing by on-device test generation,"When generating GUI tests for Android apps, it typically is a separate test computer that generates interactions, which are then executed on an actual Android device. While this approach is efficient in the sense that apps and interactions execute quickly, the","['NP Borges', 'J Rau', 'A Zeller']",2020,Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering
Speeding up mutation testing via regression test selection: An extensive study,"Mutation testing is one of the most powerful methodologies to evaluate the quality of test suites, and has also been demonstrated to be effective for various other testing and debugging problems, eg, test generation, fault localization, and program repair. However","['L Chen', 'L Zhang']",2018,"2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)"
Speeding up mutation testing via the cloud: lessons learned for further optimisations,"Background: Mutation testing is the state-of-the-art technique for assessing the fault detection capacity of a test suite. Unfortunately, it is seldom applied in practice because it is computationally expensive. We witnessed 48 hours of mutation testing time on a test suite","['S Vercammen', 'S Demeyer', 'M Borg', 'S Eldh']",2018,
Speeding up test execution with increased cache locality,"As the scale and complexity of software increases, the number of tests needed for effective validation becomes extremely large. Executing these large test suites is expensive, both in terms of time and energy. Cache misses are a significant contributing factor to execution","['P Stratis', 'A Rajan']",2018,"Software Testing, Verification and Reliability"
Speeding-up mutation testing via data compression and state infection,"Mutation testing is widely considered as a high-end test criterion due to the vast number of mutants it generates. Although many efforts have been made to reduce the computational cost of mutation testing, its scalability issue remains in practice. In this paper, we introduce a","['Q Zhu', 'A Panichella', 'A Zaidman']",2017,
State of mutation testing at google,Mutation testing assesses test suite efficacy by inserting small faults into programs and measuring the ability of the test suite to detect them. It is widely considered the strongest test criterion in terms of finding the most faults and it subsumes a number of other coverage,"['G Petrović', 'M Ivanković']",2018,Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice
Statement frequency coverage: A code coverage criterion for assessing test suite effectiveness,"Context: Software testing is a pivotal activity in the development of high-quality software. As software is evolving through its life cycle, the need for a fault-revealing criterion assessing the effectiveness of the test suite grows. Over the years, researchers have proposed","['A Aghamohammadi', 'SH Mirian-Hosseinabadi']",2021,Information and Software Technology
Statement-oriented mutant reduction strategy for mutation based fault localization,"Mutation Based Fault Localization (MBFL) is a fault localization technique based on mutation analysis, which precisely identifies the location of fault but incurs a high execution cost, since it needs to execute the test suite on a large amount of mutants. Reduction","['Y Liu', 'Z Li', 'L Wang', 'Z Hu', 'R Zhao']",2017,"2017 IEEE International Conference on Software Quality, Reliability and Security (QRS)"
Static analysis of mutant subsumption,"Mutation analysis generates a large set of variants, or mutants, and then demands a test set that distinguishes each variant from the original artifact. It has long been apparent that many mutants contribute little, if anything, to the subsequent test set. Researchers have developed","['B Kurtz', 'P Ammann', 'J Offutt']",2015,"2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Strengthening inferred specifications using search based testing,"Software specification is an important element of the software development process. However, in most cases the specifications are out-of-date or even missing. One solution for this kind of problem is to use some process that infers the specification automatically. Work","['K Ghani', 'JA Clark']",2008,2008 IEEE International Conference on Software Testing Verification and Validation Workshop
Strong model-based mutation testing,"Powerful verification and validation methods are needed to keep up with the complexity of modern systems. While testing remains the most prevalent verification and validation method, scaling testing to huge and interdependent systems poses a big challenge. We",['A Fellner'],2021,
Structural testing for message‐passing concurrent programs: an extended test model,"Developing high‐quality, error‐free message‐passing concurrent programs is not trivial. Although a number of different primitives with associated semantics are available to assist such development, they often increase the complexity of the testing process. In this paper","['PSL Souza', 'SRS Souza']",2014,Concurrency and Computation: Practice and Experience
Study of integrating random and symbolic testing for object-oriented software,"Testing is currently the main technique adopted by the industry for improving the quality, reliability, and security of software. In order to lower the cost of manual testing, automatic testing techniques have been devised, such as random and symbolic testing, with their","['M Dimjašević', 'F Howar', 'K Luckow']",2018,
Study of trivial compiler equivalence on C++ object-oriented mutation operators,"Trivial Compiler Equivalence (TCE) has been recently proposed as an effective technique to detect equivalences between programs, where two or more programs are equivalent if the compiler produces the same binary code. Mutation testing can greatly","['P Delgado-Pérez', 'S Segura']",2019,Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing
Studying test-driven development and its retainment over a six-month time span,"In this paper, we investigate the effect of TDD, as compared to a non-TDD approach, as well as its retainment (or retention) over a time span of (about) six months. To pursue these objectives, we conducted a (quantitative) longitudinal cohort study with 30 novice","['MT Baldassarre', 'D Caivano', 'D Fucci', 'N Juristo']",2021,Journal of Systems and Software
Subnets generation of program nets and its application to software testing,"Software testing is an important problem to design a large software system and it is difficult to be solved due to its computational complexity. We try to use program nets to approach this problem. As the first step towards solving software testing problem, this paper provides a","['B Wu', 'X Bao', 'N Zhang', 'H Morita', 'M Nakata']",2019,"IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences"
Subsumption of program entities for efficient coverage and monitoring,"Program entities such as branches, def-use pairs, and call sequences are used in diverse software-development tasks. Reducing a set of entities to a small representative subset through subsumption saves monitoring overhead, focuses the developer's attention, and","['R Santelices', 'S Sinha', 'MJ Harrold']",2006,Proceedings of the 3rd international workshop on Software quality assurance  - SOQUA '06
Supporting controlled experimentation with testing techniques: An infrastructure and its potential impact,"Where the creation, understanding, and assessment of software testing and regression testing techniques are concerned, controlled experimentation is an indispensable research methodology. Obtaining the infrastructure necessary to support such experimentation","['H Do', 'S Elbaum', 'G Rothermel']",2005,Empirical Software Engineering
Supporting test suite evolution through test case adaptation,"Software systems evolve during development and maintenance, and many test cases designed for the early versions of the system become obsolete during the software lifecycle. Repairing test cases that do not compile due to changes in the code under test and","['M Mirzaaghaei', 'F Pastore']",2012,"2012 IEEE Fifth International Conference on Software Testing, Verification and Validation"
Swarm testing,"Swarm testing is a novel and inexpensive way to improve the diversity of test cases generated during random testing. Increased diversity leads to improved coverage and fault detection. In swarm testing, the usual practice of potentially including all features in every","['A Groce', 'C Zhang', 'E Eide', 'Y Chen']",2012,
Symcretic testing of programs,"Targeted inputs are input values for a program that lead to the execution of a user-specified branch or statement. Targeted inputs are useful: In debugging, for example, they allow programmers to follow the execution towards the program point where a bug occurred. In",['P Dinges'],2014,
Systematic literature review on search based mutation testing,Search based techniques have been widely applied in the domain of software testing. This Systematic Literature Review aims to present the research carried out in the field of search based approaches applied particularly to mutation testing. During the course of literature,"['J Nishtha', 'S Bharti', 'R Shweta']",2017,
Systematic mapping on quality in web application testing,"Similar to all other fields of study, assuring the quality of web applications is very important. With the aim of increasing web applications quality in testing, our task in this paper is to reflect on the results of the literature searches made in this area. The literature survey","['S Akbulut', 'YT Gebreyesus', 'A Mishra']",2019,2019 1st International Informatics and Software Engineering Conference (UBMYK)
TCE+: An extension of the tce method for detecting equivalent mutants in java programs,"While mutation testing is considered to be an effective technique in software testing, there are some impediments to its widespread use in industrial projects. One of these challenges is the equivalent mutant problem, and a line of research is dedicated to proposing new","['M Houshmand', 'S Paydar']",2017,"Fundamentals of Software Engineering, Lecture Notes in Computer Science"
TSTL: the template scripting testing language,"A test harness, in automated test generation, defines the set of valid tests for a system, as well as their correctness properties. The difficulty of writing test harnesses is a major obstacle to the adoption of automated test generation and model checking. Languages for","['J Holmes', 'A Groce', 'J Pinto', 'P Mittal', 'P Azimi']",2018,International Journal on Software Tools for Technology Transfer
Tailored mutants fit bugs better,"Mutation analysis measures test suite adequacy, the degree to which a test suite detects seeded faults: one test suite is better than another if it detects more mutants. Mutation analysis effectiveness rests on the assumption that mutants are coupled with real faults ie","['M Allamanis', 'ET Barr', 'R Just', 'C Sutton']",2016,
Taming test inputs for separation assurance,"The Next Generation Air Transportation System (NextGen) advocates the use of innovative algorithms and software to address the increasing load on air-traffic control. AutoResolver [12] is a large, complex NextGen component that provides separation","['D Giannakopoulou', 'F Howar', 'M Isberner']",2014,Proceedings of the 29th ACM/IEEE international conference on Automated software engineering
Targeted mutation: Efficient mutation analysis for testing non-functional properties,"Mutation analysis has proven to be a strong technique for software testing. Unfortunately, it is also computationally expensive and researchers have therefore proposed several different approaches to reduce the effort. None of these reduction techniques however","['B Lisper', 'B Lindström', 'P Potena']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Teaching software testing concepts using a mutation testing game,"Software testing is a core aspect of software development, but testing programs systematically is not always a core aspect of software engineering education. As a result, software developers often treat testing as a liability, and overall software quality suffers. One","['BS Clegg', 'JM Rojas', 'G Fraser']",2017,2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET)
Test adequacy assessment using test-defect coverage analytic model,Software testing is an essential activity in software development process that has been widely used as a means of achieving software reliability and quality. The emergence of incremental development in its various forms required a different approach to determining,"['SM Syed-Mohamad', 'NH Haron']",2017,
Test case selection using structural coverage in software product lines for time-budget constrained scenarios,"Testing product lines is a challenging activity due to the large number of products to be tested. Many approaches focus on reducing the time for testing a product line by reducing the number of products to be tested, by employing, for instance, combinatorial approaches","['U Markiegi', 'A Arrieta', 'L Etxeberria']",2019,Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing
Test coverage and impact analysis for detecting refactoring faults: a study on the extract method refactoring,"Refactoring validation by automated testing is a common practice in agile development processes. However, this practice can be misleading when the test suite is not adequate. Particularly, refactoring faults can be tricky and difficult to detect. While coverage analysis is","['ELG Alves', 'T Massoni', 'PDL Machado']",2015,
Test coverage and impact analysis for detecting refactoring faults: a study on the inline method,"Using refactoring techniques is known as a good practice to enhance the software quality either by decreasing the complexity or enhance the behaviour of the software. Here, we conduct a study using inline method refactoring technique to investigate the significance of","['I Alazzam', 'MS Al-Amri']",2019,International Journal of Business Information Systems
Test coverage and post-verification defects: A multiple case study,Test coverage is a promising measure of test effectiveness and development organizations are interested in cost-effective levels of coverage that provide sufficient fault removal with contained testing effort. We have conducted a multiple-case study on two dissimilar,"['A Mockus', 'N Nagappan']",2009,2009 3rd International Symposium on Empirical Software Engineering and Measurement
Test coverage in python programs,"We study code coverage in several popular Python projects: flask, matplotlib, pandas, scikit-learn, and scrapy. Coverage data on these projects is gathered and hosted on the Codecov website, from where this data can be mined. Using this data, and a syntactic parse of the","['H Zhai', 'C Casalnuovo']",2019,2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)
Test coverage of impacted code elements for detecting refactoring faults: An exploratory study,"Refactoring validation by testing is critical for quality in agile development. However, this activity may be misleading when a test suite is insufficiently robust for revealing faults. Particularly, refactoring faults can be tricky and difficult to detect. Coverage analysis is a","['ELG Alves', 'T Massoni', 'PD de Lima Machado']",2017,Journal of Systems and Software
Test effort and test coverage: correlation analysis in a safety critical operating system,"Il contesto del presente lavoro di tesi è la certificazione di sistemi software usati in domini applicativi safety critical, ad esempio in ambito militare, medico, aerospaziale, etc.. In tali applicazioni, infatti, il sistema deve essere conforme ad un safety standard. Negli ultimi anni","['D Di Leo', 'R Natella', 'R Pietrantuono', 'B Ovilio']",2012,
"Test first, code later: Educating for test driven development","As software engineering (SE) and information systems (IS) projects become more and more of collaborative nature in practice, project-based courses become an integral part of IS and SE curricula. One major challenge in this type of courses is students' tendency to write test","['N Unkelos-Shpigel', 'I Hadar']",2018,"Lecture Notes in Business Information Processing, Advanced Information Systems Engineering Workshops"
Test generation and test prioritization for simulink models with dynamic behavior,"All engineering disciplines are founded and rely on models, although they may differ on purposes and usages of modeling. Among the different disciplines, the engineering of Cyber Physical Systems (CPSs) particularly relies on models with dynamic behaviors (ie, models","['R Matinnejad', 'S Nejati', 'LC Briand']",2018,IEEE Transactions on Software Engineering
Test generation for high coverage with abstraction refinement and coarsening (ARC),Testing is the main approach used in the software industry to expose failures. Producing thorough test suites is an expensive and error prone task that can greatly benefit from automation. Two challenging problems in test automation are generating test input and,['M Baluda'],2014,
Test models and coverage criteria for automatic model-based test generation with UML state machines,Testing is an important means of quality management and is widely used in industrial practice. Model-based functional testing is focussed on comparing the system under test to a test model. This comparison usually consists of automatically generating a test suite from the,['S Weißleder'],2010,
Test suite evaluation using code coverage based metrics,"Regression test suites of evolving software systems are often crucial to maintaining software quality in the long term. They have to be effective in terms of detecting faults and helping their localization. However, to gain knowledge of such capabilities of test suites is usually","['F Horváth', 'B Vancsics', 'L Vidács', 'Á Beszédes']",2015,
Test suite optimization using chaotic firefly algorithm in software testing,Software testing is time consuming and a costly activity. Effective generation of test cases is necessary in order to perform rigorous testing. There exist various techniques for effective test case generation. These techniques are based on various test adequacy criteria such as,"['A Pandey', 'S Banerjee']",2021,"Research Anthology on Recent Trends, Tools, and Implications of Computer Programming"
Test-case prioritization for configuration testing,"Configuration changes are among the dominant causes of failures of large-scale software system deployment. Given the velocity of configuration changes, typically at the scale of hundreds to thousands of times daily in modern cloud systems, checking these configuration","['R Cheng', 'L Zhang', 'D Marinov', 'T Xu']",2021,
Test-driven development with mutation testing–an experimental study,"Test-driven development (TDD) is a popular design approach used by the developers with testing being the important software development driving factor. On the other hand, mutation testing is considered one of the most effective testing techniques. However, there is not so","['A Roman', 'M Mnich']",2021,Software Quality Journal
Test-splitter: creating unit tests from system tests with different input combinations,"In this thesis, an automated test generation technique for creating unit tests from system tests is presented. Our technique includes two main approaches, which are splitting a test into multiple tests and alternating the input values of the tests by applying different input",['O Demir'],2018,
Test-suite reduction does not necessarily require executing the program under test,"Removing redundancies from test-suites is an important task of software testing in order to keep test-suites as small as possible, but not to harm the test-suite's fault detection capabilities. A straightforward algorithm for test-suite reduction would select elements of the","['H Felbinger', 'F Wotawa', 'M Nica']",2016,"2016 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)"
Testing concurrent programs to achieve high synchronization coverage,"The effectiveness of software testing is often assessed by measuring coverage of some aspect of the software, such as its code. There is much research aimed at increasing code coverage of sequential software. However, there has been little research on increasing","['S Hong', 'J Ahn', 'S Park', 'M Kim', 'MJ Harrold']",2012,Proceedings of the 2012 International Symposium on Software Testing and Analysis - ISSTA 2012
Testing with fewer resources: An adaptive approach to performance-aware test case generation,"Automated test case generation is an effective technique to yield high-coverage test suites. While the majority of research effort has been devoted to satisfying coverage criteria, a recent trend emerged towards optimizing other non-coverage aspects. In this regard","['G Grano', 'C Laaber', 'A Panichella']",2019,IEEE Transactions on Software Engineering
The Major mutation framework: Efficient and scalable mutation analysis for Java,Mutation analysis seeds artificial faults (mutants) into a pro-gram and evaluates testing techniques by measuring how well they detect those mutants. Mutation analysis is well-established in software engineering research but hardly used in practice due to inherent,['R Just'],2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
The application of iterative interval arithmetic in path-wise test data generation,"Research of path-wise test data generation is crucial and challenging in the area of software testing, which can be formulated as a constraint satisfaction problem. In our previous research, a look-ahead search method has been proposed as the constraint solver for path","['Y Xing', 'YZ Gong', 'YW Wang', 'XZ Zhang']",2015,Engineering Applications of Artificial Intelligence
The application perspective of mutatoin testing.,"The work in the thesis has been carried out under the auspices of the research school IPA (Institute for Programming research and Algorithmics) and was financed by the Nederlandse Organisatie voor Wetenschappelijk Onderzoek (NWO), project TestRoots, grant number",['Q Zhu'],2020,
The care and feeding of wild-caught mutants,"Mutation testing of a test suite and a program provides a way to measure the quality of the test suite. In essence, mutation testing is a form of sensitivity testing: by running mutated versions of the program against the test suite, mutation testing measures the suite's","['DB Brown', 'M Vaughn', 'B Liblit', 'T Reps']",2017,
The complementary aspect of automatically and manually generated test case sets,"The test is a mandatory activity for software quality assurance. The knowledge about the software under testing is necessary to generate high-quality test cases, but to execute more than 80% of its source code is not an easy task, and demands an in-depth knowledge of the","['AMR Vincenzi', 'T Bachiega', 'DG de Oliveira']",2016,"Proceedings of the 7th International Workshop on Automating Test Case Design, Selection, and Evaluation"
"The correlation between code coverage, cyclomatic complexity and fault frequency","The quality of software gets more and more important as software is introduced to systems that are important to the infrastructure of modern society. This thesis studies one such code base developed at Ericsson AB, that is a vital piece of software for our infrastructure. With an",['S Persson'],2015,
The effect of program and model structure on the effectiveness of mc/dc test adequacy coverage,"Test adequacy metrics defined over the structure of a program, such as Modified Condition and Decision Coverage (MC/DC), are used to assess testing efforts. However, MC/DC can be “cheated” by restructuring a program to make it easier to achieve the desired coverage","['G Gay', 'A Rajan', 'M Staats', 'M Whalen']",2016,
The effect of test suite type on regression test selection,"Regression test selection (RTS) techniques reduce the cost of regression testing by running only test cases related to code modifications. RTS techniques have been extensively researched, and the effects of several context factors on techniques have been empirically","['N Dini', 'A Sullivan', 'M Gligoric']",2016,2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE)
The effectiveness of test coverage criteria for relational database schema integrity constraints,"Despite industry advice to the contrary, there has been little work that has sought to test that a relational database's schema has correctly specified integrity constraints. These critically important constraints ensure the coherence of data in a database, defending it from","['P Mcminn', 'CJ Wright', 'GM Kapfhammer']",2015,ACM Transactions on Software Engineering and Methodology
The effectiveness of test-driven development approach on software projects: A multi-case study,"Over recent years, software teams and companies have made attempts to achieve higher productivity and efficiency and get more success in the competitive market by employing proper software methods and practices. Test-driven development (TDD) is one of these","['V Bakhtiary', 'TJ Gandomani', 'A Salajegheh']",2020,Bulletin of Electrical Engineering and Informatics
The emerging field of test amplification: A survey,,"['B Danglot', 'O Vera-Perez', 'Z Yu', 'M Monperrus', 'B Baudry']",NA,
The fitness function for the job: Search-based generation of test suites that detect real faults,"Search-based test generation, if effective at fault detection, can lower the cost of testing. Such techniques rely on fitness functions to guide the search. Ultimately, such functions represent test goals that approximate-but do not ensure-fault detection. The need to rely on",['G Gay'],2017,"2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)"
The impact of concurrent coverage metrics on testing effectiveness,"When testing multithreaded programs, the number of possible thread interactions makes exploring all interactions infeasible in practice. In response, researchers have developed concurrent coverage metrics for multithreaded programs. These metrics allow them to","['S Hong', 'M Staats', 'J Ahn', 'M Kim']",2013,"2013 IEEE Sixth International Conference on Software Testing, Verification and Validation"
The impact of coverage on bug density in a large industrial software project,Measuring quality of test suites is one of the major challenges of software testing. Code coverage identifies tested and untested parts of code and is frequently used to approximate test suite quality. Multiple previous studies have investigated the relationship between,"['T Bach', 'A Andrzejak', 'R Pannemans']",2017,2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)
The impact of coverage on bug density in a large industrial software project.(2017),Measuring quality of test suites is one of the major challenges of software testing. Code coverage identifies tested and untested parts of code and is frequently used to approximate test suite quality. Multiple previous studies have investigated the relationship between,"['T BACH', 'A ANDRZEJAK', 'R PANNEMANS', 'D LO']",NA,2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)
The impact of fault type on the relationship between code coverage and fault detection,"Structural coverage criteria are commonly used to determine the adequacy of a test suite. However, studies investigating structural coverage and fault-finding capabilities have mixed results. Some studies have shown generating test suites to satisfy structural coverage","['A Schwartz', 'M Hetzel']",2016,Proceedings of the 11th International Workshop on Automation of Software Test - AST '16
"The impacts of techniques, programs and tests on automated program repair: An empirical study","Manual program repair is notoriously tedious, error-prone, and costly, especially for the modern large-scale projects. Automated program repair can automatically find program patches without much human intervention, greatly reducing the burden of developers as well","['X Kong', 'L Zhang', 'WE Wong', 'B Li']",2018,Journal of Systems and Software
The influence of multiple artifacts on the effectiveness of software testing,"The effectiveness of the software testing process is determined by artifacts used in testing, including the program, the set of tests, and the test oracle. However, in evaluating software testing techniques, including automated software testing techniques, the influence of these",['M Staats'],2010,Proceedings of the IEEE/ACM international conference on Automated software engineering - ASE '10
The practical assessment of test sets with inductive inference techniques,"Inductive inference is the process of hypothesizing a model from a set of examples. It can be considered to be the inverse of program testing, which is the process of generating a finite set of tests that are intended to fully exercise a software system. This relationship has been",['N Walkinshaw'],2010,"Testing – Practice and Research Techniques, Lecture Notes in Computer Science"
The ratio of equivalent mutants: A key to analyzing mutation equivalence,"Mutation testing is the art of generating syntactic versions (called mutants) of a base program, and is widely used in software testing, most notably the assessment of test suites. Mutants are useful only to the extent that they are semantically distinct from the base","['I Marsit', 'A Ayad', 'D Kim', 'M Latif', 'JM Loh']",2021,Journal of Systems and Software
The risks of coverage-directed test case generation,"A number of structural coverage criteria have been proposed to measure the adequacy of testing efforts. In the avionics and other critical systems domains, test suites satisfying structural coverage criteria are mandated by standards. With the advent of powerful","['G Gay', 'M Staats', 'M Whalen']",2015,
The significance of positive verification in unit test assessment,This study investigates whether computer science students' unit tests can positively verify acceptable implementations. The first phase uses between-subject comparisons to reveal students' tendencies to write tests that yield inaccurate outcomes by either failing acceptable,"['K Buffardi', 'P Valdivia']",2019,Proceedings of the 52nd Hawaii International Conference on System Sciences
The use of automatic test data generation for genetic improvement in a live system,In this paper we present a bespoke live system in commercial use that has been implemented with self-improving properties. During business hours it provides overview and control for many specialists to simultaneously schedule and observe the rehabilitation,"['SO Haraldsson', 'JR Woodward']",2017,2017 IEEE/ACM 10th International Workshop on Search-Based Software Testing (SBST)
The use of mutation in testing experiments and its sensitivity to external threats,Mutation analysts has emerged as a standard approach for empirical assessment of testing techniques. The test practitioners decide about cost-effectiveness of testing strategies based on the number of mutants the testing techniques detect. Though fundamental rigor to,"['AS Namin', 'S Kakarla']",2011,Proceedings of the 2011 International Symposium on Software Testing and Analysis - ISSTA '11
There is limited correlation between coverage and robustness for deep neural networks,"Deep neural networks (DNN) are increasingly applied in safety-critical systems, eg, for face recognition, autonomous car control and malware detection. It is also shown that DNNs are subject to attacks such as adversarial perturbation and thus must be properly tested. Many","['Y Dong', 'P Zhang', 'J Wang', 'S Liu', 'J Sun', 'J Hao']",2019,
Thread scheduling sequence generation based on all synchronization pair coverage criteria,"Testing multi-thread programs becomes extremely difficult because thread interleavings are uncertain, which may cause a program getting different results in each execution. Thus, Thread Scheduling Sequence (TSS) is a crucial factor in multi-thread program testing. A","['JX Guo', 'Z Li', 'CF Shi', 'RL Zhao']",2020,International Journal of Software Engineering and Knowledge Engineering
Threats to the validity of mutation-based test assessment,"Much research on software testing and test techniques relies on experimental studies based on mutation testing. In this paper we reveal that such studies are vulnerable to a potential threat to validity, leading to possible Type I errors; incorrectly rejecting the Null Hypothesis","['M Papadakis', 'C Henard', 'M Harman', 'Y Jia']",2016,Proceedings of the 25th International Symposium on Software Testing and Analysis
Ticket coverage: putting test coverage into context,"There is no metric that determines how well the implementation of a ticket has been tested. As a consequence, code changed within the context of a ticket might unintentionally remain untested and get into production. This is a major problem, because changed code is more","['J Rott', 'R Niedermayr', 'E Juergens']",2017,2017 IEEE/ACM 8th Workshop on Emerging Trends in Software Metrics (WETSoM)
Time to clean your test objectives,"Testing is the primary approach for detecting software defects. A major challenge faced by testers lies in crafting efficient test suites, able to detect a maximum number of bugs with manageable effort. To do so, they rely on coverage criteria, which define some precise test","['M Marcozzi', 'S Bardin', 'N Kosmatov']",2018,Proceedings of the 40th International Conference on Software Engineering
To be optimal or not in test-case prioritization,"Software testing aims to assure the quality of software under test. To improve the efficiency of software testing, especially regression testing, test-case prioritization is proposed to schedule the execution order of test cases in software testing. Among various test-case","['D Hao', 'L Zhang', 'L Zang', 'Y Wang']",2015,
"To call, or not to call: Contrasting direct and indirect branch coverage in test generation","While adequacy criteria offer an end-point for testing, they do not mandate how targets are covered. Branch Coverage may be attained through direct calls to methods, or through indirect calls between methods. Automated generation is biased towards the rapid gains",['G Gay'],2018,
To detect abnormal program behaviours via mutation deduction,"This paper presents Mutation Deduction, a methodology framework that explores the behaviours of a program under test through exploring the behaviours of its mutants. Mutation Deduction makes use of the relationship between the syntactic changes and semantic","['J Zhang', 'D Hao', 'L Zhang']",2018,"2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Tool-assisted unit-test generation and selection based on operational abstractions,"Unit testing, a common step in software development, presents a challenge. When produced manually, unit test suites are often insufficient to identify defects. The main alternative is to use one of a variety of automatic unit-test generation tools: these are able to produce and","['T Xie', 'D Notkin']",2006,Automated Software Engineering
Topsy-Turvy: a smarter and faster parallelization of mutation analysis,"Mutation analysis is an effective, if computationally expensive, technique that allows practitioners to accurately evaluate the quality of their test suites. To reduce the time and cost of mutation analysis, researchers have looked at parallelizing mutation runs---running","['R Gopinath', 'C Jensen', 'A Groce']",2016,
Toward generalization of mutant clustering results in mutation testing,Mutation testing is effectively used for evaluation of test case quality but suffers from high cost required for its realization. Mutated programs are injected with program changes specified by various mutation operators. One of the methods applied to the reduction of,['A Derezińska'],2015,"Advances in Intelligent Systems and Computing, Soft Computing in Computer and Information Science"
Toward optimal mc/dc test case generation,MC/DC coverage prescribes a set of MC/DC sequences. Such a sequence is defined by a specification of the truth values of certain atomic boolean expressions which appear in predicates (ie boolean combinations of atomic boolean expressions) in the,"['S Godboley', 'J Jaffar', 'R Maghareh', 'A Dutta']",2021,Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis
Toward practical mutation analysis for evaluating the quality of student-written software tests,"Software testing is being added to programming courses at many schools, but current assessment techniques for evaluating student-written tests are imperfect. Code coverage measures are typically used in practice, but they have limitations and sometimes","['Z Shams', 'SH Edwards']",2013,Proceedings of the ninth annual international ACM conference on International computing education research
Toward rigorous object-code coverage criteria,"Object-branch coverage (OBC) is often used as a measure of the thoroughness of tests suites, augmenting or substituting source-code based structural criteria such as branch coverage and modified condition/decision coverage (MC/DC). In addition, with the","['T Byun', 'V Sharma', 'S Rayadurgam']",2017,2017 IEEE 28th International Symposium on Software Reliability Engineering (ISSRE)
Towards a framework for generating tests to satisfy complex code coverage in java pathfinder,"We present work on a prototype tool based on the JavaPathfinder (JPF) model checker for automatically generating tests satisfying the MC/DC code coverage criterion. Using the Eclipse IDE, developers and testers can quickly instrument Java source code with JPF",['M Staats'],2009,
Towards black box testing of android apps,"Many state-of-art mobile application testing frameworks (eg, Dynodroid [1], EvoDroid [2]) enjoy Emma [3] or other code coverage libraries to measure the coverage achieved. The underlying assumption for these frameworks is availability of the app source code. Yet","['Y Zhauniarovich', 'A Philippov']",2015,"2015 10th International Conference on Availability, Reliability and Security"
Towards effective mutation testing for ATL,"The correctness of model transformations is crucial to obtain high-quality solutions in model-driven engineering. Testing is a common approach to detect errors in transformations, which requires having methods to assess the effectiveness of the test cases and improve their","['E Guerra', 'JS Cuadrado']",2019,2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS)
Towards minimal mutation analysis: Using the approximated dominator set of mutants,"In mutation testing, variants (ie, mutants) of the software under test are created. The mutants are then used to design tests that can detect the difference between the mutants and the original software under test. Empirical studies have shown that test suites that are effective in",['A Márki'],2019,
Towards preserving model coverage and structural code coverage,"Embedded systems are often used in safety-critical environments. Thus, thorough testing of them is mandatory. To achieve a required structural code-coverage criteria it is beneficial to derive the test data at a higher program-representation level than machine code. Higher",['R Kirner'],2009,EURASIP Journal on Embedded Systems
Towards regression test selection for AspectJ programs,Regression testing aims at showing that code has not been adversely affected by modification activities during maintenance. Regression test selection techniques reuse tests from an existing test suite to test a modified program. By reusing such a test suite to retest,"['J Zhao', 'T Xie', 'N Li']",2006,Proceedings of the 2nd workshop on Testing aspect-oriented programs  - WTAOP '06
Towards the practical mutation testing of AspectJ programs,Mutation testing is a test selection criterion that relies on the assumption that test cases which can reveal artificial faults in the software are also good to reveal the real ones. It helps to expose faults which would go otherwise unnoticed. This criterion has been shown to be a,"['FC Ferrari', 'A Rashid', 'JC Maldonado']",2013,Science of Computer Programming
Towards the prioritization of regression test suites with data flow information,"Regression test prioritization techniques re-order the execution of a test suite in an attempt to ensure that defects are revealed earlier in the test execution phase. In prior work, test suites were prioritized with respect to their ability to satisfy control flow-based and mutation","['MJ Rummel', 'GM Kapfhammer', 'A Thall']",2005,Proceedings of the 2005 ACM symposium on Applied computing  - SAC '05
Traceability mining between unit test and source code based on textual analysis applied to software systems,"Correctness of the designed system is one of the most important issues in the software development process. Therefore, various tests have been defined and designed to help software teams develop software with little or no problem. Finding a proper link between test","['AH Arshia', 'AH Rasekh', 'MR Moosavi']",2020,
Transformation rules for platform independent testing: An empirical study,"Most Model-Driven Development projects focus on model-level functional testing. However, our recent study found an average of 67% additional logic-based test requirements from the code compared to the design model. The fact that full coverage at the design model level","['A Eriksson', 'B Lindström', 'J Offutt']",2013,"2013 IEEE Sixth International Conference on Software Testing, Verification and Validation"
Transforming programs and tests in tandem for fault localization,"Localizing failure-inducing code is essential for software debugging. Manual fault localization can be quite tedious, error-prone, and time-consuming. Therefore, a huge body of research e orts have been dedicated to automated fault localization. Spectrum-based fault","['X Li', 'L Zhang']",2017,Proceedings of the ACM on Programming Languages
Transitioning from manual to automated software regression testing: Experience from the banking domain,"Regression testing is needed when a software or the environment hosting that software changes. Motivated by a real-world industrial need in the context of a large financial (banking) corporation in Turkey, the authors and their colleagues developed and introduced","['A Akin', 'S Sentürk', 'V Garousi']",2018,2018 25th Asia-Pacific Software Engineering Conference (APSEC)
"Trivial compiler equivalence: A large scale empirical study of a simple, fast and effective equivalent mutant detection technique","Identifying equivalent mutants remains the largest impediment to the widespread uptake of mutation testing. Despite being researched for more than three decades, the problem remains. We propose Trivial Compiler Equivalence (TCE) a technique that exploits the use","['M Papadakis', 'Y Jia', 'M Harman']",2015,2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
UCov: a user‐defined coverage criterion for test case intent verification,"The goal of regression testing is to ensure that the behaviour of existing code, believed correct by previous testing, is not altered by new program changes. This paper argues that the primary focus of regression testing should be on code associated with (1) earlier bug","['RA Assi', 'W Masri', 'F Zaraket']",2016,"Software Testing, Verification and Reliability"
Um arcabouço para a geração automatizada de testes funcionais a partir de cenários BDD,Atualmente a complexidade dos sistemas vêm aumentando muito e com isso se faz cada vez mais necessário técnicas de Engenharia de Software para se ter sistemas com mais qualidade. Algumas das técnicas mais conhecidas e aplicadas para se ter qualidade de,"['NN Marques', 'RA Fernandes']",2020,
Uma contribuição para o teste baseado em defeitos de software orientado a aspectos,A Programação Orientada a Aspectos (POA) é uma técnica contemporânea de desenvolvimento de software fortemente baseada no princípio da separação de interesses. Ela tem como objetivo tratar de problemas de modularização de software por meio da,['FC Ferrari'],2011,
Uma investigação sobre o uso de critérios de teste no desenvolvimento baseado em testes para o ensino de programação,"Resumo Camara, Bruno Henrique Pachulski. Uma investigação sobre o uso de critérios de teste no desenvolvimento baseado em testes para o ensino de programação. 2016. 130. f. Dissertação (Programa de Pós-Graduação em Informática), Universidade Tecnológica",['BHP Camara'],2016,
Uncertainty-aware specification and analysis for hardware-in-the-loop testing of cyber-physical systems,"Hardware-in-the-loop (HiL) testing is important for developing cyber-physical systems (CPS). HiL test cases manipulate hardware, are time-consuming and their behaviors are impacted by the uncertainties in the CPS environment. To mitigate the risks","['SY Shin', 'K Chaouch', 'S Nejati', 'M Sabetzadeh']",2021,Journal of Systems and Software
Uncertainty-wise testing of cyber-physical systems,"As compared with classical software/system testing, uncertainty-wise testing explicitly addresses known uncertainty about the behavior of a System Under Test (SUT), its operating environment, and interactions between the SUT and its operational environment","['S Ali', 'H Lu', 'S Wang', 'T Yue', 'M Zhang']",2017,Advances in Computers
Unifying regression testing with mutation testing,"Software testing is the most commonly used methodology for validating quality of software systems. Conceptually, testing is simple, but in practice, given the huge (practically infinite) space of inputs to test against, it requires solving a number of challenging problems",['L Zhang'],2014,
Unit and regression tests of scientific software: A study on SWMM,Testing helps assure software quality by executing a program and uncovering bugs. Scientific software developers often find it challenging to carry out systematic and automated testing due to reasons like inherent model uncertainties and complex floating-point,"['Z Peng', 'X Lin', 'M Simon', 'N Niu']",2021,Journal of Computational Science
Unit test generation using machine learning,"Test suite generators could help software engineers to ensure software quality by detecting software faults. These generators can be applied to software projects that do not have an initial test suite, a test suite can be generated which is maintained and optimized by the",['L Saes'],2018,
Unit testing for domain-specific languages,"Domain-specific languages (DSLs) offer several advantages by providing idioms that are similar to the abstractions found in a specific problem domain. However, a challenge is that tool support for DSLs is lacking when compared to the capabilities offered in general","['H Wu', 'J Gray', 'M Mernik']",2009,"Domain-Specific Languages, Lecture Notes in Computer Science"
Unit testing the User Interface: Automatic tests of web UI's in React,The objective of this study was to investigate tools and techniques for automated user interface tests of components written in the Javascript libraries React and Redux for the web application Console. Console is a social network platform which provides interconnection,['P Christersson Frend'],2016,
Unit testing tool competition—round four,"This paper describes the methodology and results of the 4th edition of the Java Unit Testing Tool Competition. This year's competition features a number of infrastructure improvements, new test effectiveness metrics, and the evaluation of the test generation tools for multiple","['U Rueda', 'R Just', 'JP Galeotti']",2016,
Using Aspect-Oriented Programming for mutation testing of third-party components,,['MP Usaola'],NA,
Using Mutation for the Assessment and optimization of tests and properties,We are interested in exploring the complementary relationship and tradeoffs between testing and property-based analysis with respect to bug detection. In this paper we present an empirical approach to the assessment of testing and property-based analysis tools using,['JS Bradbury'],2006,
Using controlled numbers of real faults and mutants to empirically evaluate coverage-based test case prioritization,"Used to establish confidence in the correctness of evolving software, regression testing is an important, yet costly, task. Test case prioritization enables the rapid detection of faults during regression testing by reordering the test suite so that effective tests are run as early as is","['D Paterson', 'GM Kapfhammer', 'G Fraser']",2018,Proceedings of the 13th International Workshop on Automation of Software Test
Using evolutionary computation to improve mutation testing,The work on mutation testing has attracted a lot of attention during the last decades. Mutation testing is a powerful mechanism to improve the quality of test suites based on the injection of syntactic changes into the code of the original program. Several studies have,"['P Delgado-Pérez', 'I Medina-Bulo']",2017,
Using fault history to improve mutation reduction,"Mutation testing can be used to measure test suite quality in two ways: by treating the kill score as a quality metric, or by treating each surviving, non-equivalent mutant as an indicator of an inadequacy in the test suite. The first technique relies on the assumption that","['L Inozemtseva', 'H Hemmati', 'R Holmes']",2013,Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2013
Using hardware testing approaches to improve software testing: Undetectable mutant identification,"Over four decades of R&D has delivered near-universal automation of test generation for digital hardware. In contrast, software testing has limited automation and hence suffers from low test quality and high cost. One of the important reasons for this difference is that","['J Zhang', 'SK Gupta']",2016,2016 IEEE 34th VLSI Test Symposium (VTS)
Using machine learning to refine black-box test specifications and test suites,"In the context of open source development or software evolution, developers often face test suites which have been developed with no apparent rationale and which may need to be augmented or refined to ensure sufficient dependability, or even reduced to meet tight","['LC Briand', 'Y Labiche', 'Z Bawar']",2008,
Using machine learning to refine category-partition test specifications and test suites,"In the context of open source development or software evolution, developers often face test suites which have been developed with no apparent rationale and which may need to be augmented or refined to ensure sufficient dependability, or even reduced to meet tight","['LC Briand', 'Y Labiche', 'Z Bawar', 'NT Spido']",2009,
Using metamorphic testing to improve dynamic symbolic execution,Dynamic symbolic execution (DSE) is an approach for automatically generating test inputs from source code using constraint information. It is used in fuzzing: the execution of tests while monitoring for generic properties such as buffer overflows and other security,"['E Alatawi', 'T Miller']",2015,2015 24th Australasian Software Engineering Conference
Using mutant stubbornness to create minimal and prioritized test sets,"In testing, engineers want to run the most useful tests early (prioritization). When tests are run hundreds or thousands of times, minimizing a test set can result in significant savings (minimization). This paper proposes a new analysis technique to address both the minimal","['L Gonzalez-Hernandez', 'B Lindström']",2018,"2018 IEEE International Conference on Software Quality, Reliability and Security (QRS)"
Using mutants to help developers distinguish and debug (compiler) faults,Measuring the distance between two program executions is a fundamental problem in dynamic analysis of software and useful in many test generation and debugging algorithms. This paper proposes a metric for measuring distance between executions and specializes it,"['J Holmes', 'A Groce']",2020,"Software Testing, Verification and Reliability"
"Using mutants to locate"" unknown"" faults","Many fault localization techniques operate by crosscutting coverage information of passed and failed test executions. Generally, their accuracy depends on the utilized coverage elements and on the selected test cases. This paper proposes a novel fault localization","['M Papadakis', 'Y Le Traon']",2012,"2012 IEEE Fifth International Conference on Software Testing, Verification and Validation"
Using mutation analysis for assessing and comparing testing coverage criteria,"The empirical assessment of test techniques plays an important role in software testing research. One common practice is to seed faults in subject software, either manually or by using a program that generates all possible mutants based on a set of mutation operators","['JH Andrews', 'LC Briand', 'Y Labiche']",2006,IEEE Transactions on Software Engineering
Using predictive models to evaluate the quality of a test suite at class and method level.,"Testing is an indispensable part of the software development process and is a continuous process during the development life cycle. In this context, examining the behavior of software systems to reveal potential problems is a crucial task. To this end, the test suites","['KL Silva', 'E Cota']",2020,Anais Estendidos do XI Congresso Brasileiro de Software: Teoria e Prática (CBSoft 2020)
Using probabilistic model checking to evaluate GUI testing techniques,"Different testing techniques are being proposed in software testing to improve systems quality and increase development productivity. However, it is difficult to determine from a given set of testing techniques, which is the most effective testing technique for a certain","['C Bertolini', 'A Mota']",2009,2009 Seventh IEEE International Conference on Software Engineering and Formal Methods
Using program mutation for the empirical assessment of fault detection techniques: a comparison of concurrency testing and model checking,"As a result of advances in hardware technology such as multi-core processors there is an increased need for concurrent software development. Unfortunately, developing correct concurrent code is more difficult than developing correct sequential code. This difficulty is",['JS Bradbury'],2007,
Using relative lines of code to guide automated test generation for Python,"Raw lines of code (LOC) is a metric that does not, at first glance, seem extremely useful for automated test generation. It is both highly language-dependent and not extremely meaningful, semantically, within a language: one coder can produce the same effect with","['J Holmes', 'I Ahmed', 'C Brindescu', 'R Gopinath']",2020,ACM Transactions on Software Engineering and Methodology
Using reliability risk analysis to prioritize test cases,"In this paper, we present a risk-based test case prioritization (Ri-TCP) algorithm based on the transmission of information flows among software components. Most of the existing approaches rely on the historical code changes or test case execution data, few of them","['Y Wang', 'Z Zhu', 'B Yang', 'F Guo', 'H Yu']",2018,Journal of Systems and Software
Using semantic metrics to predict mutation equivalence,Equivalent mutants are a major nuisance in mutation testing because they introduce a significant amount of bias. But weeding them out is difficult because it requires a detailed analysis of the source code of the base program and the mutant. In this paper we argue that,"['A Ayad', 'I Marsit', 'NM Omri', 'JM Loh', 'A Mili']",2018,"Communications in Computer and Information Science, Software Technologies"
Using source transformation to test and model check implicit-invocation systems,"In this paper we present a source transformation-based framework to support uniform testing and model checking of implicit-invocation software systems. The framework includes a new domain-specific programming language, the Implicit-Invocation Language (IIL), explicitly","['H Zhang', 'JS Bradbury', 'JR Cordy', 'J Dingel']",2006,Science of Computer Programming
Using structural testing to identify unintended join points selected by pointcuts in Aspect-Oriented programs,"The goal of aspect-oriented programming is to modularize concerns that tend to tangle with and scatter across multiple modules of software systems. For that purpose, crosscutting behavior implemented as advice is applied to several points of the base program (ie, join","['OAL Lemos', 'PC Masiero']",2008,2008 32nd Annual IEEE Software Engineering Workshop
Using test case reduction and prioritization to improve symbolic execution,"Scaling symbolic execution to large programs or programs with complex inputs remains difficult due to path explosion and complex constraints, as well as external method calls. Additionally, creating an effective test structure with symbolic inputs can be difficult. A","['C Zhang', 'A Groce', 'MA Alipour']",2014,Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014
Using the city metaphor for visualizing test-related metrics,Software visualization techniques and tools play an important role in system comprehension efforts of software developers in the era of increasing code size and complexity. They enable the developer to have a global perception on various software attributes with the aid of,"['G Balogh', 'T Gergely', 'A Beszédes']",2016,"2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)"
Using timed base-choice coverage criterion for testing industrial control software,The base-choice criterion was proposed as a suitable technique for testing software based on its nominal choice of input parameters. Test cases are created based on this strategy by varying the values of one input parameter at a time while keeping the values of the other,"['H Bergström', 'EP Enoiu']",2017,"2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)"
Utilizing artificial intelligence in software testing,"Artificial Intelligence has become more and more important part of computer science and IT business. Anyhow, it has not been used in the software testing widely. At the same time the demand for using the test automation and testing more efficiently has increased. Using the",['M Mäkelä'],2019,
Variable strength combinatorial testing of concurrent programs,Reachability testing is an important approach to testing concurrent programs. It generates and exercises synchronization sequences automatically and on-the-fly without saving any test history. Existing reachability testing can be classified into exhaustive and t-way testing,"['X Qi', 'J He', 'P Wang', 'H Zhou']",2016,Frontiers of Computer Science
Veritesting challenges in symbolic execution of Java,Scaling symbolic execution to industrial-sized programs is an important open research problem. Veritesting is a promising technique that improves scalability by combining the advantages of static symbolic execution with those of dynamic symbolic execution. The goal,"['V Sharma', 'MW Whalen', 'S McCamant']",2018,ACM SIGSOFT Software Engineering Notes
Virtual mutation analysis of relational database schemas,Relational databases are a vital component of many modern software applications. Key to the definition of the database schema-which specifies what types of data will be stored in the database and the structure in which the data is to be organized-are integrity constraints,"['P McMinn', 'GM Kapfhammer']",2016,Proceedings of the 11th International Workshop on Automation of Software Test - AST '16
Visualizing test-defect coverage information to support analytical reasoning and testing,"Software testing is an essential activity in all software projects. The key issue in testing is determining the sufficiency of tests and, traditionally this has been done by using the Software Reliability Growth Models (SRGMs). However, SRGMs are not applicable when","['SM Syed-Mohamad', 'MH Husin']",2019,Proceedings of the 2019 8th International Conference on Software and Computer Applications
We need a testability transformation semantics,"This paper (This paper is a brief outline of some of the content of the keynote by the author at the 16^ th International Conference on Software Engineering and Formal Methods (SEFM 2018) in Toulouse, France; 27th–29th June 2018.) briefly reviews Testability Transformation",['M Harman'],2018,"Software Engineering and Formal Methods, Lecture Notes in Computer Science"
Weaving context sensitivity into test suite construction,Context-aware applications capture environmental changes as contexts and self-adapt their behaviors dynamically. Existing testing research has not explored context evolutions or their patterns inherent to individual test cases when constructing test suites. We propose the,"['H Wang', 'WK Chan']",2009,2009 IEEE/ACM International Conference on Automated Software Engineering
Web test automation: Insights from the grey literature,"This paper provides the results of a survey of the grey literature concerning best practices for end-to-end web test automation. We analyzed more than 2,400 sources (eg, blog posts, white-papers, user manuals, GitHub repositories) looking for guidelines by IT professionals","['F Ricca', 'A Stocco']",2021,"SOFSEM 2021: Theory and Practice of Computer Science, Lecture Notes in Computer Science"
What do we (really) know about test-driven development?,Test-driven development (TDD) involves more than just testing before coding. This article examines how (and whether) TDD has lived up to its promises. Test-driven development (TDD) is one of the most controversial agile practices in terms of its impact on software,"['I Karac', 'B Turhan']",2018,IEEE Software
What factors make SQL test cases understandable for testers? a human study of automated test data generation techniques,"Since relational databases are a key component of software systems ranging from small mobile to large enterprise applications, there are well-studied methods that automatically generate test cases for database-related functionality. Yet, there has been no research to","['A Alsharif', 'GM Kapfhammer']",2019,2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)
What is the adoption level of automated support for testing in open-source ecosystems?,"In the last decades, different kinds of automated support for testing have emerged in the open-source community. However, we still have limited evidence about the adoption level of such automated support in practice, considering different programming language","['RM da Silva', 'C Cruz', 'H de S. Campos']",2019,Proceedings of the IV Brazilian Symposium on Systematic and Automated Software Testing  - SAST 2019
What makes killing a mutant hard,"Mutation operators have been studied at length to determine which ones are the``best"" at some metric (for example creates the least equivalent mutants, creates hard-to-kill mutants, etc.). These studies though have focused on specific test suites, where the test inputs and",['W Visser'],2016,Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering
When tests collide: Evaluating and coping with the impact of test dependence,"In a test suite, all the test cases should be independent: no test should affect any other test's result, and running the tests in any order should produce the same test results. The assumption of test independence is important so that tests behave consistently as designed","['W Lam', 'S Zhang', 'MD Ernst']",2015,
Which generated test failures are fault revealing? prioritizing failures based on inferred precondition violations using PAF,"Automated unit testing tools, such as Randoop, have been developed to produce failing tests as means of finding faults. However, these tools often produce false alarms, so are not widely used in practice. The main reason for a false alarm is that the generated failing test","['M Kim', 'SC Cheung', 'S Kim']",2018,Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering
Who tests the testers?,"Instructors routinely use automated assessment methods to evaluate the semantic qualities of student implementations and, sometimes, test suites. In this work, we distill a variety of automated assessment methods in the literature down to a pair of assessment models. We","['J Wrenn', 'S Krishnamurthi', 'K Fisler']",2018,Proceedings of the 2018 ACM Conference on International Computing Education Research
Will my tests tell me if i break this code?,"Automated tests play an important role in software evolution because they can rapidly detect faults introduced during changes. In practice, code-coverage metrics are often used as criteria to evaluate the effectiveness of test suites with focus on regression faults. However","['R Niedermayr', 'E Juergens']",2016,Proceedings of the International Workshop on Continuous Software Evolution and Delivery
Wodel-Test: a model-based framework for language-independent mutation testing,"Mutation testing (MT) targets the assessment of test cases by measuring their efficiency to detect faults. This technique involves modifying the program under test to emulate programming faults, and assessing whether the existing test cases detect such mutations","['P Gómez-Abajo', 'E Guerra', 'J de Lara']",2020,Software and Systems Modeling
XACMET: XACML testing & modeling,"In the context of access control systems, testing activity is among the most adopted means to assure that sensible information or resources are correctly accessed. In XACML-based access control systems, incoming access requests are transmitted to the policy decision","['S Daoudagh', 'F Lonetti', 'E Marchetti']",2020,Software Quality Journal
You are the only possible oracle: Effective test selection for end users of interactive machine learning systems,"How do you test a program when only a single user, with no expertise in software testing, is able to determine if the program is performing correctly? Such programs are common today in the form of machine-learned classifiers. We consider the problem of testing this common","['A Groce', 'T Kulesza', 'C Zhang']",2013,IEEE Transactions on Software Engineering
iDFlakies: A framework for detecting and partially classifying flaky tests,Regression testing is increasingly important with the wide use of continuous integration. A desirable requirement for regression testing is that a test failure reliably indicates a problem in the code under test and not a false alarm from the test code or the testing infrastructure,"['W Lam', 'R Oei', 'A Shi', 'D Marinov']",2019,"2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)"
isense2. 0: Improving completion-aware crowdtesting management with duplicate tagger and sanity checker,"Software engineers get questions of “how much testing is enough” on a regular basis. Existing approaches in software testing management employ experience-, risk-, or value-based analysis to prioritize and manage testing processes. However, very few is applicable","['J Wang', 'Y Yang', 'T Menzies', 'Q Wang']",2020,
mrstudyr: Retrospectively studying the effectiveness of mutant reduction techniques,"Mutation testing is a well-known method for measuring a test suite's quality. However, due to its computational expense and intrinsic difficulties (eg, detecting equivalent mutants and potentially checking a mutant's status for each test), mutation testing is often challenging to","['CJ McCurdy', 'P McMinn']",2016,2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)
µdroid: an energy-aware mutation testing framework for android,"The rising popularity of mobile apps deployed on battery-constrained devices underlines the need for effectively evaluating their energy properties. However, currently there is a lack of testing tools for evaluating the energy properties of apps. As a result, for energy testing","['R Jabbarvand', 'S Malek']",2017,Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering
